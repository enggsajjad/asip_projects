<?xml version="1.0" encoding="Shift_JIS" ?>
<FHM>
  <model_name> satadder </model_name>

  <model>
    <design_level> behavior </design_level>
    <version> 1.0 </version>
    <author> <![CDATA[ asip03 ]]> </author>
    <affiliation> <![CDATA[ Uni Karlsruhe ]]> </affiliation>
    <model_info> <![CDATA[ - ]]> </model_info>

    <parameter>
      <parameter_value key="bit_width">
        <value> 16 </value>
        <value> 32 </value>
      </parameter_value>
      <parameter_value key="upper_limit">
        <value> 88 </value>
        <value> 65535 </value>
      </parameter_value>
    </parameter>

    <function_description>
      <script>
        <![CDATA[
#!/usr/bin/perl
# This script generates register function definition in behavior level
# parameter : bit_width upper_limit

if ($#ARGV != 1) {
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width upper_limit\n";
    exit (100);
}

$bit_width    = $ARGV[0];
$upper_limit  = $ARGV[1];
$msb = $bit_width - 1;

print <<FHM_DL_SATADDER;
/** satadder */
function satadder {
  input {
    bit [$msb:0] src0;
    bit [$msb:0] src1;
  }
  output {
    bit [$msb:0] dest;
  }
  control {
  }
  protocol {
  }
}
FHM_DL_SATADDER

exit (0);
        ]]>
      </script>
    </function_description>

    <function_conv>
      <script>
        <![CDATA[
#!/usr/bin/perl
# This script generates register function definition in behavior level
# parameter : bit_width upper_limit

if ($#ARGV != 1) {
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width upper_limit\n";
    exit (100);
}

$bit_width    = $ARGV[0];
$upper_limit  = $ARGV[1];
$msb = $bit_width - 1;

print <<FHM_DL_SATADDER;
/** satadder */
function satadder {
  input {
    bit [$msb:0] src0;
    bit [$msb:0] src1;
  }
  output {
    bit [$msb:0] dest;
  }
  control {
  }
  protocol {
  }
}
FHM_DL_SATADDER

exit (0);
        ]]>
      </script>
    </function_conv>

    <function_port>
      <script>
        <![CDATA[
#!/usr/bin/perl
# This script generates register port information in behavior level
# parameter : bit_width upper_limit

if ($#ARGV != 1) {
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width upper_limit\n";
    exit (100);
}

$bit_width    = $ARGV[0];
$upper_limit  = $ARGV[1];
$msb = $bit_width - 1;

print <<FHM_DL_PORTS;
src0 in  bit_vector $msb 0 data
src1 in  bit_vector $msb 0 data
dest out bit_vector $msb 0 data
FHM_DL_PORTS

exit (0);
        ]]>
      </script>
    </function_port>

    <design>
      <design_lang> vhdl </design_lang>

      <instance>
        <script>
          <![CDATA[
#!/usr/bin/perl
# This script generates register instance in behavior level
# parameter : instance_name bit_width upper_limit

if ($#ARGV != 2) {
  print "number of parameters is wrong.\n";
  print "usage : this_script instance_name bit_width upper_limit\n";
  exit (100);
}

$instance_name = $ARGV[0];
$bit_width    = $ARGV[1];
$upper_limit  = $ARGV[2];
$msb = $bit_width - 1;

$signals = <<END_SIGNALS;
-- Your signal declaration here
END_SIGNALS

$vhdl = <<END_VHDL;
-- Your vhdl code here
process (src0, src1)
    variable res : integer;
begin
    res := to_integer(signed(src0)) + to_integer(signed(src1));

    if (res < 0) then
        dest <= (others => '0');
    elsif (res > $upper_limit) then
        dest <= std_logic_vector(to_signed($upper_limit, dest'length));
    else
        dest <= std_logic_vector(to_signed(res, dest'length));
    end if;
end process;
END_VHDL


{
print <<FHM_DL_COMMENTS;
FHM_DL_COMMENTS
}



print <<FHM_DL_TOP_2;
--   int_port : internal port
--   ext_port : external port

-- Comment :

library IEEE;
  use IEEE.std_logic_1164.all;
  use IEEE.std_logic_unsigned.all;
  use IEEE.numeric_std.all;

entity $instance_name is
  port (
FHM_DL_TOP_2

    print <<FHM_DL_PORTS;
	src0 : in std_logic_vector($msb downto 0);
	src1 : in std_logic_vector($msb downto 0);
	dest : out std_logic_vector($msb downto 0)
        );
FHM_DL_PORTS

{
print <<FHM_DL_ARCH;
end $instance_name;

architecture logic of $instance_name is
$signals
begin
  $vhdl
end logic;

FHM_DL_ARCH
}

exit (0);
          ]]>
        </script>
      </instance>

      <entity>
        <script>
          <![CDATA[
#!/usr/bin/perl
# This script generates register instance in behavior level
# parameter : instance_name bit_width upper_limit

if ($#ARGV != 2) {
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name bit_width upper_limit\n";
    exit (100);
}

$instance_name = $ARGV[0];

$bit_width    = $ARGV[1];
$upper_limit  = $ARGV[2];
$msb = $bit_width - 1;

{
print <<FHM_DL_TOP;

entity $instance_name is
  port (
FHM_DL_TOP

}

    print <<FHM_DL_PORTS;
        );
FHM_DL_PORTS

{
print <<FHM_DL_BOTTOM;
end $instance_name;
FHM_DL_BOTTOM
}
exit (0);
          ]]>
        </script>
      </entity>

      <testvector>
        <testvector_script>
          <![CDATA[ ]]>
        </testvector_script>
      </testvector>

      <synthesis>
        <parameter></parameter>
        <synthesis_script>
          <script>
            <![CDATA[
#!/usr/bin/perl
# This script generates register synthesis script in behavior level
# parameter : instance_name priority bit_width upper_limit

if ($#ARGV != 3) {
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name priority bit_width upper_limit\n";
    exit (100);
}

$instance_name = $ARGV[0];
$priority      = $ARGV[1];
$bit_width     = $ARGV[2];


if ($priority eq "area"){
  $priority_const = "set_max_area 0";
}
elsif ($priority eq "performance"){
  $priority_const = "set_max_delay -from all_inputs() -to all_outputs() 0";
}
elsif ($priority eq "power"){
  $priority_const = "";
}
elsif ($priority eq "none"){
  $priority_const = "";
}
else {
    print "priority $priority is not supported.\n";
    exit(100);
}

{
print <<FHM_DL_END_OF_SCRIPT;
hdlin_auto_save_templates = TRUE

analyze -f vhdl $instance_name.vhd

elaborate $instance_name
uniquify

$priority_const

create_clock -period 10 -waveform{0 5} clock

compile

write -hierarchy -output $instance_name.db

report_area
report_timing

quit
FHM_DL_END_OF_SCRIPT
}
exit(0);
            ]]>
          </script>
        </synthesis_script>
      </synthesis>
    </design>

    <estimation>
      <estimation_data>
        <library name="OSAKA">

          <est_type name="shape">
            <est_index name="area">
              <unit> mm2 </unit>
              <translate>
                <translate_value key="gate"> 4201.68 </translate_value>
                <translate_value key="mm2">  1 </translate_value>
              </translate>

              <parameters name="">
                        <max>
                                <data bit_width="16"> 0.1 </data>
                                <data bit_width="32"> 0.1 </data>
                        </max>
                        <min>
                                <data bit_width="16"> 0.1 </data>
                                <data bit_width="32"> 0.1 </data>
                        </min>
                        <typ>
                                <priority name="area">
                                        <data bit_width="16"> 0.1 </data>
                                        <data bit_width="32"> 0.1 </data>
                                </priority>
                                <priority name="delay">
                                        <data bit_width="16"> 0.1 </data>
                                        <data bit_width="32"> 0.1 </data>
                                </priority>
                                <priority name="power">
                                        <data bit_width="16"> 0.1 </data>
                                        <data bit_width="32"> 0.1 </data>
                                </priority>
                        </typ>
              </parameters>

            </est_index>

            <est_index name="aspect_ratio">
              <!-- Dummy yet -->
            </est_index>

            <est_index name="height">
              <!-- Dummy yet -->
            </est_index>

            <est_index name="width">
              <!-- Dummy yet -->
            </est_index>
          </est_type>

          <est_type name="timing">
            <est_index name="delay">
              <unit> ns </unit>

              <parameters name="">
                <max>
                  <data bit_width="16"> 0.75 </data>
                  <data bit_width="32"> 0.75 </data>
                </max>
                <min>
                  <data bit_width="16"> 0.72 </data>
                  <data bit_width="32"> 0.72 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 0.75 </data>
                    <data bit_width="32"> 0.75 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 0.72 </data>
                    <data bit_width="32"> 0.72 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 0.75 </data>
                    <data bit_width="32"> 0.75 </data>
                  </priority>
                </typ>
              </parameters>

            </est_index>

            <est_index name="delay_fullpath">
            <!-- Dummy yet -->
            </est_index>
          </est_type>

          <est_type name="power">
            <est_index name="static_power">
              <unit> mW </unit>
              <parameters name="">
                 <max>
                  <data bit_width="16"> 8.7214 </data>
                  <data bit_width="32"> 17.2327 </data>
                </max>
                <min>
                  <data bit_width="16"> 8.5400 </data>
                  <data bit_width="32"> 17.0462 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 8.7033 </data>
                    <data bit_width="32"> 17.2202 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 8.7214 </data>
                    <data bit_width="32"> 17.2327 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 8.5400 </data>
                    <data bit_width="32"> 17.0462 </data>
                  </priority>
                </typ>
              </parameters>

            </est_index>
          </est_type>

          <est_type name="function_cycle">
            <!-- Dummy yet -->
          </est_type>

          <est_type name="function_power">
            <!-- Dummy yet -->
          </est_type>
        </library>
      </estimation_data>

      <estimation_method>
         
        <est_type name="shape">

          <est_index name="area">
		<parameters name="">
                        <max>
                                <data bit_width="16"> 0.1 </data>
                                <data bit_width="32"> 0.1 </data>
                        </max>
                        <min>
                                <data bit_width="16"> 0.1 </data>
                                <data bit_width="32"> 0.1 </data>
                        </min>
                        <typ>
                                <priority name="area">
                                        <data bit_width="16"> 0.1 </data>
                                        <data bit_width="32"> 0.1 </data>
                                </priority>
                                <priority name="delay">
                                        <data bit_width="16"> 0.1 </data>
                                        <data bit_width="32"> 0.1 </data>
                                </priority>
                                <priority name="power">
                                        <data bit_width="16"> 0.1 </data>
                                        <data bit_width="32"> 0.1 </data>
                                </priority>
                        </typ>
		</parameters>


          </est_index>

           <est_index name="aspect_ratio">

             <!-- Dummy yet -->

           </est_index>
                
           <est_index name="height">

             <!-- Dummy yet -->

           </est_index>
                
           <est_index name="width">

             <!-- Dummy yet -->

           </est_index>
                
        </est_type>

        <est_type name="timing">

          <est_index name="delay">
		<parameters name="">
                <max>
                  <data bit_width="16"> 0.75 </data>
                  <data bit_width="32"> 0.75 </data>
                </max>
                <min>
                  <data bit_width="16"> 0.72 </data>
                  <data bit_width="32"> 0.72 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 0.75 </data>
                    <data bit_width="32"> 0.75 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 0.72 </data>
                    <data bit_width="32"> 0.72 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 0.75 </data>
                    <data bit_width="32"> 0.75 </data>
                  </priority>
                </typ>
		</parameters>


          </est_index>

          <est_index name="delay_fullpath">

             <!-- Dummy yet -->

          </est_index>

        </est_type>

        <est_type name="power">

          <est_index name="static_power">

		<parameters name="">
                 <max>
                  <data bit_width="16"> 8.7214 </data>
                  <data bit_width="32"> 17.2327 </data>
                </max>
                <min>
                  <data bit_width="16"> 8.5400 </data>
                  <data bit_width="32"> 17.0462 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 8.7033 </data>
                    <data bit_width="32"> 17.2202 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 8.7214 </data>
                    <data bit_width="32"> 17.2327 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 8.5400 </data>
                    <data bit_width="32"> 17.0462 </data>
                  </priority>
                </typ>
		</parameters>


          </est_index>

        </est_type>

        <est_type name="function_cycle">

        </est_type>

        <est_type name="function_power">

        </est_type>

    
      </estimation_method>
    </estimation>

  </model>

  <model>
    <design_level> synthesis </design_level>
    <version> 1.0 </version>
    <author> <![CDATA[ asip03 ]]> </author>
    <affiliation> <![CDATA[ Uni Karlsruhe ]]> </affiliation>
    <model_info> <![CDATA[ - ]]> </model_info>

    <parameter>
      <parameter_value key="bit_width">
        <value> 16 </value>
        <value> 32 </value>
      </parameter_value>
      <parameter_value key="upper_limit">
        <value> 88 </value>
        <value> 65535 </value>
      </parameter_value>
    </parameter>

    <function_description>
      <script>
        <![CDATA[
#!/usr/bin/perl
# This script generates register function definition in behavior level
# parameter : bit_width upper_limit

if ($#ARGV != 1) {
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width upper_limit\n";
    exit (100);
}

$bit_width    = $ARGV[0];
$upper_limit  = $ARGV[1];
$msb = $bit_width - 1;

print <<FHM_DL_SATADDER;
/** satadder */
function satadder {
  input {
    bit [$msb:0] src0;
    bit [$msb:0] src1;
  }
  output {
    bit [$msb:0] dest;
  }
  control {
  }
  protocol {
  }
}
FHM_DL_SATADDER

exit (0);
        ]]>
      </script>
    </function_description>

    <function_conv>
      <script>
        <![CDATA[
#!/usr/bin/perl
# This script generates register function definition in behavior level
# parameter : bit_width upper_limit

if ($#ARGV != 1) {
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width upper_limit\n";
    exit (100);
}

$bit_width    = $ARGV[0];
$upper_limit  = $ARGV[1];
$msb = $bit_width - 1;

print <<FHM_DL_SATADDER;
/** satadder */
function satadder {
  input {
    bit [$msb:0] src0;
    bit [$msb:0] src1;
  }
  output {
    bit [$msb:0] dest;
  }
  control {
  }
  protocol {
  }
}
FHM_DL_SATADDER

exit (0);
        ]]>
      </script>
    </function_conv>

    <function_port>
      <script>
        <![CDATA[
#!/usr/bin/perl
# This script generates register port information in behavior level
# parameter : bit_width upper_limit

if ($#ARGV != 1) {
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width upper_limit\n";
    exit (100);
}

$bit_width    = $ARGV[0];
$upper_limit  = $ARGV[1];
$msb = $bit_width - 1;

print <<FHM_DL_PORTS;
src0 in  bit_vector $msb 0 data
src1 in  bit_vector $msb 0 data
dest out bit_vector $msb 0 data
FHM_DL_PORTS

exit (0);
        ]]>
      </script>
    </function_port>

    <design>
      <design_lang> vhdl </design_lang>

      <instance>
        <script>
          <![CDATA[
#!/usr/bin/perl
# This script generates register instance in behavior level
# parameter : instance_name bit_width upper_limit

if ($#ARGV != 2) {
  print "number of parameters is wrong.\n";
  print "usage : this_script instance_name bit_width upper_limit\n";
  exit (100);
}

$instance_name = $ARGV[0];
$bit_width    = $ARGV[1];
$upper_limit  = $ARGV[2];
$msb = $bit_width - 1;

$signals = <<END_SIGNALS;
-- Your signal declaration here
END_SIGNALS

$vhdl = <<END_VHDL;
-- Your vhdl code here
process (src0, src1)
    variable res : integer;
begin
    res := to_integer(signed(src0)) + to_integer(signed(src1));

    if (res < 0) then
        dest <= (others => '0');
    elsif (res > $upper_limit) then
        dest <= std_logic_vector(to_signed($upper_limit, dest'length));
    else
        dest <= std_logic_vector(to_signed(res, dest'length));
    end if;
end process;
END_VHDL


{
print <<FHM_DL_COMMENTS;
FHM_DL_COMMENTS
}



print <<FHM_DL_TOP_2;
--   int_port : internal port
--   ext_port : external port

-- Comment :

library IEEE;
  use IEEE.std_logic_1164.all;
  use IEEE.std_logic_unsigned.all;
  use IEEE.numeric_std.all;

entity $instance_name is
  port (
FHM_DL_TOP_2

    print <<FHM_DL_PORTS;
	src0 : in std_logic_vector($msb downto 0);
	src1 : in std_logic_vector($msb downto 0);
	dest : out std_logic_vector($msb downto 0)
        );
FHM_DL_PORTS

{
print <<FHM_DL_ARCH;
end $instance_name;

architecture logic of $instance_name is
$signals
begin
  $vhdl
end logic;

FHM_DL_ARCH
}

exit (0);
          ]]>
        </script>
      </instance>

      <entity>
        <script>
          <![CDATA[
#!/usr/bin/perl
# This script generates register instance in behavior level
# parameter : instance_name bit_width upper_limit

if ($#ARGV != 2) {
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name bit_width upper_limit\n";
    exit (100);
}

$instance_name = $ARGV[0];

$bit_width    = $ARGV[1];
$upper_limit  = $ARGV[2];
$msb = $bit_width - 1;

{
print <<FHM_DL_TOP;

entity $instance_name is
  port (
FHM_DL_TOP

}

    print <<FHM_DL_PORTS;
        );
FHM_DL_PORTS

{
print <<FHM_DL_BOTTOM;
end $instance_name;
FHM_DL_BOTTOM
}
exit (0);
          ]]>
        </script>
      </entity>

      <testvector>
        <testvector_script>
          <![CDATA[ ]]>
        </testvector_script>
      </testvector>

      <synthesis>
        <parameter></parameter>
        <synthesis_script>
          <script>
            <![CDATA[
#!/usr/bin/perl
# This script generates register synthesis script in behavior level
# parameter : instance_name priority bit_width upper_limit

if ($#ARGV != 3) {
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name priority bit_width upper_limit\n";
    exit (100);
}

$instance_name = $ARGV[0];
$priority      = $ARGV[1];
$bit_width     = $ARGV[2];


if ($priority eq "area"){
  $priority_const = "set_max_area 0";
}
elsif ($priority eq "performance"){
  $priority_const = "set_max_delay -from all_inputs() -to all_outputs() 0";
}
elsif ($priority eq "power"){
  $priority_const = "";
}
elsif ($priority eq "none"){
  $priority_const = "";
}
else {
    print "priority $priority is not supported.\n";
    exit(100);
}

{
print <<FHM_DL_END_OF_SCRIPT;
hdlin_auto_save_templates = TRUE

analyze -f vhdl $instance_name.vhd

elaborate $instance_name
uniquify

$priority_const

create_clock -period 10 -waveform{0 5} clock

compile

write -hierarchy -output $instance_name.db

report_area
report_timing

quit
FHM_DL_END_OF_SCRIPT
}
exit(0);
            ]]>
          </script>
        </synthesis_script>
      </synthesis>
    </design>

    <estimation>
      <estimation_data>
        <library name="OSAKA">

          <est_type name="shape">
            <est_index name="area">
              <unit> mm2 </unit>
              <translate>
                <translate_value key="gate"> 4201.68 </translate_value>
                <translate_value key="mm2">  1 </translate_value>
              </translate>

              <parameters name="">
                        <max>
                                <data bit_width="16"> 0.1 </data>
                                <data bit_width="32"> 0.1 </data>
                        </max>
                        <min>
                                <data bit_width="16"> 0.1 </data>
                                <data bit_width="32"> 0.1 </data>
                        </min>
                        <typ>
                                <priority name="area">
                                        <data bit_width="16"> 0.1 </data>
                                        <data bit_width="32"> 0.1 </data>
                                </priority>
                                <priority name="delay">
                                        <data bit_width="16"> 0.1 </data>
                                        <data bit_width="32"> 0.1 </data>
                                </priority>
                                <priority name="power">
                                        <data bit_width="16"> 0.1 </data>
                                        <data bit_width="32"> 0.1 </data>
                                </priority>
                        </typ>
              </parameters>

            </est_index>

            <est_index name="aspect_ratio">
              <!-- Dummy yet -->
            </est_index>

            <est_index name="height">
              <!-- Dummy yet -->
            </est_index>

            <est_index name="width">
              <!-- Dummy yet -->
            </est_index>
          </est_type>

          <est_type name="timing">
            <est_index name="delay">
              <unit> ns </unit>

              <parameters name="">
                <max>
                  <data bit_width="16"> 0.75 </data>
                  <data bit_width="32"> 0.75 </data>
                </max>
                <min>
                  <data bit_width="16"> 0.72 </data>
                  <data bit_width="32"> 0.72 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 0.75 </data>
                    <data bit_width="32"> 0.75 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 0.72 </data>
                    <data bit_width="32"> 0.72 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 0.75 </data>
                    <data bit_width="32"> 0.75 </data>
                  </priority>
                </typ>
              </parameters>

            </est_index>

            <est_index name="delay_fullpath">
            <!-- Dummy yet -->
            </est_index>
          </est_type>

          <est_type name="power">
            <est_index name="static_power">
              <unit> mW </unit>
              <parameters name="">
                 <max>
                  <data bit_width="16"> 8.7214 </data>
                  <data bit_width="32"> 17.2327 </data>
                </max>
                <min>
                  <data bit_width="16"> 8.5400 </data>
                  <data bit_width="32"> 17.0462 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 8.7033 </data>
                    <data bit_width="32"> 17.2202 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 8.7214 </data>
                    <data bit_width="32"> 17.2327 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 8.5400 </data>
                    <data bit_width="32"> 17.0462 </data>
                  </priority>
                </typ>
              </parameters>

            </est_index>
          </est_type>

          <est_type name="function_cycle">
            <!-- Dummy yet -->
          </est_type>

          <est_type name="function_power">
            <!-- Dummy yet -->
          </est_type>
        </library>
      </estimation_data>

      <estimation_method>
         
        <est_type name="shape">

          <est_index name="area">
		<parameters name="">
                        <max>
                                <data bit_width="16"> 0.1 </data>
                                <data bit_width="32"> 0.1 </data>
                        </max>
                        <min>
                                <data bit_width="16"> 0.1 </data>
                                <data bit_width="32"> 0.1 </data>
                        </min>
                        <typ>
                                <priority name="area">
                                        <data bit_width="16"> 0.1 </data>
                                        <data bit_width="32"> 0.1 </data>
                                </priority>
                                <priority name="delay">
                                        <data bit_width="16"> 0.1 </data>
                                        <data bit_width="32"> 0.1 </data>
                                </priority>
                                <priority name="power">
                                        <data bit_width="16"> 0.1 </data>
                                        <data bit_width="32"> 0.1 </data>
                                </priority>
                        </typ>
		</parameters>


          </est_index>

           <est_index name="aspect_ratio">

             <!-- Dummy yet -->

           </est_index>
                
           <est_index name="height">

             <!-- Dummy yet -->

           </est_index>
                
           <est_index name="width">

             <!-- Dummy yet -->

           </est_index>
                
        </est_type>

        <est_type name="timing">

          <est_index name="delay">
		<parameters name="">
                <max>
                  <data bit_width="16"> 0.75 </data>
                  <data bit_width="32"> 0.75 </data>
                </max>
                <min>
                  <data bit_width="16"> 0.72 </data>
                  <data bit_width="32"> 0.72 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 0.75 </data>
                    <data bit_width="32"> 0.75 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 0.72 </data>
                    <data bit_width="32"> 0.72 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 0.75 </data>
                    <data bit_width="32"> 0.75 </data>
                  </priority>
                </typ>
		</parameters>


          </est_index>

          <est_index name="delay_fullpath">

             <!-- Dummy yet -->

          </est_index>

        </est_type>

        <est_type name="power">

          <est_index name="static_power">

		<parameters name="">
                 <max>
                  <data bit_width="16"> 8.7214 </data>
                  <data bit_width="32"> 17.2327 </data>
                </max>
                <min>
                  <data bit_width="16"> 8.5400 </data>
                  <data bit_width="32"> 17.0462 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 8.7033 </data>
                    <data bit_width="32"> 17.2202 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 8.7214 </data>
                    <data bit_width="32"> 17.2327 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 8.5400 </data>
                    <data bit_width="32"> 17.0462 </data>
                  </priority>
                </typ>
		</parameters>


          </est_index>

        </est_type>

        <est_type name="function_cycle">

        </est_type>

        <est_type name="function_power">

        </est_type>

    
      </estimation_method>
    </estimation>

  </model>
</FHM>
