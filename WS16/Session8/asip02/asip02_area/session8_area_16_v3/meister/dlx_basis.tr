sw_storage{
sw_regfile{
GPR0{class{GPR}resource{GPR}number{0}width{32}usage{zero_reg}
location{original}binary{0000}},
GPR1{class{GPR}resource{GPR}number{1}width{32}usage{reg}
location{original}binary{0001}},
GPR2{class{GPR}resource{GPR}number{2}width{32}usage{reg}
location{original}binary{0010}},
GPR3{class{GPR}resource{GPR}number{3}width{32}usage{reg}
location{original}binary{0011}},
GPR4{class{GPR}resource{GPR}number{4}width{32}usage{reg}
location{original}binary{0100}},
GPR5{class{GPR}resource{GPR}number{5}width{32}usage{reg}
location{original}binary{0101}},
GPR6{class{GPR}resource{GPR}number{6}width{32}usage{reg}
location{original}binary{0110}},
GPR7{class{GPR}resource{GPR}number{7}width{32}usage{reg}
location{original}binary{0111}},
GPR8{class{GPR}resource{GPR}number{8}width{32}usage{reg}
location{original}binary{1000}},
GPR9{class{GPR}resource{GPR}number{9}width{32}usage{reg}
location{original}binary{1001}},
GPR10{class{GPR}resource{GPR}number{10}width{32}usage{reg}
location{original}binary{1010}},
GPR11{class{GPR}resource{GPR}number{11}width{32}usage{reg}
location{original}binary{1011}},
GPR12{class{GPR}resource{GPR}number{12}width{32}usage{return}
location{original}binary{1100}},
GPR13{class{GPR}resource{GPR}number{13}width{32}usage{sp}
location{original}binary{1101}},
GPR14{class{GPR}resource{GPR}number{14}width{32}usage{fp}
location{original}binary{1110}},
GPR15{class{GPR}resource{GPR}number{15}width{32}usage{link}
location{original}binary{1111}}
}
sw_reg{
PC{resource{PC}width{32}usage{pc}location{original}}
IR{resource{IR}width{32}usage{ireg}location{original}}
}
sw_i_memory{
IMEM{resource{IMAU}width{32}access{8}}
}
sw_d_memory{
DMEM{resource{DMAU}width{32}access{8}}
}
}

Instruction_type{
sub_field_name{
NO_VLIW{
width{"31","11"},
type{
"R_R"{
OP-code{name{"opecode"},width{"31","26"},
addr_mode{none,none,none,none}},
OP-code{binary{"0"},width{"25","25"},
addr_mode{none,none,none,none}},
Operand{name{"rs0"},width{"24","21"},
addr_mode{RDirect,rs0,Resource,GPR}},
OP-code{binary{"0"},width{"20","20"},
addr_mode{none,none,none,none}},
Operand{name{"rs1"},width{"19","16"},
addr_mode{RDirect,rs1,Resource,GPR}},
OP-code{binary{"0"},width{"15","15"},
addr_mode{none,none,none,none}},
Operand{name{"rd"},width{"14","11"},
addr_mode{RDirect,rd,Resource,GPR}},
OP-code{name{"func"},width{"10","0"},
addr_mode{none,none,none,none}}
},
"R_I"{
OP-code{name{"opecode"},width{"31","26"},
addr_mode{none,none,none,none}},
OP-code{binary{"0"},width{"25","25"},
addr_mode{none,none,none,none}},
Operand{name{"rs0"},width{"24","21"},
addr_mode{RDirect,rs0,Resource,GPR}},
OP-code{binary{"0"},width{"20","20"},
addr_mode{none,none,none,none}},
Operand{name{"rd"},width{"19","16"},
addr_mode{RDirect,rd,Resource,GPR}},
Operand{name{"const"},width{"15","0"},
addr_mode{Immediate_data,const,Immediate,none}}
},
"L_S"{
OP-code{name{"opecode"},width{"31","26"},
addr_mode{none,none,none,none}},
OP-code{binary{"0"},width{"25","25"},
addr_mode{none,none,none,none}},
Operand{name{"rs0"},width{"24","21"},
addr_mode{RIwDisp,addr,Resource,GPR}},
OP-code{binary{"0"},width{"20","20"},
addr_mode{none,none,none,none}},
Operand{name{"rd"},width{"19","16"},
addr_mode{RDirect,rd,Resource,GPR}},
Operand{name{"const"},width{"15","0"},
addr_mode{RIwDisp,addr,Displacement,none}}
},
"B"{
OP-code{name{"opecode"},width{"31","26"},
addr_mode{none,none,none,none}},
OP-code{binary{"0"},width{"25","25"},
addr_mode{none,none,none,none}},
Operand{name{"rs0"},width{"24","21"},
addr_mode{RDirect,rs0,Resource,GPR}},
OP-code{binary{"00000"},width{"20","16"},
addr_mode{none,none,none,none}},
Operand{name{"const"},width{"15","0"},
addr_mode{PCrelative_address,const,Symbol,none}}
},
"J"{
OP-code{name{"opecode"},width{"31","26"},
addr_mode{none,none,none,none}},
Operand{name{"const"},width{"25","0"},
addr_mode{PCrelative_address,const,Symbol,none}}
},
"JR"{
OP-code{binary{"000000"},width{"31","26"},
addr_mode{none,none,none,none}},
OP-code{binary{"0"},width{"25","25"},
addr_mode{none,none,none,none}},
Operand{name{"rs0"},width{"24","21"},
addr_mode{RDirect,rs0,Resource,GPR}},
OP-code{binary{"0000000000"},width{"20","11"},
addr_mode{none,none,none,none}},
OP-code{name{"func"},width{"10","0"},
addr_mode{none,none,none,none}}
},
"LHI"{
OP-code{name{"opecode"},width{"31","26"},
addr_mode{none,none,none,none}},
OP-code{binary{"00000"},width{"25","21"},
addr_mode{none,none,none,none}},
OP-code{binary{"0"},width{"20","20"},
addr_mode{none,none,none,none}},
Operand{name{"rd"},width{"19","16"},
addr_mode{RDirect,rd,Resource,GPR}},
Operand{name{"const"},width{"15","0"},
addr_mode{Immediate_data,const,Immediate,none}}
}
}
}
}
}

Instruction{
NO_VLIW{
"add"{
type{"R_R"},
OP-code{binary{"000000"},width{"31","26"}},
OP-code{binary{"0"},width{"25","25"}},
Operand{name{"rs0"},width{"24","21"}},
OP-code{binary{"0"},width{"20","20"}},
Operand{name{"rs1"},width{"19","16"}},
OP-code{binary{"0"},width{"15","15"}},
Operand{name{"rd"},width{"14","11"}},
OP-code{binary{"00000100000"},width{"10","0"}}
format{"add" rd "," rs0 "," rs1}
},
"addi"{
type{"R_I"},
OP-code{binary{"001000"},width{"31","26"}},
OP-code{binary{"0"},width{"25","25"}},
Operand{name{"rs0"},width{"24","21"}},
OP-code{binary{"0"},width{"20","20"}},
Operand{name{"rd"},width{"19","16"}},
Operand{name{"const"},width{"15","0"}}
format{"addi" rd "," rs0 "," const}
},
"addui"{
type{"R_I"},
OP-code{binary{"001001"},width{"31","26"}},
OP-code{binary{"0"},width{"25","25"}},
Operand{name{"rs0"},width{"24","21"}},
OP-code{binary{"0"},width{"20","20"}},
Operand{name{"rd"},width{"19","16"}},
Operand{name{"const"},width{"15","0"}}
format{"addui" rd "," rs0 "," const}
},
"sub"{
type{"R_R"},
OP-code{binary{"000000"},width{"31","26"}},
OP-code{binary{"0"},width{"25","25"}},
Operand{name{"rs0"},width{"24","21"}},
OP-code{binary{"0"},width{"20","20"}},
Operand{name{"rs1"},width{"19","16"}},
OP-code{binary{"0"},width{"15","15"}},
Operand{name{"rd"},width{"14","11"}},
OP-code{binary{"00000100010"},width{"10","0"}}
format{"sub" rd "," rs0 "," rs1}
},
"subu"{
type{"R_R"},
OP-code{binary{"000000"},width{"31","26"}},
OP-code{binary{"0"},width{"25","25"}},
Operand{name{"rs0"},width{"24","21"}},
OP-code{binary{"0"},width{"20","20"}},
Operand{name{"rs1"},width{"19","16"}},
OP-code{binary{"0"},width{"15","15"}},
Operand{name{"rd"},width{"14","11"}},
OP-code{binary{"00000100011"},width{"10","0"}}
format{"subu" rd "," rs0 "," rs1}
},
"subi"{
type{"R_I"},
OP-code{binary{"001010"},width{"31","26"}},
OP-code{binary{"0"},width{"25","25"}},
Operand{name{"rs0"},width{"24","21"}},
OP-code{binary{"0"},width{"20","20"}},
Operand{name{"rd"},width{"19","16"}},
Operand{name{"const"},width{"15","0"}}
format{"subi" rd "," rs0 "," const}
},
"subui"{
type{"R_I"},
OP-code{binary{"001011"},width{"31","26"}},
OP-code{binary{"0"},width{"25","25"}},
Operand{name{"rs0"},width{"24","21"}},
OP-code{binary{"0"},width{"20","20"}},
Operand{name{"rd"},width{"19","16"}},
Operand{name{"const"},width{"15","0"}}
format{"subui" rd "," rs0 "," const}
},
"and"{
type{"R_R"},
OP-code{binary{"000000"},width{"31","26"}},
OP-code{binary{"0"},width{"25","25"}},
Operand{name{"rs0"},width{"24","21"}},
OP-code{binary{"0"},width{"20","20"}},
Operand{name{"rs1"},width{"19","16"}},
OP-code{binary{"0"},width{"15","15"}},
Operand{name{"rd"},width{"14","11"}},
OP-code{binary{"00000100100"},width{"10","0"}}
format{"and" rd "," rs0 "," rs1}
},
"andi"{
type{"R_I"},
OP-code{binary{"001100"},width{"31","26"}},
OP-code{binary{"0"},width{"25","25"}},
Operand{name{"rs0"},width{"24","21"}},
OP-code{binary{"0"},width{"20","20"}},
Operand{name{"rd"},width{"19","16"}},
Operand{name{"const"},width{"15","0"}}
format{"andi" rd "," rs0 "," const}
},
"or"{
type{"R_R"},
OP-code{binary{"000000"},width{"31","26"}},
OP-code{binary{"0"},width{"25","25"}},
Operand{name{"rs0"},width{"24","21"}},
OP-code{binary{"0"},width{"20","20"}},
Operand{name{"rs1"},width{"19","16"}},
OP-code{binary{"0"},width{"15","15"}},
Operand{name{"rd"},width{"14","11"}},
OP-code{binary{"00000100101"},width{"10","0"}}
format{"or" rd "," rs0 "," rs1}
},
"ori"{
type{"R_I"},
OP-code{binary{"001101"},width{"31","26"}},
OP-code{binary{"0"},width{"25","25"}},
Operand{name{"rs0"},width{"24","21"}},
OP-code{binary{"0"},width{"20","20"}},
Operand{name{"rd"},width{"19","16"}},
Operand{name{"const"},width{"15","0"}}
format{"ori" rd "," rs0 "," const}
},
"xor"{
type{"R_R"},
OP-code{binary{"000000"},width{"31","26"}},
OP-code{binary{"0"},width{"25","25"}},
Operand{name{"rs0"},width{"24","21"}},
OP-code{binary{"0"},width{"20","20"}},
Operand{name{"rs1"},width{"19","16"}},
OP-code{binary{"0"},width{"15","15"}},
Operand{name{"rd"},width{"14","11"}},
OP-code{binary{"00000100110"},width{"10","0"}}
format{"xor" rd "," rs0 "," rs1}
},
"sll"{
type{"R_R"},
OP-code{binary{"000000"},width{"31","26"}},
OP-code{binary{"0"},width{"25","25"}},
Operand{name{"rs0"},width{"24","21"}},
OP-code{binary{"0"},width{"20","20"}},
Operand{name{"rs1"},width{"19","16"}},
OP-code{binary{"0"},width{"15","15"}},
Operand{name{"rd"},width{"14","11"}},
OP-code{binary{"00000000000"},width{"10","0"}}
format{"sll" rd "," rs0 "," rs1}
},
"sra"{
type{"R_R"},
OP-code{binary{"000000"},width{"31","26"}},
OP-code{binary{"0"},width{"25","25"}},
Operand{name{"rs0"},width{"24","21"}},
OP-code{binary{"0"},width{"20","20"}},
Operand{name{"rs1"},width{"19","16"}},
OP-code{binary{"0"},width{"15","15"}},
Operand{name{"rd"},width{"14","11"}},
OP-code{binary{"00000000011"},width{"10","0"}}
format{"sra" rd "," rs0 "," rs1}
},
"slli"{
type{"R_I"},
OP-code{binary{"010000"},width{"31","26"}},
OP-code{binary{"0"},width{"25","25"}},
Operand{name{"rs0"},width{"24","21"}},
OP-code{binary{"0"},width{"20","20"}},
Operand{name{"rd"},width{"19","16"}},
Operand{name{"const"},width{"15","0"}}
format{"slli" rd "," rs0 "," const}
},
"srai"{
type{"R_I"},
OP-code{binary{"010010"},width{"31","26"}},
OP-code{binary{"0"},width{"25","25"}},
Operand{name{"rs0"},width{"24","21"}},
OP-code{binary{"0"},width{"20","20"}},
Operand{name{"rd"},width{"19","16"}},
Operand{name{"const"},width{"15","0"}}
format{"srai" rd "," rs0 "," const}
},
"slt"{
type{"R_R"},
OP-code{binary{"000000"},width{"31","26"}},
OP-code{binary{"0"},width{"25","25"}},
Operand{name{"rs0"},width{"24","21"}},
OP-code{binary{"0"},width{"20","20"}},
Operand{name{"rs1"},width{"19","16"}},
OP-code{binary{"0"},width{"15","15"}},
Operand{name{"rd"},width{"14","11"}},
OP-code{binary{"00000101010"},width{"10","0"}}
format{"slt" rd "," rs0 "," rs1}
},
"sgt"{
type{"R_R"},
OP-code{binary{"000000"},width{"31","26"}},
OP-code{binary{"0"},width{"25","25"}},
Operand{name{"rs0"},width{"24","21"}},
OP-code{binary{"0"},width{"20","20"}},
Operand{name{"rs1"},width{"19","16"}},
OP-code{binary{"0"},width{"15","15"}},
Operand{name{"rd"},width{"14","11"}},
OP-code{binary{"00000101011"},width{"10","0"}}
format{"sgt" rd "," rs0 "," rs1}
},
"seq"{
type{"R_R"},
OP-code{binary{"000000"},width{"31","26"}},
OP-code{binary{"0"},width{"25","25"}},
Operand{name{"rs0"},width{"24","21"}},
OP-code{binary{"0"},width{"20","20"}},
Operand{name{"rs1"},width{"19","16"}},
OP-code{binary{"0"},width{"15","15"}},
Operand{name{"rd"},width{"14","11"}},
OP-code{binary{"00000101110"},width{"10","0"}}
format{"seq" rd "," rs0 "," rs1}
},
"sne"{
type{"R_R"},
OP-code{binary{"000000"},width{"31","26"}},
OP-code{binary{"0"},width{"25","25"}},
Operand{name{"rs0"},width{"24","21"}},
OP-code{binary{"0"},width{"20","20"}},
Operand{name{"rs1"},width{"19","16"}},
OP-code{binary{"0"},width{"15","15"}},
Operand{name{"rd"},width{"14","11"}},
OP-code{binary{"00000101111"},width{"10","0"}}
format{"sne" rd "," rs0 "," rs1}
},
"lhi"{
type{"LHI"},
OP-code{binary{"001111"},width{"31","26"}},
OP-code{binary{"00000"},width{"25","21"}},
OP-code{binary{"0"},width{"20","20"}},
Operand{name{"rd"},width{"19","16"}},
Operand{name{"const"},width{"15","0"}}
format{"lhi" rd "," const}
},
"lw"{
type{"L_S"},
OP-code{binary{"100011"},width{"31","26"}},
OP-code{binary{"0"},width{"25","25"}},
Operand{name{"rs0"},width{"24","21"}},
OP-code{binary{"0"},width{"20","20"}},
Operand{name{"rd"},width{"19","16"}},
Operand{name{"const"},width{"15","0"}}
format{"lw" rd "," addr}
},
"lbu"{
type{"L_S"},
OP-code{binary{"100100"},width{"31","26"}},
OP-code{binary{"0"},width{"25","25"}},
Operand{name{"rs0"},width{"24","21"}},
OP-code{binary{"0"},width{"20","20"}},
Operand{name{"rd"},width{"19","16"}},
Operand{name{"const"},width{"15","0"}}
format{"lbu" rd "," addr}
},
"sw"{
type{"L_S"},
OP-code{binary{"101011"},width{"31","26"}},
OP-code{binary{"0"},width{"25","25"}},
Operand{name{"rs0"},width{"24","21"}},
OP-code{binary{"0"},width{"20","20"}},
Operand{name{"rd"},width{"19","16"}},
Operand{name{"const"},width{"15","0"}}
format{"sw" addr "," rd}
},
"bnez"{
type{"B"},
OP-code{binary{"000101"},width{"31","26"}},
OP-code{binary{"0"},width{"25","25"}},
Operand{name{"rs0"},width{"24","21"}},
OP-code{binary{"00000"},width{"20","16"}},
Operand{name{"const"},width{"15","0"}}
format{"bnez" rs0 "," const}
},
"j"{
type{"J"},
OP-code{binary{"000010"},width{"31","26"}},
Operand{name{"const"},width{"25","0"}}
format{"j" const}
},
"jal"{
type{"J"},
OP-code{binary{"000011"},width{"31","26"}},
Operand{name{"const"},width{"25","0"}}
format{"jal" const}
},
"jr"{
type{"JR"},
OP-code{binary{"000000"},width{"31","26"}},
OP-code{binary{"0"},width{"25","25"}},
Operand{name{"rs0"},width{"24","21"}},
OP-code{binary{"0000000000"},width{"20","11"}},
OP-code{binary{"00000001000"},width{"10","0"}}
format{"jr" rs0}
}
}
}

C_data_type{
char{"8","8"}
short{"16","16"}
int{"32","32"}
long{"32","32"}
float{"32","32"}
double{"64","64"}
pointer{"32","32"}
struct{"8","none"}
stack{"32","none"}
data{"8","none"}
}

C_struct_dec{

}

macro_data_type{
Int7to0{sign{su}type{char}},
SInt7to0{sign{s}type{char}},
UInt7to0{sign{u}type{char}},
Int15to0{sign{su}type{char,short,short2}},
SInt15to0{sign{s}type{char,short,short2}},
UInt15to0{sign{u}type{char,short,short2}},
Int31to0{sign{su}type{char,short,short2,long,long2}},
SInt31to0{sign{s}type{char,short,short2,long,long2}},
UInt31to0{sign{u}type{char,short,short2,long,long2}}
}

C_ckf_prototype{

}

Instruction_behavior{
"add"{
operand{
rd{usage{reg}register_class{GPR}data_type{SInt31to0}},
rs0{usage{reg}register_class{GPR}data_type{SInt31to0}},
rs1{usage{reg}register_class{GPR}data_type{SInt31to0}}
}
behavior{
rd = rs0 + rs1;
}
},
"addi"{
operand{
rs0{usage{reg}register_class{GPR}data_type{SInt31to0}},
const{usage{Immediate}register_class{none}data_type{SInt15to0}},
rd{usage{reg}register_class{GPR}data_type{SInt31to0}}
}
behavior{
rd = rs0 + const;
}
},
"addui"{
operand{
rs0{usage{reg}register_class{GPR}data_type{UInt31to0}},
const{usage{Immediate}register_class{none}data_type{UInt15to0}},
rd{usage{reg}register_class{GPR}data_type{UInt31to0}}
}
behavior{
rd = rs0 + const;
}
},
"sub"{
operand{
rd{usage{reg}register_class{GPR}data_type{SInt31to0}},
rs0{usage{reg}register_class{GPR}data_type{SInt31to0}},
rs1{usage{reg}register_class{GPR}data_type{SInt31to0}}
}
behavior{
rd = rs0 - rs1;
}
},
"subu"{
operand{
rd{usage{reg}register_class{GPR}data_type{UInt31to0}},
rs0{usage{reg}register_class{GPR}data_type{UInt31to0}},
rs1{usage{reg}register_class{GPR}data_type{UInt31to0}}
}
behavior{
rd = rs0 - rs1;
}
},
"subi"{
operand{
rs0{usage{reg}register_class{GPR}data_type{SInt31to0}},
const{usage{Immediate}register_class{none}data_type{SInt15to0}},
rd{usage{reg}register_class{GPR}data_type{SInt31to0}}
}
behavior{
rd = rs0 - const;
}
},
"subui"{
operand{
rs0{usage{reg}register_class{GPR}data_type{UInt31to0}},
const{usage{Immediate}register_class{none}data_type{UInt15to0}},
rd{usage{reg}register_class{GPR}data_type{UInt31to0}}
}
behavior{
rd = rs0 - const;
}
},
"and"{
operand{
rd{usage{reg}register_class{GPR}data_type{Int31to0}},
rs0{usage{reg}register_class{GPR}data_type{Int31to0}},
rs1{usage{reg}register_class{GPR}data_type{Int31to0}}
}
behavior{
rd = rs0 & rs1;
}
},
"andi"{
operand{
rs0{usage{reg}register_class{GPR}data_type{Int31to0}},
const{usage{Immediate}register_class{none}data_type{UInt15to0}},
rd{usage{reg}register_class{GPR}data_type{Int31to0}}
}
behavior{
rd = rs0 & const;
}
},
"or"{
operand{
rd{usage{reg}register_class{GPR}data_type{Int31to0}},
rs0{usage{reg}register_class{GPR}data_type{Int31to0}},
rs1{usage{reg}register_class{GPR}data_type{Int31to0}}
}
behavior{
rd = rs0 | rs1;
}
},
"ori"{
operand{
rs0{usage{reg}register_class{GPR}data_type{Int31to0}},
const{usage{Immediate}register_class{none}data_type{UInt15to0}},
rd{usage{reg}register_class{GPR}data_type{Int31to0}}
}
behavior{
rd = rs0 | const;
}
},
"xor"{
operand{
rd{usage{reg}register_class{GPR}data_type{Int31to0}},
rs0{usage{reg}register_class{GPR}data_type{Int31to0}},
rs1{usage{reg}register_class{GPR}data_type{Int31to0}}
}
behavior{
rd = rs0 ^ rs1;
}
},
"sll"{
operand{
rd{usage{reg}register_class{GPR}data_type{Int31to0}},
rs0{usage{reg}register_class{GPR}data_type{Int31to0}},
rs1{usage{reg}register_class{GPR}data_type{Int31to0}}
}
behavior{
rd = rs0 << rs1;
}
},
"sra"{
operand{
rd{usage{reg}register_class{GPR}data_type{SInt31to0}},
rs0{usage{reg}register_class{GPR}data_type{SInt31to0}},
rs1{usage{reg}register_class{GPR}data_type{SInt31to0}}
}
behavior{
rd = rs0 >> rs1;
}
},
"slli"{
operand{
rs0{usage{reg}register_class{GPR}data_type{Int31to0}},
const{usage{Immediate}register_class{none}data_type{UInt15to0}},
rd{usage{reg}register_class{GPR}data_type{Int31to0}}
}
behavior{
rd = rs0 << const;
}
},
"srai"{
operand{
rs0{usage{reg}register_class{GPR}data_type{SInt31to0}},
const{usage{Immediate}register_class{none}data_type{UInt15to0}},
rd{usage{reg}register_class{GPR}data_type{SInt31to0}}
}
behavior{
rd = rs0 >> const;
}
},
"slt"{
operand{
rd{usage{reg}register_class{GPR}data_type{SInt31to0}},
rs0{usage{reg}register_class{GPR}data_type{SInt31to0}},
rs1{usage{reg}register_class{GPR}data_type{SInt31to0}}
}
behavior{
rd = rs0 < rs1;
}
},
"sgt"{
operand{
rd{usage{reg}register_class{GPR}data_type{SInt31to0}},
rs0{usage{reg}register_class{GPR}data_type{SInt31to0}},
rs1{usage{reg}register_class{GPR}data_type{SInt31to0}}
}
behavior{
rd = rs0 > rs1;
}
},
"seq"{
operand{
rd{usage{reg}register_class{GPR}data_type{Int31to0}},
rs0{usage{reg}register_class{GPR}data_type{Int31to0}},
rs1{usage{reg}register_class{GPR}data_type{Int31to0}}
}
behavior{
rd = rs0 == rs1;
}
},
"sne"{
operand{
rd{usage{reg}register_class{GPR}data_type{SInt31to0}},
rs0{usage{reg}register_class{GPR}data_type{SInt31to0}},
rs1{usage{reg}register_class{GPR}data_type{SInt31to0}}
}
behavior{
rd = rs0 != rs1;
}
},
"lhi"{
operand{
const{usage{Immediate}register_class{Immediate}data_type{UInt15to0}},
rd{usage{reg}register_class{GPR}data_type{Int31to0}}
}
behavior{
rd = const << 16;
}
},
"lw"{
operand{
addr{usage{d_memory}register_class{[GPR,disp]:DMEM}data_type{Int31to0}},
rd{usage{reg}register_class{GPR}data_type{Int31to0}}
}
behavior{
rd = *addr;
}
},
"lbu"{
operand{
addr{usage{d_memory}register_class{[GPR,disp]:DMEM}data_type{UInt7to0}},
rd{usage{reg}register_class{GPR}data_type{UInt7to0}}
}
behavior{
rd = *addr;
}
},
"sw"{
operand{
rd{usage{reg}register_class{GPR}data_type{Int31to0}},
addr{usage{d_memory}register_class{[GPR,disp]:DMEM}data_type{Int31to0}}
}
behavior{
*addr = rd;
}
},
"bnez"{
operand{
rs0{usage{reg}register_class{GPR}data_type{Int31to0}},
const{usage{label}register_class{none}data_type{SInt15to0}},
PC{usage{pc}register_class{PC}data_type{SInt31to0}}
}
behavior{
if (rs0 != 0) {
  PC = PC + const;
}
}
},
"j"{
operand{
const{usage{label}register_class{none}data_type{label}},
PC{usage{pc}register_class{PC}data_type{any}}
}
behavior{
if ( always ) {
  PC = const;
}
}
},
"jal"{
operand{
const{usage{label}register_class{none}data_type{label}},
PC{usage{pc}register_class{PC}data_type{any}},
LINK{usage{link}register_class{GPR15}data_type{any}}
}
behavior{
if ( always ) {
  LINK = Next(PC);
  PC = const;
}
}
},
"jr"{
operand{
rs0{usage{reg}register_class{GPR}data_type{any}},
PC{usage{pc}register_class{PC}data_type{any}}
}
behavior{
if ( always) {
  PC = rs0;
}
}
}
}
