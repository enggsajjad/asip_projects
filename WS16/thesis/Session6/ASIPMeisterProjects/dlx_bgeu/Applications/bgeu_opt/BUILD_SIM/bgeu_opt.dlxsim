	.section	.text
	.section	.text
	.addressing	Word
	
	xor	%r30, %r30, %r30
	xor	%r29, %r29, %r29
	xor	%r28, %r28, %r28
	nop
	lhi	%r30, $(0xFFFFC/0x10000)
	lhi	%r29, $(0xFFFFC/0x10000)
	nop
	nop
	ori	%r30, %r30, $(0xFFFFC%0x10000)
	ori	%r29, %r29, $(0xFFFFC%0x10000)
	nop
	nop
	nop
	sw	-4(%r29), %r30
	sw	-8(%r29), %r31
	addi	%r29, %r30, $-8
	nop
	nop
	nop
	jal	main	
	nop
	nop
	nop
	nop
	nop
	sw	0(%r29), %r1
	jal	exit
	nop
	nop

main:

	; Call BubbleSort
	subi	%r29, %r29, $8		; create place for the parameters
	nop
	nop
	nop
	sw	0(%r29), %r0		; "const unsigned int startIndex"
	addi	%r1, %r0, $19
	nop
	nop
	nop
	sw	4(%r29), %r1		; "const unsigned int endIndex"
	jal	_bubbleSort
	nop
	addi	%r29, %r29, $8

	nop
	nop
	nop
	lw	%r30, 0(%r29)		; Restore frame pointer
	lw	%r31, 4(%r29)		; Restore return address
	lw	%r1,  8(%r29)		; Restore r1
	add	%r29, %r0, %r30		; Restore stack pointer

	; HALT
	jal	_exit
	nop


_bubbleSort:
	add	%r30, %r0, %r29		; Establish new frame pointer 
	subi	%r29, %r29, $(8 + 10*4)	; Adjust Stack Pointer; 8 for oldFP+RET and x*4 for saved Registers
	nop
	nop
	nop
	sw	0(%r29), %r30		; Save the frame pointer 
	sw	4(%r29), %r31		; Save the return address 

	; Save Registers 
	sw	 8(%r29), %r1		; r1 is used for comparing-results and for temporary stuff.
	sw	12(%r29), %r2		; r2 is the parameter value "startIndex".
	sw	16(%r29), %r3		; r3 is the parameter value "endIndex".
	sw	20(%r29), %r4		; r4 is the loop-variable "i".
	sw	24(%r29), %r5		; r5 is the loop-variable "j".
	sw	28(%r29), %r6		; r6 is not used.
	sw	32(%r29), %r7		; r7 is the variable "ptr"
	sw	36(%r29), %r8		; r8 is "value".
	sw	40(%r29), %r9		; r9 is "value_next".
	sw	44(%r29), %r10		; r10 is the start address of 'array'.

	nop
	lw	%r2, 0(%r30)
	lw	%r3, 4(%r30)

	lhi	%r10, $(_array/65536)&0xffff
	nop
	nop
	nop
	addui	%r10, %r10, $(_array&0xffff)

    ; Start BubbleSort (2387 cycles)

    subu    %r4, %r3, %r2               ; i = endIndex - startIndex;
    bgeu    %r2, %r3, outer_loop_end    ; if(startIndex <= endIndex) return;
    addui   %r1, %r0, $2
    addu    %r7, %r0, %r10              ; ptr = array;

outer_loop_begin:                       ; while(i != 0) {
    lw      %r8, 0(%r10)                ;   value = *ptr;
    lw      %r9, 4(%r10)                ;   value_next = *(ptr+1);
    beqz    %r4, outer_loop_end
    addu    %r5, %r0, %r4               ;   j = i;
    subui   %r4, %r4, $1                ;   i--;

inner_loop_begin:                       ;   do {
    bgeu    %r8, %r9, swap              ;     if(value < value_next) {
    lw      %r9, 8(%r7)                 ;       value_next = *(ptr+2);  // Always performed.
    addu    %r8, %r0, %r9      ;r9 OLD  ;       value = value_next;
    j endif
swap:                                   ;     } else {
    addui   %r7, %r7, $4                ;       ptr++;                  // Always performed.
    sw      0(%r7), %r9        ;r7,r9 OLD       *ptr = value_next;
    sw      4(%r7), %r8        ;r7 OLD  ;       *(ptr+1) = value;
endif:                                  ;     }

    bgeu    %r5, %r1, inner_loop_begin  ;   } while(j >= 2);
    subui   %r5, %r5, $1                ;       j--;                    // Always performed.

    j       outer_loop_begin            ; }
    addu    %r7, %r0, %r10              ; ptr = array;                  // Always performed.

outer_loop_end:

    ; End BubbleSort

	lw	%r30, 0(%r29)		; Restore frame pointer
	lw	%r31, 4(%r29)		; Restore return address

	; Restore the saved registers
	lw	%r1, 8(%r29)
	lw	%r2, 12(%r29)
	lw	%r3, 16(%r29)
	lw	%r4, 20(%r29)
	lw	%r5, 24(%r29)
	lw	%r6, 28(%r29)
	lw	%r7, 32(%r29)
	lw	%r8, 36(%r29)
	lw	%r9, 40(%r29)
	lw	%r10,48(%r29)

	add	%r29, %r0, %r30		; Restore stack pointer

	; Return
	jr	%r31
	nop


_exit:	nop
	nop


	.section	.text
	.addressing	Word
	NOP
exit:
	NOP
	NOP
	trap	#0	; HALT


	.addressing	Word
	.section	.data
_array:
	.data.32	45
	.data.32	75
	.data.32	342
	.data.32	54
	.data.32	7
	.data.32	86
	.data.32	92
	.data.32	235
	.data.32	4
	.data.32	42
	.data.32	99
	.data.32	78
	.data.32	63
	.data.32	352
	.data.32	21
	.data.32	634
	.data.32	6
	.data.32	77
	.data.32	346
	.data.32	23

