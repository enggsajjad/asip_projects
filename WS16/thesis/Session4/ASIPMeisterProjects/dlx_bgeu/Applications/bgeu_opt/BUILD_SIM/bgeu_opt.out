****** Source Program List ******
LineNo	LC	Code		Source Program 
1				;.addressing	Word
2				.section	.text
3				.addressing	Word
4				.section	.text
5				.addressing	Word
6				;.addressing	Word
7			
8	0000	03def026		xor	%r30, %r30, %r30
9	0001	03bde826		xor	%r29, %r29, %r29
10	0002	039ce026		xor	%r28, %r28, %r28
11	0003	00000000		nop
12	0004	3c1e000f		lhi	%r30, $(0xFFFFC/0x10000)
13	0005	3c1d000f		lhi	%r29, $(0xFFFFC/0x10000)
14	0006	00000000		nop
15	0007	00000000		nop
16	0008	37defffc		ori	%r30, %r30, $(0xFFFFC%0x10000)
17	0009	37bdfffc		ori	%r29, %r29, $(0xFFFFC%0x10000)
18	000a	00000000		nop
19	000b	00000000		nop
20	000c	00000000		nop
21	000d	afbefffc		sw	-4(%r29), %r30
22	000e	afbffff8		sw	-8(%r29), %r31
23	000f	23ddfff8		addi	%r29, %r30, $-8
24	0010	00000000		nop
25	0011	00000000		nop
26	0012	00000000		nop
27	0013	0c00000a		jal	main	
28	0014	00000000		nop
29	0015	00000000		nop
30	0016	00000000		nop
31	0017	00000000		nop
32	0018	00000000		nop
33	0019	afa10000		sw	0(%r29), %r1
34	001a	0c000059		jal	exit
35	001b	00000000		nop
36	001c	00000000		nop
37			
38			main:
39			
40				; Call BubbleSort
41	001d	2bbd0008		subi	%r29, %r29, $8			; create place for the parameters
42	001e	00000000		nop
43	001f	00000000		nop
44	0020	00000000		nop
45	0021	afa00000		sw	0(%r29), %r0			; "const unsigned int startIndex"
46	0022	20010013		addi	%r1, %r0, $19
47	0023	00000000		nop
48	0024	00000000		nop
49	0025	00000000		nop
50	0026	afa10004		sw	4(%r29), %r1			; "const unsigned int endIndex"
51	0027	0c00000c		jal	_bubbleSort
52	0028	00000000		nop
53	0029	23bd0008		addi	%r29, %r29, $8
54			
55	002a	00000000		nop
56	002b	00000000		nop
57	002c	00000000		nop
58	002d	8fbe0000		lw	%r30, 0(%r29)			; Restore frame pointer
59	002e	8fbf0004		lw	%r31, 4(%r29)			; Restore return address
60	002f	8fa10008		lw	%r1,  8(%r29)			; Restore r1
61	0030	001ee820		add	%r29, %r0, %r30			; Restore stack pointer
62			
63				; HALT
64	0031	0c00003f		jal	_exit
65	0032	00000000		nop
66			
67			
68			_bubbleSort:
69	0033	001df020		add	%r30, %r0, %r29			; Establish new frame pointer 
70	0034	2bbd0030		subi	%r29, %r29, $(8 + 10*4)		; Adjust Stack Pointer; 8 for oldFP+RET and x*4 for saved Registers
71	0035	00000000		nop
72	0036	00000000		nop
73	0037	00000000		nop
74	0038	afbe0000		sw	0(%r29), %r30			; Save the frame pointer 
75	0039	afbf0004		sw	4(%r29), %r31			; Save the return address 
76			
77				; Save Registers 
78	003a	afa10008		sw	8(%r29), %r1			; r1 is used for comparing-results and for temporary stuff.
79	003b	afa2000c		sw	12(%r29), %r2			; r2 is the parameter value "startIndex".
80	003c	afa30010		sw	16(%r29), %r3			; r3 is the parameter value "endIndex".
81	003d	afa40014		sw	20(%r29), %r4			; r4 is the loop-variable "i".
82	003e	afa50018		sw	24(%r29), %r5			; r5 is the loop-variable "j".
83	003f	afa6001c		sw	28(%r29), %r6			; r6 is not used.
84	0040	afa70020		sw	32(%r29), %r7			; r7 is the variable "ptr"
85	0041	afa80024		sw	36(%r29), %r8			; r8 is "value".
86	0042	afa90028		sw	40(%r29), %r9			; r9 is "value_next".
87	0043	afaa002c		sw	44(%r29), %r10			; r10 is the start address of 'array'.
88			
89	0044	00000000		nop
90	0045	8fc20000		lw	%r2, 0(%r30)
91	0046	8fc30004		lw	%r3, 4(%r30)
92			
93	0047	3c0a0000		lhi	%r10, $(_array/65536)&0xffff
94	0048	00000000		nop
95	0049	00000000		nop
96	004a	00000000		nop
97	004b	254a0000		addui	%r10, %r10, $(_array&0xffff)
98			
99				; Start BubbleSort (2387 cycles)
100			
101	004c	00622023		subu	%r4, %r3, %r2               	; i = endIndex - startIndex;
102	004d	b0430013		bgeu	%r2, %r3, outer_loop_end    	; if(startIndex <= endIndex) return;
103	004e	24010002		addui	%r1, %r0, $2
104	004f	000a3821		addu	%r7, %r0, %r10              	; ptr = array;
105			
106			outer_loop_begin:	; while(i != 0) {
107	0050	8d480000		lw	%r8, 0(%r10)                	;   value = *ptr;
108	0051	8d490004		lw	%r9, 4(%r10)                	;   value_next = *(ptr+1);
109	0052	1080000e		beqz	%r4, outer_loop_end
110	0053	00042821		addu	%r5, %r0, %r4               	;   j = i;
111	0054	2c840001		subui	%r4, %r4, $1                	;   i--;
112			
113			inner_loop_begin:	;   do {
114	0055	b1090004		bgeu	%r8, %r9, swap              	;     if(value < value_next) {
115	0056	8ce90008		lw	%r9, 8(%r7)                 	;       value_next = *(ptr+2);  // Always performed.
116	0057	00094021		addu	%r8, %r0, %r9      	;r9 OLD  ;       value = value_next;
117	0058	08000004		j	endif
118			swap:	;     } else {
119	0059	24e70004		addui	%r7, %r7, $4                	;       ptr++;                  // Always performed.
120	005a	ace90000		sw	0(%r7), %r9        	;r7,r9 OLD       *ptr = value_next;
121	005b	ace80004		sw	4(%r7), %r8        	;r7 OLD  ;       *(ptr+1) = value;
122			endif:	;     }
123			
124	005c	b0a1fff9		bgeu	%r5, %r1, inner_loop_begin  	;   } while(j >= 2);
125	005d	2ca50001		subui	%r5, %r5, $1                	;       j--;                    // Always performed.
126			
127	005e	0bfffff2		j	outer_loop_begin            	; }
128	005f	000a3821		addu	%r7, %r0, %r10              	; ptr = array;                  // Always performed.
129			
130			outer_loop_end:
131			
132				; End BubbleSort
133			
134	0060	8fbe0000		lw	%r30, 0(%r29)			; Restore frame pointer
135	0061	8fbf0004		lw	%r31, 4(%r29)			; Restore return address
136			
137				; Restore the saved registers
138	0062	8fa10008		lw	%r1, 8(%r29)
139	0063	8fa2000c		lw	%r2, 12(%r29)
140	0064	8fa30010		lw	%r3, 16(%r29)
141	0065	8fa40014		lw	%r4, 20(%r29)
142	0066	8fa50018		lw	%r5, 24(%r29)
143	0067	8fa6001c		lw	%r6, 28(%r29)
144	0068	8fa70020		lw	%r7, 32(%r29)
145	0069	8fa80024		lw	%r8, 36(%r29)
146	006a	8fa90028		lw	%r9, 40(%r29)
147	006b	8faa0030		lw	%r10,48(%r29)
148			
149	006c	001ee820		add	%r29, %r0, %r30			; Restore stack pointer
150			
151				; Return
152	006d	00000000		nop
153	006e	03e00008		jr	%r31
154	006f	00000000		nop
155			
156			
157	0070	00000000	_exit:	nop
158	0071	00000000		nop
159			
160			
161				.section	.data
162			_array:
163	0000	0000002d		.data.32	45
164	0004	0000004b		.data.32	75
165	0008	00000156		.data.32	342
166	000c	00000036		.data.32	54
167	0010	00000007		.data.32	7
168	0014	00000056		.data.32	86
169	0018	0000005c		.data.32	92
170	001c	000000eb		.data.32	235
171	0020	00000004		.data.32	4
172	0024	0000002a		.data.32	42
173	0028	00000063		.data.32	99
174	002c	0000004e		.data.32	78
175	0030	0000003f		.data.32	63
176	0034	00000160		.data.32	352
177	0038	00000015		.data.32	21
178	003c	0000027a		.data.32	634
179	0040	00000006		.data.32	6
180	0044	0000004d		.data.32	77
181	0048	0000015a		.data.32	346
182	004c	00000017		.data.32	23
183			
184				.section	.text
185				.addressing	Word
186				;.addressing	Word
187	0072	00000000		nop
188			exit:
189	0073	00000000		nop
190	0074	00000000		nop


******** Cross Reference List ********
Defined Symbol
name   	section	lc     	attr   	value  	lineno 
exit	.text	0073	Label	73	188 
outer_loop_end	.text	0060	Label	60	130 
_bubbleSort	.text	0033	Label	33	68 
endif	.text	005c	Label	5c	122 
inner_loop_begin	.text	0055	Label	55	113 
_array	.data	0000	Label	0	162 
_exit	.text	0070	Label	70	157 
swap	.text	0059	Label	59	118 
outer_loop_begin	.text	0050	Label	50	106 
main	.text	001d	Label	1d	38 


Undefined Symbol
name   	section	lc     	attr   	value  	lineno 


Multiple Defined Symbol
name   	section	lc     	attr   	value  	lineno 


******* Section Data List ******* 
Sec	Attr		Size
.text 	Writable 	75 
addr_space : 16 
addressing : Word 
bitwidth per byte : 8 
word alignment : 4 
.data 	Data		50 
addr_space : 16 
addressing : Byte 
bitwidth per byte : 8 
word alignment : 4 
