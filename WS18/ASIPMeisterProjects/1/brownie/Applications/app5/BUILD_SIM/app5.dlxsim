	.section	.text
	.addressing	Word
	xor	r4, r4, r4
	xor	r5, r5, r5
	xor	r6, r6, r6
	addi	r4, r0, $(0x0017EFFC / 0x10000)
	addi	r5, r0, $(0x0017EFFC / 0x10000)

	lsoi	r4, r4, $(0x0017EFFC % 0x10000)
	lsoi	r5, r5, $(0x0017EFFC % 0x10000)

	sw	-4(r5), r4
	sw	-8(r5), r3
	addi	r5, r4, $(-8)

	jpl	_main	
	sw	0(r5), r21
	jpl	_exit



	.section	.text
	.addressing	.Word
;	.align 2
;	.globl	_main
;	.type	_main, @function
_main:
	ADDI	R21, R0, #5
	ADDI	R22, R0, #9
	ADDI	R23, R0, #2	; 0 <= r3 <= 5

	ADDI	R24, R0,  (_labL_5_jr_1/0x10000)
	LSOI	R24, R24, (_labL_5_jr_1%0x10000)


	LLSI	R23, R23, #3
	ADD	R24, R24, R23
	JPR	R24
	NOP


_labL_5_jr_1:
	JP	_mark0
	NOP
	JP	_mark1
	NOP
	JP	_mark2
	NOP
	JP	_mark3
	NOP
	JP	_mark4
	NOP
	JP	_mark5
	NOP

_mark0:	
	AND	R25, R21, R22
	JP	_labL_5_jr_2
	NOP
	
_mark1:	
	OR	R25, R21, R22
	JP	_labL_5_jr_2
	NOP
	
_mark2:	
	XOR	R25, R21, R22
	JP	_labL_5_jr_2
	NOP
	
_mark3:	
	ADD	R25, R21, R22
	JP	_labL_5_jr_2
	NOP
	
_mark4:	
	SUB	R25, R21, R22
	JP	_labL_5_jr_2
	NOP
	
_mark5:	
	ELT	R25, R21, R22
	JP	_labL_5_jr_2
	NOP

_labL_5_jr_2:


	jpr	r3		; return
;	.size	_main, .-_main
;	.ident	"GCC: (GNU) 4.2.2"




_exit: 
	trap	#0	; HALT


