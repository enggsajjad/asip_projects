<?xml version="1.0" encoding="UTF-8" ?>
<FHM>
  <model_name> dmau </model_name>

  <model>
    <design_level> behavior </design_level>
    <version> 1.0 </version>
    <author> <![CDATA[ Kyoko UEDA ]]> </author>
    <affiliation> <![CDATA[ Osaka Univ. ]]> </affiliation>
    <model_info> <![CDATA[
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                %
%                 Copyright 2002 PEAS Project                    %
%                                                                %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
]]> </model_info>

    <parameter>
      <parameter_value key="bit_width">
        <value> 8 </value>
        <value> 16 </value>
        <value> 32 </value>
        <value> 64 </value>
        <value> 128 </value>
      </parameter_value>
      <parameter_value key="address_space">
        <value> 16 </value>
        <value> 32 </value>
        <value> 64 </value>
        <value> 128 </value>
      </parameter_value>
      <parameter_value key="access_width">
        <value> 8 </value>
        <value> 16 </value>
        <value> 32 </value>
        <value> 64 </value>
        <value> 128 </value>
      </parameter_value>
    </parameter>

    <function_description>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates function definition for dmau in behavior level
# parameter : bit_width address_space access_width

if ($#ARGV != 2){
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width address_space access_width\n";
    exit (100);
}
$bit_width = $ARGV[0];
$addr_space = $ARGV[1];
$access = $ARGV[2];

@bit_widths = (8, 16, 32, 64, 128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

@addr_spaces = (4, 8, 16, 32, 64, 128);
if (! grep($_ eq $addr_space, @addr_spaces)){
    print "address_space $addr_space is not supported.\n";
    exit (100);
}

@accesses = (8, 16, 32, 64, 128);
if (! grep($_ eq $access, @accesses)){
    print "access_width $access is not supported.\n";
    exit (100);
}

if ($bit_width < $access){
   print "The value of \"access_width\" must be less than the value of \"bit_width\".\n";
   exit(100);
} 

$a_tmp = $access;
while ($bit_width != $a_tmp){
    if ($bit_width < $a_tmp){
	print "The value of \"bit_width\" must be 2^n * \"access_width\".\n";
	exit (100);
    }
    $a_tmp = $a_tmp * 2;
}

$b_1 = $bit_width - 1;
$a_1 = $addr_space - 1;

$b_range = "${b_1}:0";
$a_range = "${a_1}:0";

$wmode_num = $bit_width/$access;
$wmode_1 = $wmode_num - 1;

$acmode_num = &log2u($wmode_num);
$acmode_1 = $acmode_num - 1;

if ($acmode_num == 0){
    $acmode_str = "";
    $ext_str = "";
    $aerr_str = "";
    $wmode_str = "";
}
else{
    $wmode_str = "[$wmode_1:0]";
    if ($acmode_num == 1){
        $acmode_str = "ac_mode, ";
	$a_t_comma = "'";
    }
    else{
	$acmode_str = "ac_mode[$acmode_1:0], ";
	$a_t_comma = "\"";
    }
    $ext_str = "ext_mode, ";
    $aerr_str = "addr_err, ";
}

$b_str = $a_t_comma . &to_comp($wmode_1, $acmode_num) . $a_t_comma;
$b_h = $bit_width / 2;
$b_h_str = $a_t_comma . &to_comp($b_h/$access-1, $acmode_num) . $a_t_comma;
$b_b = 8;
$b_b_str = $a_t_comma . &to_comp(0, $acmode_num) . $a_t_comma;

if ($bit_width != $access){
    print "bit addr_err(bit_vector addr, bit_vector ac_mode);\n\n";
}

{
    print <<FHM_DL_FUNC
/** ${bit_width}-bit data memory access unit */
model dmau${bit_width}{
  port{
    in    reset;
    in    req, rw, ${acmode_str}${ext_str}addr[${a_range}], data_in[${b_range}];
    out   ${aerr_str}req_bus, w_mode_bus$wmode_str, addr_bus[${a_range}];
    inout data_bus[${b_range}];
    in    ack_bus;
    out   ack, data_out[${b_range}];
  }
  default_control{
    reset   = 0;
    req     = 0;
  }

  /** no operation */
  function nop : idle{
    control{
      in reset, req;
    }
    protocol{
      [reset ==0 && req == 0]{
      }
    }
  }

  /** reset */
  function reset : reset{
    assignment{
      reg = 0;
    }
    control{
      in reset;
    }
    protocol{
      [reset == 0]{
	store reg;
      }
    }
  }

FHM_DL_FUNC
    }
if ($acmode_num != 0){
    {
	print <<FHM_DL_FUNC
  /** load ${bit_width} bits */
  function ld_${bit_width}{
    input{
      bit_vector addr;
    }
    output{
      bit_vector data_out = data_bus;
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 0 && ac_mode == ${b_str}] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid data_out;
	valid addr_err;
      }
    }
  }

FHM_DL_FUNC
    }
    for ($i=$wmode_1,$w_b=$bit_width-$access; $i>0; $i--,$w_b=$w_b-$access){
	$str = $a_t_comma . &to_comp($i-1, $acmode_num) . $a_t_comma;
	{
	    print <<FHM_DL_FUNC
  /** load ${w_b} bits */
  function ld_${w_b}{
    input{
      bit_vector addr;
    }
    output{
      bit_vector data_out = data_bus;
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode, ext_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 0 && ac_mode == $str && ext_mode == 1] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid data_out;
	valid addr_err;
      }
    }
  }

  /** load ${w_b} bits (unsigned) */
  function ldu_${w_b}{
    input{
      bit_vector addr;
    }
    output{
      bit_vector data_out = data_bus;
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode, ext_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 0 && ac_mode == $str && ext_mode == 0] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid data_out;
	valid addr_err;
      }
    }
  }

FHM_DL_FUNC
        }
    }
    {
	print <<FHM_DL_FUNC
  /** store ${bit_width} bits */
  function s_${bit_width}{
    input{
      bit_vector addr;
      bit_vector data_in;
    }
    output{
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 1 && ac_mode == ${b_str}] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid addr_err;
      }
    }
  }

FHM_DL_FUNC
    }
    for ($i=$wmode_1,$w_b=$bit_width-$access; $i>0; $i--,$w_b=$w_b-$access){
	$str = $a_t_comma . &to_comp($i-1, $acmode_num) . $a_t_comma;
	{
	    print <<FHM_DL_FUNC
  /** store ${w_b} bits */
  function s_${w_b}{
    input{
      bit_vector addr;
      bit_vector data_in;
    }
    output{
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 1 && ac_mode == $str] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid addr_err;
      }
    }
  }

FHM_DL_FUNC
        }
    }
    {
	print <<FHM_DL_FUNC
  /** load : same as ld_${bit_width} */
  function load{
    input{
      bit_vector addr;
    }
    output{
      bit_vector data_out = data_bus;
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 0 && ac_mode == ${b_str}] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid data_out;
	valid addr_err;
      }
    }
  }

  /** read : same as ld_${bit_width} */
  function read{
    input{
      bit_vector addr;
    }
    output{
      bit_vector data_out = data_bus;
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 0 && ac_mode == ${b_str}] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid data_out;
	valid addr_err;
      }
    }
  }

  /** lh : same as ld_${b_h} */
  function lh{
    input{
      bit_vector addr;
    }
    output{
      bit_vector data_out = data_bus;
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode, ext_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 0 && ac_mode == ${b_h_str} && ext_mode = 1] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid data_out;
	valid addr_err;
      }
    }
  }

  /** lhu : same as ldu_${b_h} */
  function lhu{
    input{
      bit_vector addr;
    }
    output{
      bit_vector data_out = data_bus;
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode, ext_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 0 && ac_mode == ${b_h_str} && ext_mode = 0] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid data_out;
	valid addr_err;
      }
    }
  }

  /** lb : same as ld_${b_b} */
  function lb{
    input{
      bit_vector addr;
    }
    output{
      bit_vector data_out = data_bus;
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode, ext_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 0 && ac_mode == ${b_b_str} && ext_mode = 1] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid data_out;
	valid addr_err;
      }
    }
  }

  /** lbu : same as ldu_${b_b} */
  function lbu{
    input{
      bit_vector addr;
    }
    output{
      bit_vector data_out = data_bus;
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode, ext_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 0 && ac_mode == ${b_b_str} && ext_mode = 0] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid data_out;
	valid addr_err;
      }
    }
  }

  /** store : same as s_${bit_width} */
  function store{
    input{
      bit_vector addr;
      bit_vector data_in;
    }
    output{
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 1 && ac_mode == ${b_str}] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid addr_err;
      }
    }
  }

  /** write : same as s_${bit_width} */
  function write{
    input{
      bit_vector addr;
      bit_vector data_in;
    }
    output{
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 1 && ac_mode == ${b_str}] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid addr_err;
      }
    }
  }

  /** sh : same as s_${b_h} */
  function sh{
    input{
      bit_vector addr;
      bit_vector data_in;
    }
    output{
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 1 && ac_mode == ${b_h_str}] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid addr_err;
      }
    }
  }

  /** sb : same as s_${b_b} */
  function sb{
    input{
      bit_vector addr;
      bit_vector data_in;
    }
    output{
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 1 && ac_mode == ${b_b_str}] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid addr_err;
      }
    }
  }
}
FHM_DL_FUNC
    }
}
else{
    {
	print <<FHM_DL_FUNC
  /** load : load data */
  function load{
    input{
      bit_vector addr;
    }
    output{
      bit_vector data_out = data_bus;
    }
    control{
      in  reset, req, rw;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 0] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid data_out;
      }
    }
  }

  /** read : same as load */
  function read{
    input{
      bit_vector addr;
    }
    output{
      bit_vector data_out = data_bus;
    }
    control{
      in  reset, req, rw;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 0] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid data_out;
      }
    }
  }

  /** store : store data */
  function store{
    input{
      bit_vector addr;
      bit_vector data_in;
    }
    control{
      in  reset, req, rw;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 1] until (ack == 1 || reset == 1);
    }
  }

  /** write : same as store */
  function write{
    input{
      bit_vector addr;
      bit_vector data_in;
    }
    control{
      in  reset, req, rw;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 1] until (ack == 1 || reset == 1);
    }
  }
}
FHM_DL_FUNC
    }    
}
exit(0);

# -----------------------

sub log2u{
    $num = $_[0];

    if ($num == 1){
	return(0);
    }
    for ($i=1, $N=2; $N<$num; $i++, $N*=2){};
    return($i);
}

# ---------------------------------

sub to_comp{
  @buf = ();
  $num = $_[0];
  $width = $_[1];

  for ($x=1; $x<$width; $x++){
    $buf[$x] = $num % 2;
    $num = ($num - $buf[$x]) / 2;
  }
  $buf[$x] = $num % 2;
  return (join("", reverse(@buf)));
}
        ]]>
      </script>
    </function_description>

    <function_conv>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates function definition for dmau in behavior level
# parameter : bit_width address_space access_width

if ($#ARGV != 2){
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width address_space access_width\n";
    exit (100);
}
$bit_width = $ARGV[0];
$addr_space = $ARGV[1];
$access = $ARGV[2];

@bit_widths = (8, 16, 32, 64, 128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

@addr_spaces = (4, 8, 16, 32, 64, 128);
if (! grep($_ eq $addr_space, @addr_spaces)){
    print "address_space $addr_space is not supported.\n";
    exit (100);
}

@accesses = (8, 16, 32, 64, 128);
if (! grep($_ eq $access, @accesses)){
    print "access_width $access is not supported.\n";
    exit (100);
}

$a_tmp = $access;
while ($bit_width != $a_tmp){
    if ($bit_width < $a_tmp){
	print "The value of \"bit_width\" must be 2^n * \"access_width\".\n";
	exit (100);
    }
    $a_tmp = $a_tmp * 2;
}

$b_1 = $bit_width - 1;
$a_1 = $addr_space - 1;

$b_range = "${b_1}:0";
$a_range = "${a_1}:0";

$wmode_num = $bit_width/$access;
$wmode_1 = $wmode_num - 1;

$acmode_num = &log2u($wmode_num);
$acmode_1 = $acmode_num - 1;

if ($acmode_num == 0){
    $acmode_str = "";
    $ext_str = "";
    $aerr_str = "";
    $wmode_str = "";
}
else{
    $wmode_str = "[$wmode_1:0]";
    if ($acmode_num == 1){
        $acmode_str = "ac_mode, ";
	$a_t_comma = "'";
    }
    else{
	$acmode_str = "ac_mode[$acmode_1:0], ";
	$ac_range = "[$acmode_1:0] ";
	$a_t_comma = "\"";
    }
    $ext_str = "ext_mode, ";
    $aerr_str = "addr_err, ";
}

$b_str = $a_t_comma . &to_comp($wmode_1, $acmode_num) . $a_t_comma;
$b_h = $bit_width / 2;
$b_h_str = $a_t_comma . &to_comp($b_h/$access-1, $acmode_num) . $a_t_comma;
$b_b = 8;
$b_b_str = $a_t_comma . &to_comp(0, $acmode_num) . $a_t_comma;

{
    print <<FHM_DL_FUNC
/** nop */
function nop{
  input{
  }
  output{
  }
  control{
    in bit reset;
    in bit req;
  }
  protocol{
    single_cycle_protocol{
      reset = '0';
      req   = '0';
    }
  }
}

/** reset */
function reset{
  input{
  }
  output{
  }
  control{
    in bit reset;
  }
  protocol{
    single_cycle_protocol{
      reset = '1';
    }
  }
}

FHM_DL_FUNC
    }
if ($acmode_num != 0){
    {
	print <<FHM_DL_FUNC
/** load ${bit_width} bits */
function ld_${bit_width}{
  input{
    bit [$a_1:0] addr;
  }
  output{
    bit [$b_1:0] data_out;
    bit addr_err;
  }
  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '0';
      ac_mode = ${b_str};
    }
  }
}

FHM_DL_FUNC
    }
    for ($i=$wmode_1,$w_b=$bit_width-$access; $i>0; $i--,$w_b=$w_b-$access){
	$str = $a_t_comma . &to_comp($i-1, $acmode_num) . $a_t_comma;
	{
	    print <<FHM_DL_FUNC
/** load ${w_b} bits */
function ld_${w_b}{
  input{
    bit [$a_1:0] addr;
  }
  output{
    bit [$b_1:0] data_out;
    bit addr_err;
  }
  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    in  bit ext_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '0';
      ac_mode = ${str};
      ext_mode = '1';
    }
  }
}

/** load ${w_b} bits (unsigned) */
function ldu_${w_b}{
  input{
    bit [$a_1:0] addr;
  }
  output{
    bit [$b_1:0] data_out;
    bit addr_err;
  }
  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    in  bit ext_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '0';
      ac_mode = ${str};
      ext_mode = '0';
    }
  }
}

FHM_DL_FUNC
        }
    }
    {
	print <<FHM_DL_FUNC
/** store ${bit_width} bits */
function s_${bit_width}{
  input{
    bit [$a_1:0] addr;
    bit [$b_1:0] data_in;
  }

  output{
    bit addr_err;
  }

  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '1';
      ac_mode = $b_str;
    }
  }
}

FHM_DL_FUNC
    }
    for ($i=$wmode_1,$w_b=$bit_width-$access; $i>0; $i--,$w_b=$w_b-$access){
	$str = $a_t_comma . &to_comp($i-1, $acmode_num) . $a_t_comma;
	{
	    print <<FHM_DL_FUNC
  /** store ${w_b} bits */
  function s_${w_b}{
  input{
    bit [$a_1:0] addr;
    bit [$b_1:0] data_in;
  }

  output{
    bit addr_err;
  }

  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '1';
      ac_mode = $b_str;
    }
  }
}

FHM_DL_FUNC
        }
    }
    {
	print <<FHM_DL_FUNC
/** load : same as ld_${bit_width} */
function load{
  input{
    bit [$a_1:0] addr;
  }
  output{
    bit [$b_1:0] data_out;
    bit addr_err;
  }
  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '0';
      ac_mode = ${b_str};
    }
  }
}

/** read : same as ld_${bit_width} */
function read{
  input{
    bit [$a_1:0] addr;
  }
  output{
    bit [$b_1:0] data_out;
    bit addr_err;
  }
  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '0';
      ac_mode = ${b_str};
    }
  }
}

/** lh : same as ld_${b_h} */
function lh{
  input{
    bit [$a_1:0] addr;
  }
  output{
    bit [$b_1:0] data_out;
    bit addr_err;
  }
  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    in bit ext_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '0';
      ac_mode = ${b_h_str};
      ext_mode = '1';
    }
  }
}

/** lhu : same as ldu_${b_h} */
function lhu{
  input{
    bit [$a_1:0] addr;
  }
  output{
    bit [$b_1:0] data_out;
    bit addr_err;
  }
  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    in bit ext_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '0';
      ac_mode = ${b_h_str};
      ext_mode = '0';
    }
  }
}

/** lb : same as ld_${b_b} */
function lb{
  input{
    bit [$a_1:0] addr;
  }
  output{
    bit [$b_1:0] data_out;
    bit addr_err;
  }
  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    in bit ext_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '0';
      ac_mode = ${b_b_str};
      ext_mode = '1';
    }
  }
}

/** lbu : same as ldu_${b_b} */
function lbu{
  input{
    bit [$a_1:0] addr;
  }
  output{
    bit [$b_1:0] data_out;
    bit addr_err;
  }
  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    in bit ext_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '0';
      ac_mode = ${b_b_str};
      ext_mode = '0';
    }
  }
}

/** store : same as s_${bit_width} */
function store{
  input{
    bit [$a_1:0] addr;
    bit [$b_1:0] data_in;
  }

  output{
    bit addr_err;
  }

  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '1';
      ac_mode = $b_str;
    }
  }
}

/** write : same as s_${bit_width} */
function write{
  input{
    bit [$a_1:0] addr;
    bit [$b_1:0] data_in;
  }

  output{
    bit addr_err;
  }

  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '1';
      ac_mode = $b_str;
    }
  }
}

/** sh : same as s_${b_h} */
function sh{
  input{
    bit [$a_1:0] addr;
    bit [$b_1:0] data_in;
  }

  output{
    bit addr_err;
  }

  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '1';
      ac_mode = $b_h_str;
    }
  }
}

/** sb : same as s_${b_b} */
function sb{
  input{
    bit [$a_1:0] addr;
    bit [$b_1:0] data_in;
  }

  output{
    bit addr_err;
  }

  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '1';
      ac_mode = $b_b_str;
    }
  }
}
FHM_DL_FUNC
    }
}
else{
    {
	print <<FHM_DL_FUNC
/** load : load data */
function load{
  input{
    bit [$a_1:0] addr;
  }

  output{
    bit [$b_1:0] data_out;
  }

  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '0';
    }
  }
}

/** read : same as load */
function read{
  input{
    bit [$a_1:0] addr;
  }

  output{
    bit [$b_1:0] data_out;
  }

  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '0';
    }
  }
}

/** store : store data */
function store{
  input{
    bit [$a_1:0] addr;
    bit [$b_1:0] data_in;
  }

  output{
  }

  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '1';
    }
  }
}

/** write : same as store */
function write{
  input{
    bit [$a_1:0] addr;
    bit [$b_1:0] data_in;
  }

  output{
  }

  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '1';
    }
  }
}
FHM_DL_FUNC
    }    
}
exit(0);

# -----------------------

sub log2u{
    $num = $_[0];

    if ($num == 1){
	return(0);
    }
    for ($i=1, $N=2; $N<$num; $i++, $N*=2){};
    return($i);
}

# ---------------------------------

sub to_comp{
  @buf = ();
  $num = $_[0];
  $width = $_[1];

  for ($x=1; $x<$width; $x++){
    $buf[$x] = $num % 2;
    $num = ($num - $buf[$x]) / 2;
  }
  $buf[$x] = $num % 2;
  return (join("", reverse(@buf)));
}
        ]]>
      </script>
    </function_conv>

    <function_port>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates port information for dmau in behavior level
# parameter : bit_width address_space access_width

if ($#ARGV != 2){
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width address_space access_width\n";
    exit (100);
}
$bit_width = $ARGV[0];
$addr_space = $ARGV[1];
$access = $ARGV[2];

@bit_widths = (8, 16, 32, 64, 128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

@addr_spaces = (4, 8, 16, 32, 64, 128);
if (! grep($_ eq $addr_space, @addr_spaces)){
    print "address_space $addr_space is not supported.\n";
    exit (100);
}

@accesses = (8, 16, 32, 64, 128);
if (! grep($_ eq $access, @accesses)){
    print "access_width $access is not supported.\n";
    exit (100);
}

$a_tmp = $access;
while ($bit_width != $a_tmp){
    if ($bit_width < $a_tmp){
	print "The value of \"bit_width\" must be 2^n * \"access_width\".\n";
	exit (100);
    }
    $a_tmp = $a_tmp * 2;
}

$b_1 = $bit_width - 1;
$a_1 = $addr_space - 1;

$b_range = "${b_1}:0";
$a_range = "${a_1}:0";

$wmode_num = $bit_width/$access;
$wmode_1 = $wmode_num - 1;

$acmode_num = &log2u($wmode_num);
$acmode_1 = $acmode_num - 1;

if ($acmode_num == 0){
    $acmode_str = "";
    $ext_str = "";
    $aerr_str = "";
    $wmode_str = "bit";
}
else{
    $wmode_str = "bit_vector   $wmode_1   0";
    if ($acmode_num == 1){
        $acmode_str = "\nac_mode	in	bit		ctrl";
	$a_t_comma = "'";
    }
    else{
	$acmode_str = "\nac_mode	in	bit_vector   $acmode_1   0	ctrl";
	$a_t_comma = "\"";
    }
    $ext_str = "\next_mode	in	bit	ctrl";
    $aerr_str = "\naddr_err	out	bit	data";
}

{
    print <<FHM_DL_FUNC
reset	in	bit		reset
req	in	bit		ctrl
rw	in	bit		ctrl${acmode_str}${ext_str}
addr	in	bit_vector   $a_1   0	data
data_in	in	bit_vector   $b_1   0	data${aerr_str}
req_bus	out	bit	data
w_mode_bus	out	${wmode_str}	data
addr_bus	out	bit_vector   $a_1   0	data
data_bus	inout	bit_vector   $b_1   0	data
ack_bus	in	bit	data
ack	out	bit	ctrl
data_out	out	bit_vector   $b_1   0	data
FHM_DL_FUNC
}
exit(0);

# -----------------------

sub log2u{
    $num = $_[0];

    if ($num == 1){
	return(0);
    }
    for ($i=1, $N=2; $N<$num; $i++, $N*=2){};
    return($i);
}

# ---------------------------------

sub to_comp{
  @buf = ();
  $num = $_[0];
  $width = $_[1];

  for ($x=1; $x<$width; $x++){
    $buf[$x] = $num % 2;
    $num = ($num - $buf[$x]) / 2;
  }
  $buf[$x] = $num % 2;
  return (join("", reverse(@buf)));
}
        ]]>
      </script>
    </function_port>

    <design>
      <design_lang> vhdl </design_lang>

      <instance>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates instance for dmau in behavior level
# parameter : instance_name bit_width address_space access_width

if ($#ARGV != 3){
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name bit_width address_space access_width\n";
    exit (100);
}

$instance_name = $ARGV[0];
$bit_width = $ARGV[1];
$addr_space = $ARGV[2];
$access = $ARGV[3];

@bit_widths = (8, 16, 32, 64, 128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

@addr_spaces = (4, 8, 16, 32, 64, 128);
if (! grep($_ eq $addr_space, @addr_spaces)){
    print "address_space $addr_space is not supported.\n";
    exit (100);
}

@accesses = (8, 16, 32, 64, 128);
if (! grep($_ eq $access, @accesses)){
    print "access_width $access is not supported.\n";
    exit (100);
}

$a_tmp = $access;
while ($bit_width != $a_tmp){
    if ($bit_width < $a_tmp){
	print "The value of \"bit_width\" must be 2^n * \"access_width\".\n";
	exit (100);
    }
    $a_tmp = $a_tmp * 2;
}

$b4 = $bit_width;

$b4_1 = $b4 - 1;

$wmode_num = $bit_width/$access;
$wmode_1 = $wmode_num - 1;
if ($wmode_num == 1){
    $wmode_port = "std_logic";
    $a_tmp = 0;
    $a_tmp_str_0 = "";
}
else{
    $wmode_port = "std_logic_vector($wmode_1 downto 0)";
    $a_tmp = $wmode_num/2;
    $a_tmp_str_0 =  " & \"" . '0' x $a_tmp . "\"";
}
$a_1 = $addr_space - 1;
$a_tmp_1 = $a_tmp - 1;
$acmode_num = &log2u($wmode_num);
$acmode_1 = $acmode_num - 1;

$zs = 'Z' x $bit_width;
{
    print <<FHM_DL_INSTANCE
-- Module	 : Data Memory Access Unit
-- Author	 : M. Itoh (c) 2000.
--                 Modified by J.Sato (c) 2001
-- Version	 : 1.0
-- VHDL          : 87

-- Functionality : behavior level
--  port
--    reset        : reset
--    req          : memory access request from cpu
--    rw           : read/write mode from cpu
--                   0 => read
--                   1 => write
FHM_DL_INSTANCE
}
if ($acmode_num!=0){
    print "--    ac_mode      : access mode from cpu\n";
    for ($i=$wmode_1; $i>=0; $i--){
	$str = &to_comp($i, $acmode_num);
	$access_bits = $access * ($i+1);
	print "--                   $str => $access_bits bits access\n";
    }
    print <<FHM_DL_INSTANCE
--    ext_mode     : extention mode from cpu
--                   0 => zero extention
--                   1 => sign extention
FHM_DL_INSTANCE
}
{
    print <<FHM_DL_INSTANCE
--    addr         : address from cpu
--    data_in      : data output for cpu
FHM_DL_INSTANCE
}
if ($acmode_num!=0){
    print "--    addr_err     : address error signal for cpu\n";
}
{
    print <<FHM_DL_INSTANCE
--    req_bus      : memory access request for bus
--    w_mode_bus   : access mode for bus
--    addr_bus     : address output for bus
--    data_bus     : data input/output for bus
--    ack_bus      : memory access ack from bus
--    ack          : memory access ack for cpu
--    data_out     : data input for cpu

library ieee;
use ieee.std_logic_1164.all;

entity $instance_name is
    port (reset        : in  std_logic;				-- reset signal
	  req          : in  std_logic;				-- request from cpu
	  rw           : in  std_logic;				-- read/write mode from cpu
FHM_DL_INSTANCE
}
if ($acmode_num!=0){
    print "          ac_mode      : in  std_logic_vector($acmode_1 downto 0);	-- access mode from cpu\n";
    print "          ext_mode     : in  std_logic;				-- extention mode from cpu\n";
}
{
    print <<FHM_DL_INSTANCE
	  addr         : in  std_logic_vector($a_1 downto 0);	-- address from cpu
	  data_in      : in  std_logic_vector($b4_1 downto 0);	-- input data from cpu
FHM_DL_INSTANCE
}
if ($acmode_num!=0){
    print "	  addr_err     : out std_logic;				-- address error signal for cpu\n";
}
{
    print <<FHM_DL_INSTANCE
	  req_bus      : out std_logic;				-- request for bus
	  w_mode_bus   : out $wmode_port;				-- access mode for bus
	  addr_bus     : out std_logic_vector($a_1 downto 0);	-- address for bus
	  data_bus     : inout std_logic_vector($b4_1 downto 0);	-- input data for bus
	  ack_bus      : in  std_logic;				-- ack from bus
	  ack          : out std_logic;				-- ack for cpu
	  data_out     : out std_logic_vector($b4_1 downto 0));	-- output data for cpu
end $instance_name;

-- purpose: behavior description for data memory access unit
architecture behavior of $instance_name is

begin  -- behavior
    process (reset, req, ack_bus)
    begin  -- process
      if reset = '1' then
        req_bus <= '0';
        ack     <= '0';
      else
        if req'event and req = '1' then
          addr_bus <= addr($a_1 downto $a_tmp)$a_tmp_str_0;
          if rw = '1' then
FHM_DL_INSTANCE
}
    if ($acmode_num!=0){
	for ($i=$wmode_1; $i>=0; $i--){
	    $str = &to_comp($i, $acmode_num);
	    if ($i==$wmode_1){
		print "            if ac_mode = \"$str\" then\n";
	    }
	    else{
		print "            elsif ac_mode = \"$str\" then\n";
	    }
	    for ($j=0; $j<=$wmode_1-$i; $j++){
		$str = &to_comp($j, $a_tmp);
		if ($j==0){
		    print "              if addr($a_tmp_1 downto 0) = \"$str\" then\n";
		}
		else{
		    print "              elsif addr($a_tmp_1 downto 0) = \"$str\" then\n";
		}
		@w_str = ();
		$rem_data = $i+1;
		for ($k=0; $k<$wmode_num; $k++){
		    if ($k >= $j && $rem_data > 0){
			@w_str = (@w_str, 0);
			$rem_data--;
		    }
		    else{
			@w_str = (@w_str, 1);
		    }
		}
		$w_str = join("",@w_str);
		$tmp = $access * ($i+1);
		$data_str = "";
		if ($j != 0){
		    $data_str =  "\"" . 'Z' x ($bit_width-$access*($wmode_num-$j)) . "\" & ";
		}
		$r_m = $tmp - 1;
		$data_str = $data_str . "data_in($r_m downto 0)";
		$tmp = $access * ($wmode_num - $i - $j - 1);
		if ($tmp > 0){
		    $data_str = $data_str . " & \"" . 'Z' x $tmp . "\"";
		}
                print <<FHM_DL_INSTANCE
                addr_err <= '0';
                req_bus  <= '1';
                data_bus <= $data_str;
                w_mode_bus <= "$w_str";
FHM_DL_INSTANCE
	    }
            print <<FHM_DL_INSTANCE
              else
                addr_err <= '1';
                req_bus  <= '0';
                data_bus <= "$zs";
              end if;
FHM_DL_INSTANCE
	}
	{
            $w_1s = '1' x $wmode_num;
	    print <<FHM_DL_INSTANCE
            end if;
          elsif rw = '0' then
            data_bus <= "$zs";
            w_mode_bus <= "$w_1s";
FHM_DL_INSTANCE
        }
	for ($i=$wmode_1; $i>=0; $i--){
	    $str = &to_comp($i, $acmode_num);
	    if ($i==$wmode_1){
		print "            if ac_mode = \"$str\" then\n";
	    }
	    else{
		print "            elsif ac_mode = \"$str\" then\n";
	    }
	    for ($j=0; $j<=$wmode_1-$i; $j++){
		$str = &to_comp($j, $a_tmp);
		if ($j==0){
		    print "              if addr($a_tmp_1 downto 0) = \"$str\" then\n";
		}
		else{
		    print "              elsif addr($a_tmp_1 downto 0) = \"$str\" then\n";
		}
                {
                    print <<FHM_DL_INSTANCE
                addr_err <= '0';
                req_bus  <= '1';
FHM_DL_INSTANCE
                }
            }
            print <<FHM_DL_INSTANCE
              else
                addr_err <= '1';
                req_bus  <= '0';
              end if;
FHM_DL_INSTANCE
	}
        {
        print <<FHM_DL_INSTANCE
            end if;
          end if;
        elsif req'event and req = '0' then
          req_bus <= '0';
        elsif ack_bus'event and ack_bus = '1' then
          ack <= '1';
          req_bus <= '0';
          if rw = '0' then
FHM_DL_INSTANCE
        }
	for ($i=$wmode_1; $i>=0; $i--){
	    $str = &to_comp($i, $acmode_num);
	    if ($i==$wmode_1){
		print "            if ac_mode = \"$str\" then\n";
	    }
	    else{
		print "            elsif ac_mode = \"$str\" then\n";
	    }
	    for ($j=0; $j<=$wmode_1-$i; $j++){
		$str = &to_comp($j, $a_tmp);
		if ($j==0){
		    print "              if addr($a_tmp_1 downto 0) = \"$str\" then\n";
		}
		else{
		    print "              elsif addr($a_tmp_1 downto 0) = \"$str\" then\n";
		}
		$tmp = $access * ($i+1);
		$r_m = $tmp - 1;
		$b_m = $bit_width-$access*$j - 1;
		$b_l = $access*($wmode_num-$i-$j-1);
		print "                data_out($r_m downto 0) <= data_bus($b_m downto $b_l);\n";
		if ($r_m != $b4_1){
		    print "                data_out($b4_1 downto $tmp) <= (others => ext_mode and data_bus($b_m));\n";
		}
	    }
            print "              end if;\n";
	}
        print "            end if;\n          end if;\n";
    }
    else{
        print <<FHM_DL_INSTANCE
            req_bus  <= '1';
            data_bus <= data_in;
            w_mode_bus <= '0';
          elsif rw = '0' then
            req_bus  <= '1';
            data_bus <= "$zs";
            w_mode_bus <= '1';
          end if;
        elsif req'event and req = '0' then
          req_bus <= '0';
        elsif ack_bus'event and ack_bus = '1' then
          ack <= '1';
          req_bus <= '0';
          if rw = '0' then
            data_out <= data_bus;
          end if;
FHM_DL_INSTANCE
    }
{
print <<FHM_DL_INSTANCE
        elsif ack_bus'event and ack_bus = '0' then
          ack <= '0';
        end if;
      end if;
    end process;
      
end behavior;
FHM_DL_INSTANCE
}
exit(0);

# -----------------------

sub log2u{
    $num = $_[0];

    if ($num == 1){
	return(0);
    }
    for ($i=1, $N=2; $N<$num; $i++, $N*=2){};
    return($i);
}

# ---------------------------------

sub to_comp{
  @buf = ();
  $num = $_[0];
  $width = $_[1];

  for ($x=1; $x<$width; $x++){
    $buf[$x] = $num % 2;
    $num = ($num - $buf[$x]) / 2;
  }
  $buf[$x] = $num % 2;
  return (join("", reverse(@buf)));
}
          ]]>
        </script>
      </instance>

      <entity>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates entity for dmau in behavior level
# parameter : instance_name bit_width address_space access_width

if ($#ARGV != 3){
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name bit_width address_space access_width\n";
    exit (100);
}

$instance_name = $ARGV[0];
$bit_width = $ARGV[1];
$addr_space = $ARGV[2];
$access = $ARGV[3];

@bit_widths = (8, 16, 32, 64, 128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

@addr_spaces = (4, 8, 16, 32, 64, 128);
if (! grep($_ eq $addr_space, @addr_spaces)){
    print "address_space $addr_space is not supported.\n";
    exit (100);
}

@accesses = (8, 16, 32, 64, 128);
if (! grep($_ eq $access, @accesses)){
    print "access_width $access is not supported.\n";
    exit (100);
}

$a_tmp = $access;
while ($bit_width != $a_tmp){
    if ($bit_width < $a_tmp){
	print "The value of \"bit_width\" must be 2^n * \"access_width\".\n";
	exit (100);
    }
    $a_tmp = $a_tmp * 2;
}

$b4 = $bit_width;
$b4_1 = $b4 - 1;

$wmode_num = $bit_width/$access;
$wmode_1 = $wmode_num - 1;
if ($wmode_num == 1){
    $wmode_port = "std_logic";
}
else{
    $wmode_port = "std_logic_vector($wmode_1 downto 0)";
}
$a_1 = $addr_space - 1;
$acmode_num = &log2u($wmode_num);
$acmode_1 = $acmode_num - 1;

{
    print <<FHM_DL_INSTANCE
entity $instance_name is
    port (reset        : in  std_logic;				-- reset signal
	  req          : in  std_logic;				-- request from cpu
	  rw           : in  std_logic;				-- read/write mode from cpu
FHM_DL_INSTANCE
}
if ($acmode_num!=0){
    print "          ac_mode      : in  std_logic_vector($acmode_1 downto 0);	-- access mode from cpu\n";
    print "          ext_mode     : in  std_logic;				-- extention mode from cpu\n";
}
{
    print <<FHM_DL_INSTANCE
	  addr         : in  std_logic_vector($a_1 downto 0);	-- address from cpu
	  data_in      : in  std_logic_vector($b4_1 downto 0);	-- input data from cpu
FHM_DL_INSTANCE
}
if ($acmode_num!=0){
    print "	  addr_err     : out std_logic;				-- address error signal for cpu\n";
}
{
    print <<FHM_DL_INSTANCE
	  req_bus      : out std_logic;				-- request for bus
	  w_mode_bus   : out $wmode_port;				-- access mode for bus
	  addr_bus     : out std_logic_vector($a_1 downto 0);	-- address for bus
	  data_bus     : inout std_logic_vector($b4_1 downto 0);	-- input data for bus
	  ack_bus      : in  std_logic;				-- ack from bus
	  ack          : out std_logic;				-- ack for cpu
	  data_out     : out std_logic_vector($b4_1 downto 0));	-- output data for cpu
end $instance_name;
FHM_DL_INSTANCE
}

exit(0);

# -----------------------

sub log2u{
    $num = $_[0];

    if ($num == 1){
	return(0);
    }
    for ($i=1, $N=2; $N<$num; $i++, $N*=2){};
    return($i);
}

# ---------------------------------

sub to_comp{
  @buf = ();
  $num = $_[0];
  $width = $_[1];

  for ($x=1; $x<$width; $x++){
    $buf[$x] = $num % 2;
    $num = ($num - $buf[$x]) / 2;
  }
  $buf[$x] = $num % 2;
  return (join("", reverse(@buf)));
}
          ]]>
        </script>
      </entity>

      <testvector>
        <testvector_script>
          <![CDATA[ ]]>
        </testvector_script>
      </testvector>

      <synthesis>
        <parameter></parameter>
        <synthesis_script>
          <script>
            <![CDATA[
#!/usr/bin/perl
# this script generates synthesis script for dmau in behavior level
# parameter : instance_name priority bit_width address_space access_width


if ($#ARGV != 4){
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name priority bit_width address_space access_width\n";
    exit (100);
}

$instance_name = $ARGV[0];
$priority      = $ARGV[1];
$bit_width = $ARGV[2];
$addr_space = $ARGV[3];
$access = $ARGV[4];

if ($priority eq "area"){
    $priority_const = "set_max_area 0";
}
elsif ($priority eq "performance"){
    $priority_const = "set_max_delay -from all_inputs() -to all_outputs() 0";
}
elsif ($priority eq "power"){
    $priority_const = "";
}
elsif ($priority eq "none"){
    $priority_const = "";
}
else{
    print "priority $priority is not supported.\n";
    exit (100);
}

@bit_widths = (8, 16, 32, 64, 128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

@addr_spaces = (4, 8, 16, 32, 64, 128);
if (! grep($_ eq $addr_space, @addr_spaces)){
    print "address_space $addr_space is not supported.\n";
    exit (100);
}

@accesses = (8, 16, 32, 64, 128);
if (! grep($_ eq $access, @accesses)){
    print "access_width $access is not supported.\n";
    exit (100);
}

{
    print <<FHM_DL_SCRIPT
hdlin_auto_save_templates = TRUE

analyze -f vhdl $instance_name.vhd

elaborate $instance_name
uniquify

$priority_const

compile 

write -hierarchy -output $instance_name.db

report_area
report_timing

quit
FHM_DL_SCRIPT
}
exit(0);
            ]]>
          </script>
        </synthesis_script>
      </synthesis>
    </design>

    <estimation>
      <estimation_data>
        <library name="OSAKA">

          <est_type name="shape">
            <est_index name="area">
              <unit> mm2 </unit>
              <translate>
                <translate_value key="gate"> 4201.68 </translate_value>
                <translate_value key="mm2">  1 </translate_value>
              </translate>

              <parameters name="16,8">
                <max>
                  <data bit_width="8"> 0.0491116324898612 </data>
                  <data bit_width="16"> 0.188537633756021 </data>
                  <data bit_width="32"> 0.641681106604977 </data>
                  <data bit_width="64"> 1.99871664976866 </data>
                  <data bit_width="128"> 7.00404362064698 </data>
                </max>
                <min>
                  <data bit_width="8"> 0.0456015931722549 </data>
                  <data bit_width="16"> 0.157305735800918 </data>
                  <data bit_width="32"> 0.468288840178214 </data>
                  <data bit_width="64"> 1.41029851083376 </data>
                  <data bit_width="128"> 5.2416393932903 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 0.0456015931722549 </data>
                    <data bit_width="16"> 0.157305735800918 </data>
                    <data bit_width="32"> 0.468288840178214 </data>
                    <data bit_width="64"> 1.41029851083376 </data>
                    <data bit_width="128"> 5.2416393932903 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 0.0491116324898612 </data>
                    <data bit_width="16"> 0.188537633756021 </data>
                    <data bit_width="32"> 0.641681106604977 </data>
                    <data bit_width="64"> 1.99871664976866 </data>
                    <data bit_width="128"> 7.00404362064698 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 0.0476324993811999 </data>
                    <data bit_width="16"> 0.182413345376135 </data>
                    <data bit_width="32"> 0.550974039431846 </data>
                    <data bit_width="64"> 1.62255224386436 </data>
                    <data bit_width="128"> 6.02069254155481 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,16">
                <max>
                  <data bit_width="16"> 0.0932829120732659 </data>
                  <data bit_width="32"> 0.386070111479218 </data>
                  <data bit_width="64"> 1.2856225162316 </data>
                  <data bit_width="128"> 4.17257669099027 </data>
                </max>
                <min>
                  <data bit_width="16"> 0.0878354072656651 </data>
                  <data bit_width="32"> 0.300107414653186 </data>
                  <data bit_width="64"> 0.976351693370271 </data>
                  <data bit_width="128"> 2.91883362916738 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 0.0878354072656651 </data>
                    <data bit_width="32"> 0.300107414653186 </data>
                    <data bit_width="64"> 0.976351693370271 </data>
                    <data bit_width="128"> 2.91883362916738 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 0.0932829120732659 </data>
                    <data bit_width="32"> 0.386070111479218 </data>
                    <data bit_width="64"> 1.2856225162316 </data>
                    <data bit_width="128"> 4.17257669099027 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 0.0912087791074046 </data>
                    <data bit_width="32"> 0.374616243502599 </data>
                    <data bit_width="64"> 1.10890702314312 </data>
                    <data bit_width="128"> 3.57207238009558 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,32">
                <max>
                  <data bit_width="32"> 0.179432345395175 </data>
                  <data bit_width="64"> 0.768935880409741 </data>
                  <data bit_width="128"> 2.59594520644123 </data>
                </max>
                <min>
                  <data bit_width="32"> 0.17107862259858 </data>
                  <data bit_width="64"> 0.626924988099998 </data>
                  <data bit_width="128"> 2.12897774295044 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="32"> 0.17107862259858 </data>
                    <data bit_width="64"> 0.626924988099998 </data>
                    <data bit_width="128"> 2.12897774295044 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="32"> 0.171867477056796 </data>
                    <data bit_width="64"> 0.768935880409741 </data>
                    <data bit_width="128"> 2.59594520644123 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="32"> 0.179432345395175 </data>
                    <data bit_width="64"> 0.731922632851621 </data>
                    <data bit_width="128"> 2.56829443627311 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,64">
                <max>
                  <data bit_width="64"> 0.365044324651092 </data>
                  <data bit_width="128"> 1.73671393609223 </data>
                </max>
                <min>
                  <data bit_width="64"> 0.351432971335275 </data>
                  <data bit_width="128"> 1.31958296014927 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="64"> 0.351432971335275 </data>
                    <data bit_width="128"> 1.31958296014927 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="64"> 0.358229394670703 </data>
                    <data bit_width="128"> 1.49189092029855 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="64"> 0.365044324651092 </data>
                    <data bit_width="128"> 1.73671393609223 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,128">
                <max>
                  <data bit_width="128"> 0.908172758991641 </data>
                </max>
                <min>
                  <data bit_width="128"> 0.701261650339864 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="128"> 0.701261650339864 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="128"> 0.776010629081701 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="128"> 0.908172758991641 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,8">
                <max>
                  <data bit_width="8"> 0.0504726880676301 </data>
                  <data bit_width="16"> 0.189898696473791 </data>
                  <data bit_width="32"> 0.643448558909769 </data>
                  <data bit_width="64"> 2.00734972939396 </data>
                  <data bit_width="128"> 7.00441363645018 </data>
                </max>
                <min>
                  <data bit_width="8"> 0.0469626485120238 </data>
                  <data bit_width="16"> 0.158666798518688 </data>
                  <data bit_width="32"> 0.469937350535976 </data>
                  <data bit_width="64"> 1.41212441737591 </data>
                  <data bit_width="128"> 5.24362892485863 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 0.0469626485120238 </data>
                    <data bit_width="16"> 0.158666798518688 </data>
                    <data bit_width="32"> 0.469937350535976 </data>
                    <data bit_width="64"> 1.41212441737591 </data>
                    <data bit_width="128"> 5.24362892485863 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 0.0504726880676301 </data>
                    <data bit_width="16"> 0.189898696473791 </data>
                    <data bit_width="32"> 0.643448558909769 </data>
                    <data bit_width="64"> 2.00734972939396 </data>
                    <data bit_width="128"> 7.00441363645018 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 0.0489935549589688 </data>
                    <data bit_width="16"> 0.183774408093905 </data>
                    <data bit_width="32"> 0.552622549789608 </data>
                    <data bit_width="64"> 1.6243781506445 </data>
                    <data bit_width="128"> 6.02804172235868 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,16">
                <max>
                  <data bit_width="16"> 0.094643974791036 </data>
                  <data bit_width="32"> 0.38771856400297 </data>
                  <data bit_width="64"> 1.28857892295463 </data>
                  <data bit_width="128"> 4.17410323822852 </data>
                </max>
                <min>
                  <data bit_width="16"> 0.0891964554654329 </data>
                  <data bit_width="32"> 0.301468477370956 </data>
                  <data bit_width="64"> 0.978291719026675 </data>
                  <data bit_width="128"> 2.92092170750747 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 0.0891964554654329 </data>
                    <data bit_width="32"> 0.301468477370956 </data>
                    <data bit_width="64"> 0.978291719026675 </data>
                    <data bit_width="128"> 2.92092170750747 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 0.094643974791036 </data>
                    <data bit_width="32"> 0.38771856400297 </data>
                    <data bit_width="64"> 1.28857892295463 </data>
                    <data bit_width="128"> 4.17410323822852 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 0.0925698418251747 </data>
                    <data bit_width="32"> 0.375820682917309 </data>
                    <data bit_width="64"> 1.11073304582929 </data>
                    <data bit_width="128"> 3.57380345861655 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,32">
                <max>
                  <data bit_width="32"> 0.180793408112945 </data>
                  <data bit_width="64"> 0.770703390786542 </data>
                  <data bit_width="128"> 2.59708128462901 </data>
                </max>
                <min>
                  <data bit_width="32"> 0.17243968531635 </data>
                  <data bit_width="64"> 0.628676461320234 </data>
                  <data bit_width="128"> 2.13105420022467 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="32"> 0.17243968531635 </data>
                    <data bit_width="64"> 0.628676461320234 </data>
                    <data bit_width="128"> 2.13105420022467 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="32"> 0.173228539774566 </data>
                    <data bit_width="64"> 0.770703390786542 </data>
                    <data bit_width="128"> 2.59708128462901 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="32"> 0.180793408112945 </data>
                    <data bit_width="64"> 0.733571085137374 </data>
                    <data bit_width="128"> 2.5703825148512 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,64">
                <max>
                  <data bit_width="64"> 0.366692806210849 </data>
                  <data bit_width="128"> 1.73880201443232 </data>
                </max>
                <min>
                  <data bit_width="64"> 0.352978431722549 </data>
                  <data bit_width="128"> 1.32140898283544 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="64"> 0.352978431722549 </data>
                    <data bit_width="128"> 1.32140898283544 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="64"> 0.35987787623046 </data>
                    <data bit_width="128"> 1.49335994292759 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="64"> 0.366692806210849 </data>
                    <data bit_width="128"> 1.73880201443232 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,128">
                <max>
                  <data bit_width="128"> 0.909998781915805 </data>
                </max>
                <min>
                  <data bit_width="128"> 0.702910160697626 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="128"> 0.702910160697626 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="128"> 0.777836651767864 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="128"> 0.909998781915805 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,8">
                <max>
                  <data bit_width="8"> 0.0531947989851678 </data>
                  <data bit_width="16"> 0.192620807391329 </data>
                  <data bit_width="32"> 0.646864580120333 </data>
                  <data bit_width="64"> 2.00837238580758 </data>
                  <data bit_width="128"> 7.01343486034158 </data>
                </max>
                <min>
                  <data bit_width="8"> 0.0496847594295615 </data>
                  <data bit_width="16"> 0.161388894918223 </data>
                  <data bit_width="32"> 0.47323431341749 </data>
                  <data bit_width="64"> 1.41577646274823 </data>
                  <data bit_width="128"> 5.24788596466175 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 0.0496847594295615 </data>
                    <data bit_width="16"> 0.161388894918223 </data>
                    <data bit_width="32"> 0.47323431341749 </data>
                    <data bit_width="64"> 1.41577646274823 </data>
                    <data bit_width="128"> 5.24788596466175 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 0.0531947989851678 </data>
                    <data bit_width="16"> 0.192620807391329 </data>
                    <data bit_width="32"> 0.646864580120333 </data>
                    <data bit_width="64"> 2.00837238580758 </data>
                    <data bit_width="128"> 7.01343486034158 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 0.0517156658765065 </data>
                    <data bit_width="16"> 0.186496519011443 </data>
                    <data bit_width="32"> 0.555919512671122 </data>
                    <data bit_width="64"> 1.62879881523581 </data>
                    <data bit_width="128"> 6.02908111303098 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,16">
                <max>
                  <data bit_width="16"> 0.0973660857085737 </data>
                  <data bit_width="32"> 0.391491526960644 </data>
                  <data bit_width="64"> 1.2923162673026 </data>
                  <data bit_width="128"> 4.18108426272348 </data>
                </max>
                <min>
                  <data bit_width="16"> 0.0919185663829706 </data>
                  <data bit_width="32"> 0.304190602806496 </data>
                  <data bit_width="64"> 0.982057883751261 </data>
                  <data bit_width="128"> 2.92509786442566 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 0.0919185663829706 </data>
                    <data bit_width="32"> 0.304190602806496 </data>
                    <data bit_width="64"> 0.982057883751261 </data>
                    <data bit_width="128"> 2.92509786442566 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 0.0973660857085737 </data>
                    <data bit_width="32"> 0.391491526960644 </data>
                    <data bit_width="64"> 1.2923162673026 </data>
                    <data bit_width="128"> 4.18108426272348 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 0.0952919527427124 </data>
                    <data bit_width="32"> 0.379117645798823 </data>
                    <data bit_width="64"> 1.11438509143961 </data>
                    <data bit_width="128"> 3.57887211567754 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,32">
                <max>
                  <data bit_width="32"> 0.183515519030483 </data>
                  <data bit_width="64"> 0.773524353829897 </data>
                  <data bit_width="128"> 2.59905594119495 </data>
                </max>
                <min>
                  <data bit_width="32"> 0.175161796233887 </data>
                  <data bit_width="64"> 0.63207650344624 </data>
                  <data bit_width="128"> 2.13521896860303 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="32"> 0.175161796233887 </data>
                    <data bit_width="64"> 0.63207650344624 </data>
                    <data bit_width="128"> 2.13521896860303 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="32"> 0.175950650692104 </data>
                    <data bit_width="64"> 0.773524353829897 </data>
                    <data bit_width="128"> 2.59905594119495 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="32"> 0.183515519030483 </data>
                    <data bit_width="64"> 0.736868106090897 </data>
                    <data bit_width="128"> 2.57756621113459 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,64">
                <max>
                  <data bit_width="64"> 0.369989769092363 </data>
                  <data bit_width="128"> 1.74279967132195 </data>
                </max>
                <min>
                  <data bit_width="64"> 0.356275394604063 </data>
                  <data bit_width="128"> 1.32483279021725 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="64"> 0.356275394604063 </data>
                    <data bit_width="128"> 1.32483279021725 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="64"> 0.363174839111974 </data>
                    <data bit_width="128"> 1.49677387235582 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="64"> 0.369989769092363 </data>
                    <data bit_width="128"> 1.74279967132195 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,128">
                <max>
                  <data bit_width="128"> 0.913650769216123 </data>
                </max>
                <min>
                  <data bit_width="128"> 0.70620712381714 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="128"> 0.70620712381714 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="128"> 0.781488639306182 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="128"> 0.913650769216123 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,8">
                <max>
                  <data bit_width="8"> 0.0586390208202433 </data>
                  <data bit_width="16"> 0.197827029188325 </data>
                  <data bit_width="32"> 0.650186005359761 </data>
                  <data bit_width="64"> 2.01363069914891 </data>
                  <data bit_width="128"> 7.02430523314484 </data>
                </max>
                <min>
                  <data bit_width="8"> 0.055128981264637 </data>
                  <data bit_width="16"> 0.166918183202909 </data>
                  <data bit_width="32"> 0.479828239418518 </data>
                  <data bit_width="64"> 1.42308055396889 </data>
                  <data bit_width="128"> 5.25649254798081 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 0.055128981264637 </data>
                    <data bit_width="16"> 0.166918183202909 </data>
                    <data bit_width="32"> 0.479828239418518 </data>
                    <data bit_width="64"> 1.42308055396889 </data>
                    <data bit_width="128"> 5.25649254798081 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 0.0586390208202433 </data>
                    <data bit_width="16"> 0.197827029188325 </data>
                    <data bit_width="32"> 0.650186005359761 </data>
                    <data bit_width="64"> 2.01363069914891 </data>
                    <data bit_width="128"> 7.02430523314484 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 0.056862387663982 </data>
                    <data bit_width="16"> 0.191643240798919 </data>
                    <data bit_width="32"> 0.562675959616153 </data>
                    <data bit_width="64"> 1.63610290621846 </data>
                    <data bit_width="128"> 6.04038890396222 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,16">
                <max>
                  <data bit_width="16"> 0.102810307543649 </data>
                  <data bit_width="32"> 0.397609481921517 </data>
                  <data bit_width="64"> 1.29846405937625 </data>
                  <data bit_width="128"> 4.1868943455951 </data>
                </max>
                <min>
                  <data bit_width="16"> 0.0973627882180461 </data>
                  <data bit_width="32"> 0.309634824641572 </data>
                  <data bit_width="64"> 0.989247855619657 </data>
                  <data bit_width="128"> 2.93345017826203 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 0.0973627882180461 </data>
                    <data bit_width="32"> 0.309634824641572 </data>
                    <data bit_width="64"> 0.989247855619657 </data>
                    <data bit_width="128"> 2.93345017826203 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 0.102810307543649 </data>
                    <data bit_width="32"> 0.397609481921517 </data>
                    <data bit_width="64"> 1.29846405937625 </data>
                    <data bit_width="128"> 4.1868943455951 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 0.100736174339788 </data>
                    <data bit_width="32"> 0.385711600835856 </data>
                    <data bit_width="64"> 1.12168906627825 </data>
                    <data bit_width="128"> 3.58692692946631 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,32">
                <max>
                  <data bit_width="32"> 0.188959740865559 </data>
                  <data bit_width="64"> 0.780832279707165 </data>
                  <data bit_width="128"> 2.60818175515508 </data>
                </max>
                <min>
                  <data bit_width="32"> 0.180606018068963 </data>
                  <data bit_width="64"> 0.638670429447269 </data>
                  <data bit_width="128"> 2.14345228242037 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="32"> 0.180606018068963 </data>
                    <data bit_width="64"> 0.638670429447269 </data>
                    <data bit_width="128"> 2.14345228242037 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="32"> 0.18139487252718 </data>
                    <data bit_width="64"> 0.780832279707165 </data>
                    <data bit_width="128"> 2.60818175515508 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="32"> 0.188959740865559 </data>
                    <data bit_width="64"> 0.743462032091925 </data>
                    <data bit_width="128"> 2.58291098560576 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,64">
                <max>
                  <data bit_width="64"> 0.376583695093391 </data>
                  <data bit_width="128"> 1.75115198515832 </data>
                </max>
                <min>
                  <data bit_width="64"> 0.362972370575579 </data>
                  <data bit_width="128"> 1.3321368811999 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="64"> 0.362972370575579 </data>
                    <data bit_width="128"> 1.3321368811999 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="64"> 0.369768764875002 </data>
                    <data bit_width="128"> 1.50348296324327 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="64"> 0.376583695093391 </data>
                    <data bit_width="128"> 1.75115198515832 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,128">
                <max>
                  <data bit_width="128"> 0.920954860198778 </data>
                </max>
                <min>
                  <data bit_width="128"> 0.712595007473201 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="128"> 0.712595007473201 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="128"> 0.788792672216827 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="128"> 0.920954860198778 </data>
                  </priority>
                </typ>
              </parameters>
            </est_index>

            <est_index name="aspect_ratio">
              <!-- Dummy yet -->
            </est_index>

            <est_index name="height">
              <!-- Dummy yet -->
            </est_index>

            <est_index name="width">
              <!-- Dummy yet -->
            </est_index>
          </est_type>

          <est_type name="timing">
            <est_index name="delay">
              <unit> ns </unit>

              <parameters name="16,8">
                <max>
                  <data bit_width="8"> 1.11 </data>
                  <data bit_width="16"> 3.74 </data>
                  <data bit_width="32"> 5.89 </data>
                  <data bit_width="64"> 8.40 </data>
                  <data bit_width="128"> 12.90 </data>
                </max>
                <min>
                  <data bit_width="8"> 1.03 </data>
                  <data bit_width="16"> 1.85 </data>
                  <data bit_width="32"> 3.24 </data>
                  <data bit_width="64"> 4.22 </data>
                  <data bit_width="128"> 5.34 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 1.11 </data>
                    <data bit_width="16"> 2.64 </data>
                    <data bit_width="32"> 4.12 </data>
                    <data bit_width="64"> 7.09 </data>
                    <data bit_width="128"> 10.53 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 1.03 </data>
                    <data bit_width="16"> 1.85 </data>
                    <data bit_width="32"> 3.24 </data>
                    <data bit_width="64"> 4.22 </data>
                    <data bit_width="128"> 5.34 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 1.04 </data>
                    <data bit_width="16"> 3.74 </data>
                    <data bit_width="32"> 5.89 </data>
                    <data bit_width="64"> 8.40 </data>
                    <data bit_width="128"> 12.90 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,16">
                <max>
                  <data bit_width="16"> 1.54 </data>
                  <data bit_width="32"> 3.86 </data>
                  <data bit_width="64"> 6.52 </data>
                  <data bit_width="128"> 10.49 </data>
                </max>
                <min>
                  <data bit_width="16"> 1.03 </data>
                  <data bit_width="32"> 1.87 </data>
                  <data bit_width="64"> 3.02 </data>
                  <data bit_width="128"> 4.53 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 1.11 </data>
                    <data bit_width="32"> 3.10 </data>
                    <data bit_width="64"> 5.08 </data>
                    <data bit_width="128"> 9.20 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 1.03 </data>
                    <data bit_width="32"> 1.87 </data>
                    <data bit_width="64"> 3.02 </data>
                    <data bit_width="128"> 4.53 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 1.54 </data>
                    <data bit_width="32"> 3.86 </data>
                    <data bit_width="64"> 6.52 </data>
                    <data bit_width="128"> 10.49 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,32">
                <max>
                  <data bit_width="32"> 1.63 </data>
                  <data bit_width="64"> 5.23 </data>
                  <data bit_width="128"> 8.61 </data>
                </max>
                <min>
                  <data bit_width="32"> 1.04 </data>
                  <data bit_width="64"> 1.86 </data>
                  <data bit_width="128"> 3.18 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="32"> 1.11 </data>
                    <data bit_width="64"> 4.91 </data>
                    <data bit_width="128"> 8.01 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="32"> 1.04 </data>
                    <data bit_width="64"> 1.86 </data>
                    <data bit_width="128"> 3.18 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="32"> 1.63 </data>
                    <data bit_width="64"> 5.23 </data>
                    <data bit_width="128"> 8.61 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,64">
                <max>
                  <data bit_width="64"> 1.80 </data>
                  <data bit_width="128"> 5.75 </data>
                </max>
                <min>
                  <data bit_width="64"> 1.05 </data>
                  <data bit_width="128"> 2.04 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="64"> 1.80 </data>
                    <data bit_width="128"> 5.37 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="64"> 1.05 </data>
                    <data bit_width="128"> 2.04 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="64"> 1.56 </data>
                    <data bit_width="128"> 5.75 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,128">
                <max>
                  <data bit_width="128"> 2.84 </data>
                </max>
                <min>
                  <data bit_width="128"> 1.03 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="128"> 2.01 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="128"> 1.03 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="128"> 2.84 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,8">
                <max>
                  <data bit_width="8"> 1.11 </data>
                  <data bit_width="16"> 3.74 </data>
                  <data bit_width="32"> 5.89 </data>
                  <data bit_width="64"> 8.40 </data>
                  <data bit_width="128"> 12.89 </data>
                </max>
                <min>
                  <data bit_width="8"> 1.03 </data>
                  <data bit_width="16"> 1.85 </data>
                  <data bit_width="32"> 3.24 </data>
                  <data bit_width="64"> 4.22 </data>
                  <data bit_width="128"> 5.34 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 1.11 </data>
                    <data bit_width="16"> 2.64 </data>
                    <data bit_width="32"> 4.12 </data>
                    <data bit_width="64"> 7.09 </data>
                    <data bit_width="128"> 10.53 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 1.03 </data>
                    <data bit_width="16"> 1.85 </data>
                    <data bit_width="32"> 3.24 </data>
                    <data bit_width="64"> 4.22 </data>
                    <data bit_width="128"> 5.34 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 1.04 </data>
                    <data bit_width="16"> 3.74 </data>
                    <data bit_width="32"> 5.89 </data>
                    <data bit_width="64"> 8.40 </data>
                    <data bit_width="128"> 12.89 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,16">
                <max>
                  <data bit_width="16"> 1.54 </data>
                  <data bit_width="32"> 3.86 </data>
                  <data bit_width="64"> 6.52 </data>
                  <data bit_width="128"> 10.49 </data>
                </max>
                <min>
                  <data bit_width="16"> 1.03 </data>
                  <data bit_width="32"> 1.87 </data>
                  <data bit_width="64"> 3.02 </data>
                  <data bit_width="128"> 4.53 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 1.11 </data>
                    <data bit_width="32"> 3.10 </data>
                    <data bit_width="64"> 5.08 </data>
                    <data bit_width="128"> 9.20 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 1.03 </data>
                    <data bit_width="32"> 1.87 </data>
                    <data bit_width="64"> 3.02 </data>
                    <data bit_width="128"> 4.53 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 1.54 </data>
                    <data bit_width="32"> 3.86 </data>
                    <data bit_width="64"> 6.52 </data>
                    <data bit_width="128"> 10.49 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,32">
                <max>
                  <data bit_width="32"> 1.63 </data>
                  <data bit_width="64"> 5.23 </data>
                  <data bit_width="128"> 8.61 </data>
                </max>
                <min>
                  <data bit_width="32"> 1.04 </data>
                  <data bit_width="64"> 1.86 </data>
                  <data bit_width="128"> 3.18 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="32"> 1.11 </data>
                    <data bit_width="64"> 4.91 </data>
                    <data bit_width="128"> 8.01 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="32"> 1.04 </data>
                    <data bit_width="64"> 1.86 </data>
                    <data bit_width="128"> 3.18 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="32"> 1.63 </data>
                    <data bit_width="64"> 5.23 </data>
                    <data bit_width="128"> 8.61 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,64">
                <max>
                  <data bit_width="64"> 1.80 </data>
                  <data bit_width="128"> 5.75 </data>
                </max>
                <min>
                  <data bit_width="64"> 1.05 </data>
                  <data bit_width="128"> 2.04 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="64"> 1.80 </data>
                    <data bit_width="128"> 5.37 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="64"> 1.05 </data>
                    <data bit_width="128"> 2.04 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="64"> 1.56 </data>
                    <data bit_width="128"> 5.75 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,128">
                <max>
                  <data bit_width="128"> 2.84 </data>
                </max>
                <min>
                  <data bit_width="128"> 1.03 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="128"> 2.01 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="128"> 1.03 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="128"> 2.84 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,8">
                <max>
                  <data bit_width="8"> 1.11 </data>
                  <data bit_width="16"> 3.74 </data>
                  <data bit_width="32"> 5.90 </data>
                  <data bit_width="64"> 8.43 </data>
                  <data bit_width="128"> 12.92 </data>
                </max>
                <min>
                  <data bit_width="8"> 1.03 </data>
                  <data bit_width="16"> 1.85 </data>
                  <data bit_width="32"> 3.24 </data>
                  <data bit_width="64"> 4.21 </data>
                  <data bit_width="128"> 5.32 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 1.11 </data>
                    <data bit_width="16"> 2.64 </data>
                    <data bit_width="32"> 4.12 </data>
                    <data bit_width="64"> 7.09 </data>
                    <data bit_width="128"> 10.53 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 1.03 </data>
                    <data bit_width="16"> 1.85 </data>
                    <data bit_width="32"> 3.24 </data>
                    <data bit_width="64"> 4.21 </data>
                    <data bit_width="128"> 5.32 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 1.04 </data>
                    <data bit_width="16"> 3.74 </data>
                    <data bit_width="32"> 5.90 </data>
                    <data bit_width="64"> 8.43 </data>
                    <data bit_width="128"> 12.92 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,16">
                <max>
                  <data bit_width="16"> 1.54 </data>
                  <data bit_width="32"> 3.86 </data>
                  <data bit_width="64"> 6.53 </data>
                  <data bit_width="128"> 10.49 </data>
                </max>
                <min>
                  <data bit_width="16"> 1.03 </data>
                  <data bit_width="32"> 1.87 </data>
                  <data bit_width="64"> 3.02 </data>
                  <data bit_width="128"> 4.53 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 1.11 </data>
                    <data bit_width="32"> 3.10 </data>
                    <data bit_width="64"> 5.07 </data>
                    <data bit_width="128"> 9.20 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 1.03 </data>
                    <data bit_width="32"> 1.87 </data>
                    <data bit_width="64"> 3.02 </data>
                    <data bit_width="128"> 4.53 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 1.54 </data>
                    <data bit_width="32"> 3.86 </data>
                    <data bit_width="64"> 6.53 </data>
                    <data bit_width="128"> 10.49 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,32">
                <max>
                  <data bit_width="32"> 1.63 </data>
                  <data bit_width="64"> 5.23 </data>
                  <data bit_width="128"> 9.03 </data>
                </max>
                <min>
                  <data bit_width="32"> 1.04 </data>
                  <data bit_width="64"> 1.86 </data>
                  <data bit_width="128"> 3.18 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="32"> 1.11 </data>
                    <data bit_width="64"> 4.91 </data>
                    <data bit_width="128"> 8.01 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="32"> 1.04 </data>
                    <data bit_width="64"> 1.86 </data>
                    <data bit_width="128"> 3.18 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="32"> 1.63 </data>
                    <data bit_width="64"> 5.23 </data>
                    <data bit_width="128"> 9.03 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,64">
                <max>
                  <data bit_width="64"> 1.80 </data>
                  <data bit_width="128"> 5.75 </data>
                </max>
                <min>
                  <data bit_width="64"> 1.05 </data>
                  <data bit_width="128"> 2.04 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="64"> 1.80 </data>
                    <data bit_width="128"> 5.37 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="64"> 1.05 </data>
                    <data bit_width="128"> 2.04 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="64"> 1.56 </data>
                    <data bit_width="128"> 5.75 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,128">
                <max>
                  <data bit_width="128"> 2.84 </data>
                </max>
                <min>
                  <data bit_width="128"> 1.03 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="128"> 2.01 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="128"> 1.03 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="128"> 2.84 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,8">
                <max>
                  <data bit_width="8"> 1.11 </data>
                  <data bit_width="16"> 3.74 </data>
                  <data bit_width="32"> 5.89 </data>
                  <data bit_width="64"> 8.43 </data>
                  <data bit_width="128"> 12.90 </data>
                </max>
                <min>
                  <data bit_width="8"> 1.03 </data>
                  <data bit_width="16"> 1.85 </data>
                  <data bit_width="32"> 3.24 </data>
                  <data bit_width="64"> 4.21 </data>
                  <data bit_width="128"> 5.34 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 1.11 </data>
                    <data bit_width="16"> 2.64 </data>
                    <data bit_width="32"> 4.12 </data>
                    <data bit_width="64"> 7.09 </data>
                    <data bit_width="128"> 10.53 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 1.03 </data>
                    <data bit_width="16"> 1.85 </data>
                    <data bit_width="32"> 3.24 </data>
                    <data bit_width="64"> 4.21 </data>
                    <data bit_width="128"> 5.34 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 1.04 </data>
                    <data bit_width="16"> 3.74 </data>
                    <data bit_width="32"> 5.89 </data>
                    <data bit_width="64"> 8.43 </data>
                    <data bit_width="128"> 12.90 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,16">
                <max>
                  <data bit_width="16"> 1.54 </data>
                  <data bit_width="32"> 3.86 </data>
                  <data bit_width="64"> 6.52 </data>
                  <data bit_width="128"> 10.49 </data>
                </max>
                <min>
                  <data bit_width="16"> 1.03 </data>
                  <data bit_width="32"> 1.87 </data>
                  <data bit_width="64"> 3.02 </data>
                  <data bit_width="128"> 4.53 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 1.11 </data>
                    <data bit_width="32"> 3.10 </data>
                    <data bit_width="64"> 5.07 </data>
                    <data bit_width="128"> 9.20 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 1.03 </data>
                    <data bit_width="32"> 1.87 </data>
                    <data bit_width="64"> 3.02 </data>
                    <data bit_width="128"> 4.53 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 1.54 </data>
                    <data bit_width="32"> 3.86 </data>
                    <data bit_width="64"> 6.52 </data>
                    <data bit_width="128"> 10.49 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,32">
                <max>
                  <data bit_width="32"> 1.63 </data>
                  <data bit_width="64"> 5.23 </data>
                  <data bit_width="128"> 8.61 </data>
                </max>
                <min>
                  <data bit_width="32"> 1.04 </data>
                  <data bit_width="64"> 1.86 </data>
                  <data bit_width="128"> 3.18 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="32"> 1.11 </data>
                    <data bit_width="64"> 4.91 </data>
                    <data bit_width="128"> 8.01 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="32"> 1.04 </data>
                    <data bit_width="64"> 1.86 </data>
                    <data bit_width="128"> 3.18 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="32"> 1.63 </data>
                    <data bit_width="64"> 5.23 </data>
                    <data bit_width="128"> 8.61 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,64">
                <max>
                  <data bit_width="64"> 1.80 </data>
                  <data bit_width="128"> 5.75 </data>
                </max>
                <min>
                  <data bit_width="64"> 1.05 </data>
                  <data bit_width="128"> 2.04 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="64"> 1.80 </data>
                    <data bit_width="128"> 5.37 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="64"> 1.05 </data>
                    <data bit_width="128"> 2.04 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="64"> 1.56 </data>
                    <data bit_width="128"> 5.75 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,128">
                <max>
                  <data bit_width="128"> 2.84 </data>
                </max>
                <min>
                  <data bit_width="128"> 1.03 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="128"> 2.01 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="128"> 1.03 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="128"> 2.84 </data>
                  </priority>
                </typ>
              </parameters>
            </est_index>

            <est_index name="delay_fullpath">
            <!-- Dummy yet -->
            </est_index>
          </est_type>

          <est_type name="power">
            <est_index name="static_power">
              <unit> mW </unit>
              <parameters name="16,8">
                <max>
                  <data bit_width="8"> 9.7059 </data>
                  <data bit_width="16"> 38.2709 </data>
                  <data bit_width="32"> 131.8512 </data>
                  <data bit_width="64"> 379.1205 </data>
                  <data bit_width="128"> 925.8934 </data>
                </max>
                <min>
                  <data bit_width="8"> 7.6890 </data>
                  <data bit_width="16"> 26.8109 </data>
                  <data bit_width="32"> 88.7195 </data>
                  <data bit_width="64"> 242.9874 </data>
                  <data bit_width="128"> 675.2848 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 8.6937 </data>
                    <data bit_width="16"> 30.9092 </data>
                    <data bit_width="32"> 112.0353 </data>
                    <data bit_width="64"> 291.2534 </data>
                    <data bit_width="128"> 776.5723 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 9.7059 </data>
                    <data bit_width="16"> 38.2709 </data>
                    <data bit_width="32"> 131.8512 </data>
                    <data bit_width="64"> 379.1205 </data>
                    <data bit_width="128"> 925.8934 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 7.6890 </data>
                    <data bit_width="16"> 26.8109 </data>
                    <data bit_width="32"> 88.7195 </data>
                    <data bit_width="64"> 242.9874 </data>
                    <data bit_width="128"> 675.2848 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,16">
                <max>
                  <data bit_width="16"> 16.3745 </data>
                  <data bit_width="32"> 70.9144 </data>
                  <data bit_width="64"> 267.0685 </data>
                  <data bit_width="128"> 717.6888 </data>
                </max>
                <min>
                  <data bit_width="16"> 14.1729 </data>
                  <data bit_width="32"> 53.7902 </data>
                  <data bit_width="64"> 181.4695 </data>
                  <data bit_width="128"> 535.0379 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 16.2562 </data>
                    <data bit_width="32"> 58.5368 </data>
                    <data bit_width="64"> 226.9377 </data>
                    <data bit_width="128"> 619.7018 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 16.3745 </data>
                    <data bit_width="32"> 70.9144 </data>
                    <data bit_width="64"> 267.0685 </data>
                    <data bit_width="128"> 717.6888 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 14.1729 </data>
                    <data bit_width="32"> 53.7902 </data>
                    <data bit_width="64"> 181.4695 </data>
                    <data bit_width="128"> 535.0379 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,32">
                <max>
                  <data bit_width="32"> 30.8916 </data>
                  <data bit_width="64"> 138.8173 </data>
                  <data bit_width="128"> 518.9013 </data>
                </max>
                <min>
                  <data bit_width="32"> 27.5147 </data>
                  <data bit_width="64"> 104.2332 </data>
                  <data bit_width="128"> 386.3272 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="32"> 30.7092 </data>
                    <data bit_width="64"> 117.6191 </data>
                    <data bit_width="128"> 477.1381 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="32"> 30.8916 </data>
                    <data bit_width="64"> 138.8173 </data>
                    <data bit_width="128"> 518.9013 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="32"> 27.5147 </data>
                    <data bit_width="64"> 104.2332 </data>
                    <data bit_width="128"> 386.3272 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,64">
                <max>
                  <data bit_width="64"> 61.7459 </data>
                  <data bit_width="128"> 266.2877 </data>
                </max>
                <min>
                  <data bit_width="64"> 56.7440 </data>
                  <data bit_width="128"> 225.7758 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="64"> 61.7459 </data>
                    <data bit_width="128"> 242.8607 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="64"> 59.7873 </data>
                    <data bit_width="128"> 266.2877 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="64"> 56.7440 </data>
                    <data bit_width="128"> 225.7758 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,128">
                <max>
                  <data bit_width="128"> 124.6186 </data>
                </max>
                <min>
                  <data bit_width="128"> 115.9140 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="128"> 121.9134 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="128"> 124.6186 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="128"> 115.9140 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,8">
                <max>
                  <data bit_width="8"> 10.0460 </data>
                  <data bit_width="16"> 38.6110 </data>
                  <data bit_width="32"> 132.3105 </data>
                  <data bit_width="64"> 381.6944 </data>
                  <data bit_width="128"> 924.7305 </data>
                </max>
                <min>
                  <data bit_width="8"> 8.0291 </data>
                  <data bit_width="16"> 27.1511 </data>
                  <data bit_width="32"> 89.1315 </data>
                  <data bit_width="64"> 243.4437 </data>
                  <data bit_width="128"> 675.6988 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 9.0338 </data>
                    <data bit_width="16"> 31.2493 </data>
                    <data bit_width="32"> 112.4472 </data>
                    <data bit_width="64"> 291.7097 </data>
                    <data bit_width="128"> 777.0349 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 10.0460 </data>
                    <data bit_width="16"> 38.6110 </data>
                    <data bit_width="32"> 132.3105 </data>
                    <data bit_width="64"> 381.6944 </data>
                    <data bit_width="128"> 924.7305 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 8.0291 </data>
                    <data bit_width="16"> 27.1511 </data>
                    <data bit_width="32"> 89.1315 </data>
                    <data bit_width="64"> 243.4437 </data>
                    <data bit_width="128"> 675.6988 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,16">
                <max>
                  <data bit_width="16"> 16.7146 </data>
                  <data bit_width="32"> 71.3264 </data>
                  <data bit_width="64"> 268.2347 </data>
                  <data bit_width="128"> 717.9545 </data>
                </max>
                <min>
                  <data bit_width="16"> 14.5124 </data>
                  <data bit_width="32"> 54.2184 </data>
                  <data bit_width="64"> 181.9258 </data>
                  <data bit_width="128"> 535.5337 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 16.5963 </data>
                    <data bit_width="32"> 58.8154 </data>
                    <data bit_width="64"> 227.5727 </data>
                    <data bit_width="128"> 620.2240 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 16.7146 </data>
                    <data bit_width="32"> 71.3264 </data>
                    <data bit_width="64"> 268.2347 </data>
                    <data bit_width="128"> 717.9545 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 14.5124 </data>
                    <data bit_width="32"> 54.2184 </data>
                    <data bit_width="64"> 181.9258 </data>
                    <data bit_width="128"> 535.5337 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,32">
                <max>
                  <data bit_width="32"> 31.2317 </data>
                  <data bit_width="64"> 139.2380 </data>
                  <data bit_width="128"> 519.9050 </data>
                </max>
                <min>
                  <data bit_width="32"> 27.8549 </data>
                  <data bit_width="64"> 104.7993 </data>
                  <data bit_width="128"> 386.8490 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="32"> 31.0500 </data>
                    <data bit_width="64"> 118.0957 </data>
                    <data bit_width="128"> 477.6496 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="32"> 31.2317 </data>
                    <data bit_width="64"> 139.2380 </data>
                    <data bit_width="128"> 519.9050 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="32"> 27.8549 </data>
                    <data bit_width="64"> 104.7993 </data>
                    <data bit_width="128"> 386.8490 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,64">
                <max>
                  <data bit_width="64"> 62.1187 </data>
                  <data bit_width="128"> 266.4648 </data>
                </max>
                <min>
                  <data bit_width="64"> 57.1560 </data>
                  <data bit_width="128"> 226.0893 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="64"> 62.1187 </data>
                    <data bit_width="128"> 243.3289 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="64"> 60.1993 </data>
                    <data bit_width="128"> 266.4648 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="64"> 57.1560 </data>
                    <data bit_width="128"> 226.0893 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,128">
                <max>
                  <data bit_width="128"> 125.0750 </data>
                </max>
                <min>
                  <data bit_width="128"> 116.3703 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="128"> 122.3272 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="128"> 125.0750 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="128"> 116.3703 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,8">
                <max>
                  <data bit_width="8"> 10.7263 </data>
                  <data bit_width="16"> 39.2913 </data>
                  <data bit_width="32"> 133.1610 </data>
                  <data bit_width="64"> 382.3527 </data>
                  <data bit_width="128"> 927.2910 </data>
                </max>
                <min>
                  <data bit_width="8"> 8.7094 </data>
                  <data bit_width="16"> 27.8313 </data>
                  <data bit_width="32"> 89.9552 </data>
                  <data bit_width="64"> 244.3810 </data>
                  <data bit_width="128"> 676.8214 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 9.7141 </data>
                    <data bit_width="16"> 31.9295 </data>
                    <data bit_width="32"> 113.2712 </data>
                    <data bit_width="64"> 292.6223 </data>
                    <data bit_width="128"> 778.0301 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 10.7263 </data>
                    <data bit_width="16"> 39.2913 </data>
                    <data bit_width="32"> 133.1610 </data>
                    <data bit_width="64"> 382.3527 </data>
                    <data bit_width="128"> 927.2910 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 8.7094 </data>
                    <data bit_width="16"> 27.8313 </data>
                    <data bit_width="32"> 89.9552 </data>
                    <data bit_width="64"> 244.3810 </data>
                    <data bit_width="128"> 676.8214 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,16">
                <max>
                  <data bit_width="16"> 17.3949 </data>
                  <data bit_width="32"> 72.2338 </data>
                  <data bit_width="64"> 269.2593 </data>
                  <data bit_width="128"> 719.2770 </data>
                </max>
                <min>
                  <data bit_width="16"> 15.1931 </data>
                  <data bit_width="32"> 55.0423 </data>
                  <data bit_width="64"> 182.8384 </data>
                  <data bit_width="128"> 536.5009 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 17.2766 </data>
                    <data bit_width="32"> 59.4957 </data>
                    <data bit_width="64"> 228.5377 </data>
                    <data bit_width="128"> 621.2673 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 17.3949 </data>
                    <data bit_width="32"> 72.2338 </data>
                    <data bit_width="64"> 269.2593 </data>
                    <data bit_width="128"> 719.2770 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 15.1931 </data>
                    <data bit_width="32"> 55.0423 </data>
                    <data bit_width="64"> 182.8384 </data>
                    <data bit_width="128"> 536.5009 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,32">
                <max>
                  <data bit_width="32"> 31.9120 </data>
                  <data bit_width="64"> 139.9771 </data>
                  <data bit_width="128"> 519.0173 </data>
                </max>
                <min>
                  <data bit_width="32"> 28.5352 </data>
                  <data bit_width="64"> 105.6233 </data>
                  <data bit_width="128"> 387.7830 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="32"> 31.7272 </data>
                    <data bit_width="64"> 118.9810 </data>
                    <data bit_width="128"> 478.6823 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="32"> 31.9120 </data>
                    <data bit_width="64"> 139.9771 </data>
                    <data bit_width="128"> 519.0173 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="32"> 28.5352 </data>
                    <data bit_width="64"> 105.6233 </data>
                    <data bit_width="128"> 387.7830 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,64">
                <max>
                  <data bit_width="64"> 62.9403 </data>
                  <data bit_width="128"> 267.3982 </data>
                </max>
                <min>
                  <data bit_width="64"> 57.9799 </data>
                  <data bit_width="128"> 227.1391 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="64"> 62.9403 </data>
                    <data bit_width="128"> 244.1557 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="64"> 61.0232 </data>
                    <data bit_width="128"> 267.3982 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="64"> 57.9799 </data>
                    <data bit_width="128"> 227.1391 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,128">
                <max>
                  <data bit_width="128"> 125.9875 </data>
                </max>
                <min>
                  <data bit_width="128"> 117.2814 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="128"> 123.1586 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="128"> 125.9875 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="128"> 117.2814 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,8">
                <max>
                  <data bit_width="8"> 12.0869 </data>
                  <data bit_width="16"> 40.6251 </data>
                  <data bit_width="32"> 134.2491 </data>
                  <data bit_width="64"> 383.1406 </data>
                  <data bit_width="128"> 931.3599 </data>
                </max>
                <min>
                  <data bit_width="8"> 10.0539 </data>
                  <data bit_width="16"> 29.2300 </data>
                  <data bit_width="32"> 91.6415 </data>
                  <data bit_width="64"> 246.1905 </data>
                  <data bit_width="128"> 679.0334 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 11.0746 </data>
                    <data bit_width="16"> 33.3492 </data>
                    <data bit_width="32"> 114.9701 </data>
                    <data bit_width="64"> 294.4477 </data>
                    <data bit_width="128"> 780.2841 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 12.0869 </data>
                    <data bit_width="16"> 40.6251 </data>
                    <data bit_width="32"> 134.2491 </data>
                    <data bit_width="64"> 383.1406 </data>
                    <data bit_width="128"> 931.3599 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 10.0539 </data>
                    <data bit_width="16"> 29.2300 </data>
                    <data bit_width="32"> 91.6415 </data>
                    <data bit_width="64"> 246.1905 </data>
                    <data bit_width="128"> 679.0334 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,16">
                <max>
                  <data bit_width="16"> 18.7554 </data>
                  <data bit_width="32"> 73.6428 </data>
                  <data bit_width="64"> 270.5666 </data>
                  <data bit_width="128"> 722.0201 </data>
                </max>
                <min>
                  <data bit_width="16"> 16.5530 </data>
                  <data bit_width="32"> 56.6383 </data>
                  <data bit_width="64"> 184.5386 </data>
                  <data bit_width="128"> 537.8710 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 18.6371 </data>
                    <data bit_width="32"> 60.8442 </data>
                    <data bit_width="64"> 230.1477 </data>
                    <data bit_width="128"> 623.3547 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 18.7554 </data>
                    <data bit_width="32"> 73.6428 </data>
                    <data bit_width="64"> 270.5666 </data>
                    <data bit_width="128"> 722.0201 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 16.5530 </data>
                    <data bit_width="32"> 56.6383 </data>
                    <data bit_width="64"> 184.5386 </data>
                    <data bit_width="128"> 537.8710 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,32">
                <max>
                  <data bit_width="32"> 33.2727 </data>
                  <data bit_width="64"> 141.4080 </data>
                  <data bit_width="128"> 523.0338 </data>
                </max>
                <min>
                  <data bit_width="32"> 29.8959 </data>
                  <data bit_width="64"> 107.4075 </data>
                  <data bit_width="128"> 389.7528 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="32"> 33.0892 </data>
                    <data bit_width="64"> 120.7265 </data>
                    <data bit_width="128"> 481.9712 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="32"> 33.2727 </data>
                    <data bit_width="64"> 141.4080 </data>
                    <data bit_width="128"> 523.0338 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="32"> 29.8959 </data>
                    <data bit_width="64"> 107.4075 </data>
                    <data bit_width="128"> 389.7528 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,64">
                <max>
                  <data bit_width="64"> 64.6288 </data>
                  <data bit_width="128"> 268.9437 </data>
                </max>
                <min>
                  <data bit_width="64"> 59.6278 </data>
                  <data bit_width="128"> 229.1398 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="64"> 64.6288 </data>
                    <data bit_width="128"> 246.1786 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="64"> 62.6612 </data>
                    <data bit_width="128"> 268.9437 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="64"> 59.6278 </data>
                    <data bit_width="128"> 229.1398 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,128">
                <max>
                  <data bit_width="128"> 127.8129 </data>
                </max>
                <min>
                  <data bit_width="128"> 119.1067 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="128"> 124.7137 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="128"> 127.8129 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="128"> 119.1067 </data>
                  </priority>
                </typ>
              </parameters>
            </est_index>
          </est_type>

          <est_type name="function_cycle">
            <!-- Dummy yet -->
          </est_type>

          <est_type name="function_power">
            <!-- Dummy yet -->
          </est_type>
        </library>
      </estimation_data>

      <estimation_method>
         
        <est_type name="shape">

          <est_index name="area">

            <parameters name="16,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(16,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(16,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(16,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(16,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(16,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(32,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(32,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(32,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(32,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(32,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(64,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(64,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(64,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(64,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(64,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(128,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(128,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(128,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(128,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(128,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

          </est_index>

           <est_index name="aspect_ratio">

             <!-- Dummy yet -->

           </est_index>
		
           <est_index name="height">

             <!-- Dummy yet -->

           </est_index>
		
           <est_index name="width">

             <!-- Dummy yet -->

           </est_index>
		
        </est_type>

        <est_type name="timing">

          <est_index name="delay">

            <parameters name="16,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(16,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(16,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(16,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(16,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(16,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(32,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(32,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(32,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(32,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(32,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(64,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(64,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(64,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(64,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(64,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(128,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(128,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(128,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(128,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(128,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

          </est_index>

          <est_index name="delay_fullpath">

            <parameters name="16,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(16,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="16,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(16,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="16,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(16,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="16,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(16,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="16,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(16,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="32,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(32,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="32,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(32,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="32,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(32,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="32,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(32,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="32,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(32,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="64,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(64,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="64,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(64,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="64,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(64,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="64,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(64,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="64,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(64,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="128,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(128,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="128,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(128,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="128,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(128,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="128,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(128,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="128,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(128,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

          </est_index>

        </est_type>

        <est_type name="power">

          <est_index name="static_power">

            <parameters name="16,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(16,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(16,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(16,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(16,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(16,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(32,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(32,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(32,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(32,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(32,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(64,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(64,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(64,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(64,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(64,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(128,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(128,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(128,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(128,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(128,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

          </est_index>

        </est_type>

        <est_type name="function_cycle">

        </est_type>

        <est_type name="function_power">

        </est_type>

    
      </estimation_method>

    </estimation>

  </model>
  <model>
    <design_level> rt </design_level>
    <version> 1.0 </version>
    <author> <![CDATA[ Kyoko UEDA ]]> </author>
    <affiliation> <![CDATA[ Osaka Univ. ]]> </affiliation>
    <model_info> <![CDATA[ (c)2001,PEAS3-Lite Project ]]> </model_info>

    <parameter>
      <parameter_value key="bit_width">
        <value> 8 </value>
        <value> 16 </value>
        <value> 32 </value>
        <value> 64 </value>
        <value> 128 </value>
      </parameter_value>
      <parameter_value key="address_space">
        <value> 16 </value>
        <value> 32 </value>
        <value> 64 </value>
        <value> 128 </value>
      </parameter_value>
      <parameter_value key="access_width">
        <value> 8 </value>
        <value> 16 </value>
        <value> 32 </value>
        <value> 64 </value>
        <value> 128 </value>
      </parameter_value>
    </parameter>

    <function_description>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates function definition for dmau in rt level
# parameter : bit_width address_space access_width

if ($#ARGV != 2){
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width address_space access_width\n";
    exit (100);
}
$bit_width = $ARGV[0];
$addr_space = $ARGV[1];
$access = $ARGV[2];

@bit_widths = (8, 16, 32, 64, 128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

@addr_spaces = (4, 8, 16, 32, 64, 128);
if (! grep($_ eq $addr_space, @addr_spaces)){
    print "address_space $addr_space is not supported.\n";
    exit (100);
}

@accesses = (8, 16, 32, 64, 128);
if (! grep($_ eq $access, @accesses)){
    print "access_width $access is not supported.\n";
    exit (100);
}

if ($bit_width < $access){
   print "The value of \"access_width\" must be less than the value of \"bit_width\".\n";
   exit(100);
}
 
$a_tmp = $access;
while ($bit_width != $a_tmp){
    if ($bit_width < $a_tmp){
	print "The value of \"bit_width\" must be 2^n * \"access_width\".\n";
	exit (100);
    }
    $a_tmp = $a_tmp * 2;
}

$b_1 = $bit_width - 1;
$a_1 = $addr_space - 1;

$b_range = "${b_1}:0";
$a_range = "${a_1}:0";

$wmode_num = $bit_width/$access;
$wmode_1 = $wmode_num - 1;

$acmode_num = &log2u($wmode_num);
$acmode_1 = $acmode_num - 1;

if ($acmode_num == 0){
    $acmode_str = "";
    $ext_str = "";
    $aerr_str = "";
    $wmode_str = "";
}
else{
    $wmode_str = "[$wmode_1:0]";
    if ($acmode_num == 1){
        $acmode_str = "ac_mode, ";
	$a_t_comma = "'";
    }
    else{
	$acmode_str = "ac_mode[$acmode_1:0], ";
	$a_t_comma = "\"";
    }
    $ext_str = "ext_mode, ";
    $aerr_str = "addr_err, ";
}

$b_str = $a_t_comma . &to_comp($wmode_1, $acmode_num) . $a_t_comma;
$b_h = $bit_width / 2;
$b_h_str = $a_t_comma . &to_comp($b_h/$access-1, $acmode_num) . $a_t_comma;
$b_b = 8;
$b_b_str = $a_t_comma . &to_comp(0, $acmode_num) . $a_t_comma;

if ($bit_width != $access){
    print "bit addr_err(bit_vector addr, bit_vector ac_mode);\n\n";
}

{
    print <<FHM_DL_FUNC
/** ${bit_width}-bit data memory access unit */
model dmau${bit_width}{
  port{
    in    reset;
    in    req, rw, ${acmode_str}${ext_str}addr[${a_range}], data_in[${b_range}];
    out   ${aerr_str}req_bus, w_mode_bus$wmode_str, addr_bus[${a_range}];
    inout data_bus[${b_range}];
    in    ack_bus;
    out   ack, data_out[${b_range}];
  }
  default_control{
    reset   = 0;
    req     = 0;
  }

  /** no operation */
  function nop : idle{
    control{
      in reset, req;
    }
    protocol{
      [reset ==0 && req == 0]{
      }
    }
  }

  /** reset */
  function reset : reset{
    assignment{
      reg = 0;
    }
    control{
      in reset;
    }
    protocol{
      [reset == 0]{
	store reg;
      }
    }
  }

FHM_DL_FUNC
    }
if ($acmode_num != 0){
    {
	print <<FHM_DL_FUNC
  /** load ${bit_width} bits */
  function ld_${bit_width}{
    input{
      bit_vector addr;
    }
    output{
      bit_vector data_out = data_bus;
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 0 && ac_mode == ${b_str}] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid data_out;
	valid addr_err;
      }
    }
  }

FHM_DL_FUNC
    }
    for ($i=$wmode_1,$w_b=$bit_width-$access; $i>0; $i--,$w_b=$w_b-$access){
	$str = $a_t_comma . &to_comp($i-1, $acmode_num) . $a_t_comma;
	{
	    print <<FHM_DL_FUNC
  /** load ${w_b} bits */
  function ld_${w_b}{
    input{
      bit_vector addr;
    }
    output{
      bit_vector data_out = data_bus;
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode, ext_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 0 && ac_mode == $str && ext_mode == 1] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid data_out;
	valid addr_err;
      }
    }
  }

  /** load ${w_b} bits (unsigned) */
  function ldu_${w_b}{
    input{
      bit_vector addr;
    }
    output{
      bit_vector data_out = data_bus;
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode, ext_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 0 && ac_mode == $str && ext_mode == 0] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid data_out;
	valid addr_err;
      }
    }
  }

FHM_DL_FUNC
        }
    }
    {
	print <<FHM_DL_FUNC
  /** store ${bit_width} bits */
  function s_${bit_width}{
    input{
      bit_vector addr;
      bit_vector data_in;
    }
    output{
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 1 && ac_mode == ${b_str}] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid addr_err;
      }
    }
  }

FHM_DL_FUNC
    }
    for ($i=$wmode_1,$w_b=$bit_width-$access; $i>0; $i--,$w_b=$w_b-$access){
	$str = $a_t_comma . &to_comp($i-1, $acmode_num) . $a_t_comma;
	{
	    print <<FHM_DL_FUNC
  /** store ${w_b} bits */
  function s_${w_b}{
    input{
      bit_vector addr;
      bit_vector data_in;
    }
    output{
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 1 && ac_mode == $str] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid addr_err;
      }
    }
  }

FHM_DL_FUNC
        }
    }
    {
	print <<FHM_DL_FUNC
  /** load : same as ld_${bit_width} */
  function load{
    input{
      bit_vector addr;
    }
    output{
      bit_vector data_out = data_bus;
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 0 && ac_mode == ${b_str}] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid data_out;
	valid addr_err;
      }
    }
  }

  /** read : same as ld_${bit_width} */
  function read{
    input{
      bit_vector addr;
    }
    output{
      bit_vector data_out = data_bus;
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 0 && ac_mode == ${b_str}] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid data_out;
	valid addr_err;
      }
    }
  }

  /** lh : same as ld_${b_h} */
  function lh{
    input{
      bit_vector addr;
    }
    output{
      bit_vector data_out = data_bus;
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode, ext_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 0 && ac_mode == ${b_h_str} && ext_mode = 1] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid data_out;
	valid addr_err;
      }
    }
  }

  /** lhu : same as ldu_${b_h} */
  function lhu{
    input{
      bit_vector addr;
    }
    output{
      bit_vector data_out = data_bus;
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode, ext_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 0 && ac_mode == ${b_h_str} && ext_mode = 0] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid data_out;
	valid addr_err;
      }
    }
  }

  /** lb : same as ld_${b_b} */
  function lb{
    input{
      bit_vector addr;
    }
    output{
      bit_vector data_out = data_bus;
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode, ext_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 0 && ac_mode == ${b_b_str} && ext_mode = 1] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid data_out;
	valid addr_err;
      }
    }
  }

  /** lbu : same as ldu_${b_b} */
  function lbu{
    input{
      bit_vector addr;
    }
    output{
      bit_vector data_out = data_bus;
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode, ext_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 0 && ac_mode == ${b_b_str} && ext_mode = 0] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid data_out;
	valid addr_err;
      }
    }
  }

  /** store : same as s_${bit_width} */
  function store{
    input{
      bit_vector addr;
      bit_vector data_in;
    }
    output{
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 1 && ac_mode == ${b_str}] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid addr_err;
      }
    }
  }

  /** write : same as s_${bit_width} */
  function write{
    input{
      bit_vector addr;
      bit_vector data_in;
    }
    output{
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 1 && ac_mode == ${b_str}] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid addr_err;
      }
    }
  }

  /** sh : same as s_${b_h} */
  function sh{
    input{
      bit_vector addr;
      bit_vector data_in;
    }
    output{
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 1 && ac_mode == ${b_h_str}] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid addr_err;
      }
    }
  }

  /** sb : same as s_${b_b} */
  function sb{
    input{
      bit_vector addr;
      bit_vector data_in;
    }
    output{
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 1 && ac_mode == ${b_b_str}] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid addr_err;
      }
    }
  }
}
FHM_DL_FUNC
    }
}
else{
    {
	print <<FHM_DL_FUNC
  /** load : load data */
  function load{
    input{
      bit_vector addr;
    }
    output{
      bit_vector data_out = data_bus;
    }
    control{
      in  reset, req, rw;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 0] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid data_out;
      }
    }
  }

  /** read : same as load */
  function read{
    input{
      bit_vector addr;
    }
    output{
      bit_vector data_out = data_bus;
    }
    control{
      in  reset, req, rw;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 0] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid data_out;
      }
    }
  }

  /** store : store data */
  function store{
    input{
      bit_vector addr;
      bit_vector data_in;
    }
    control{
      in  reset, req, rw;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 1] until (ack == 1 || reset == 1);
    }
  }

  /** write : same as store */
  function write{
    input{
      bit_vector addr;
      bit_vector data_in;
    }
    control{
      in  reset, req, rw;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 1] until (ack == 1 || reset == 1);
    }
  }
}
FHM_DL_FUNC
    }    
}
exit(0);

# -----------------------

sub log2u{
    $num = $_[0];

    if ($num == 1){
	return(0);
    }
    for ($i=1, $N=2; $N<$num; $i++, $N*=2){};
    return($i);
}

# ---------------------------------

sub to_comp{
  @buf = ();
  $num = $_[0];
  $width = $_[1];

  for ($x=1; $x<$width; $x++){
    $buf[$x] = $num % 2;
    $num = ($num - $buf[$x]) / 2;
  }
  $buf[$x] = $num % 2;
  return (join("", reverse(@buf)));
}
        ]]>
      </script>
    </function_description>

    <function_conv>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates function definition for dmau in rt level
# parameter : bit_width address_space access_width

if ($#ARGV != 2){
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width address_space access_width\n";
    exit (100);
}
$bit_width = $ARGV[0];
$addr_space = $ARGV[1];
$access = $ARGV[2];

@bit_widths = (8, 16, 32, 64, 128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

@addr_spaces = (4, 8, 16, 32, 64, 128);
if (! grep($_ eq $addr_space, @addr_spaces)){
    print "address_space $addr_space is not supported.\n";
    exit (100);
}

@accesses = (8, 16, 32, 64, 128);
if (! grep($_ eq $access, @accesses)){
    print "access_width $access is not supported.\n";
    exit (100);
}

$a_tmp = $access;
while ($bit_width != $a_tmp){
    if ($bit_width < $a_tmp){
	print "The value of \"bit_width\" must be 2^n * \"access_width\".\n";
	exit (100);
    }
    $a_tmp = $a_tmp * 2;
}

$b_1 = $bit_width - 1;
$a_1 = $addr_space - 1;

$b_range = "${b_1}:0";
$a_range = "${a_1}:0";

$wmode_num = $bit_width/$access;
$wmode_1 = $wmode_num - 1;

$acmode_num = &log2u($wmode_num);
$acmode_1 = $acmode_num - 1;

if ($acmode_num == 0){
    $acmode_str = "";
    $ext_str = "";
    $aerr_str = "";
    $wmode_str = "";
}
else{
    $wmode_str = "[$wmode_1:0]";
    if ($acmode_num == 1){
        $acmode_str = "ac_mode, ";
	$a_t_comma = "'";
    }
    else{
	$acmode_str = "ac_mode[$acmode_1:0], ";
	$ac_range = "[$acmode_1:0] ";
	$a_t_comma = "\"";
    }
    $ext_str = "ext_mode, ";
    $aerr_str = "addr_err, ";
}

$b_str = $a_t_comma . &to_comp($wmode_1, $acmode_num) . $a_t_comma;
$b_h = $bit_width / 2;
$b_h_str = $a_t_comma . &to_comp($b_h/$access-1, $acmode_num) . $a_t_comma;
$b_b = 8;
$b_b_str = $a_t_comma . &to_comp(0, $acmode_num) . $a_t_comma;

{
    print <<FHM_DL_FUNC
/** nop */
function nop{
  input{
  }
  output{
  }
  control{
    in bit reset;
    in bit req;
  }
  protocol{
    single_cycle_protocol{
      reset = '0';
      req   = '0';
    }
  }
}

/** reset */
function reset{
  input{
  }
  output{
  }
  control{
    in bit reset;
  }
  protocol{
    single_cycle_protocol{
      reset = '1';
    }
  }
}

FHM_DL_FUNC
    }
if ($acmode_num != 0){
    {
	print <<FHM_DL_FUNC
/** load ${bit_width} bits */
function ld_${bit_width}{
  input{
    bit [$a_1:0] addr;
  }
  output{
    bit [$b_1:0] data_out;
    bit addr_err;
  }
  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '0';
      ac_mode = ${b_str};
    }
  }
}

FHM_DL_FUNC
    }
    for ($i=$wmode_1,$w_b=$bit_width-$access; $i>0; $i--,$w_b=$w_b-$access){
	$str = $a_t_comma . &to_comp($i-1, $acmode_num) . $a_t_comma;
	{
	    print <<FHM_DL_FUNC
/** load ${w_b} bits */
function ld_${w_b}{
  input{
    bit [$a_1:0] addr;
  }
  output{
    bit [$b_1:0] data_out;
    bit addr_err;
  }
  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    in  bit ext_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '0';
      ac_mode = ${str};
      ext_mode = '1';
    }
  }
}

/** load ${w_b} bits (unsigned) */
function ldu_${w_b}{
  input{
    bit [$a_1:0] addr;
  }
  output{
    bit [$b_1:0] data_out;
    bit addr_err;
  }
  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    in  bit ext_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '0';
      ac_mode = ${str};
      ext_mode = '0';
    }
  }
}

FHM_DL_FUNC
        }
    }
    {
	print <<FHM_DL_FUNC
/** store ${bit_width} bits */
function s_${bit_width}{
  input{
    bit [$a_1:0] addr;
    bit [$b_1:0] data_in;
  }

  output{
    bit addr_err;
  }

  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '1';
      ac_mode = $b_str;
    }
  }
}

FHM_DL_FUNC
    }
    for ($i=$wmode_1,$w_b=$bit_width-$access; $i>0; $i--,$w_b=$w_b-$access){
	$str = $a_t_comma . &to_comp($i-1, $acmode_num) . $a_t_comma;
	{
	    print <<FHM_DL_FUNC
  /** store ${w_b} bits */
  function s_${w_b}{
  input{
    bit [$a_1:0] addr;
    bit [$b_1:0] data_in;
  }

  output{
    bit addr_err;
  }

  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '1';
      ac_mode = $b_str;
    }
  }
}

FHM_DL_FUNC
        }
    }
    {
	print <<FHM_DL_FUNC
/** load : same as ld_${bit_width} */
function load{
  input{
    bit [$a_1:0] addr;
  }
  output{
    bit [$b_1:0] data_out;
    bit addr_err;
  }
  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '0';
      ac_mode = ${b_str};
    }
  }
}

/** read : same as ld_${bit_width} */
function read{
  input{
    bit [$a_1:0] addr;
  }
  output{
    bit [$b_1:0] data_out;
    bit addr_err;
  }
  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '0';
      ac_mode = ${b_str};
    }
  }
}

/** lh : same as ld_${b_h} */
function lh{
  input{
    bit [$a_1:0] addr;
  }
  output{
    bit [$b_1:0] data_out;
    bit addr_err;
  }
  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    in bit ext_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '0';
      ac_mode = ${b_h_str};
      ext_mode = '1';
    }
  }
}

/** lhu : same as ldu_${b_h} */
function lhu{
  input{
    bit [$a_1:0] addr;
  }
  output{
    bit [$b_1:0] data_out;
    bit addr_err;
  }
  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    in bit ext_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '0';
      ac_mode = ${b_h_str};
      ext_mode = '0';
    }
  }
}

/** lb : same as ld_${b_b} */
function lb{
  input{
    bit [$a_1:0] addr;
  }
  output{
    bit [$b_1:0] data_out;
    bit addr_err;
  }
  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    in bit ext_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '0';
      ac_mode = ${b_b_str};
      ext_mode = '1';
    }
  }
}

/** lbu : same as ldu_${b_b} */
function lbu{
  input{
    bit [$a_1:0] addr;
  }
  output{
    bit [$b_1:0] data_out;
    bit addr_err;
  }
  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    in bit ext_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '0';
      ac_mode = ${b_b_str};
      ext_mode = '0';
    }
  }
}

/** store : same as s_${bit_width} */
function store{
  input{
    bit [$a_1:0] addr;
    bit [$b_1:0] data_in;
  }

  output{
    bit addr_err;
  }

  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '1';
      ac_mode = $b_str;
    }
  }
}

/** write : same as s_${bit_width} */
function write{
  input{
    bit [$a_1:0] addr;
    bit [$b_1:0] data_in;
  }

  output{
    bit addr_err;
  }

  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '1';
      ac_mode = $b_str;
    }
  }
}

/** sh : same as s_${b_h} */
function sh{
  input{
    bit [$a_1:0] addr;
    bit [$b_1:0] data_in;
  }

  output{
    bit addr_err;
  }

  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '1';
      ac_mode = $b_h_str;
    }
  }
}

/** sb : same as s_${b_b} */
function sb{
  input{
    bit [$a_1:0] addr;
    bit [$b_1:0] data_in;
  }

  output{
    bit addr_err;
  }

  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '1';
      ac_mode = $b_b_str;
    }
  }
}
FHM_DL_FUNC
    }
}
else{
    {
	print <<FHM_DL_FUNC
/** load : load data */
function load{
  input{
    bit [$a_1:0] addr;
  }

  output{
    bit [$b_1:0] data_out;
  }

  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '0';
    }
  }
}

/** read : same as load */
function read{
  input{
    bit [$a_1:0] addr;
  }

  output{
    bit [$b_1:0] data_out;
  }

  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '0';
    }
  }
}

/** store : store data */
function store{
  input{
    bit [$a_1:0] addr;
    bit [$b_1:0] data_in;
  }

  output{
  }

  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '1';
    }
  }
}

/** write : same as store */
function write{
  input{
    bit [$a_1:0] addr;
    bit [$b_1:0] data_in;
  }

  output{
  }

  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '1';
    }
  }
}
FHM_DL_FUNC
    }    
}
exit(0);

# -----------------------

sub log2u{
    $num = $_[0];

    if ($num == 1){
	return(0);
    }
    for ($i=1, $N=2; $N<$num; $i++, $N*=2){};
    return($i);
}

# ---------------------------------

sub to_comp{
  @buf = ();
  $num = $_[0];
  $width = $_[1];

  for ($x=1; $x<$width; $x++){
    $buf[$x] = $num % 2;
    $num = ($num - $buf[$x]) / 2;
  }
  $buf[$x] = $num % 2;
  return (join("", reverse(@buf)));
}
        ]]>
      </script>
    </function_conv>

    <function_port>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates port information for dmau in rt level
# parameter : bit_width address_space access_width

if ($#ARGV != 2){
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width address_space access_width\n";
    exit (100);
}
$bit_width = $ARGV[0];
$addr_space = $ARGV[1];
$access = $ARGV[2];

@bit_widths = (8, 16, 32, 64, 128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

@addr_spaces = (4, 8, 16, 32, 64, 128);
if (! grep($_ eq $addr_space, @addr_spaces)){
    print "address_space $addr_space is not supported.\n";
    exit (100);
}

@accesses = (8, 16, 32, 64, 128);
if (! grep($_ eq $access, @accesses)){
    print "access_width $access is not supported.\n";
    exit (100);
}

$a_tmp = $access;
while ($bit_width != $a_tmp){
    if ($bit_width < $a_tmp){
	print "The value of \"bit_width\" must be 2^n * \"access_width\".\n";
	exit (100);
    }
    $a_tmp = $a_tmp * 2;
}

$b_1 = $bit_width - 1;
$a_1 = $addr_space - 1;

$b_range = "${b_1}:0";
$a_range = "${a_1}:0";

$wmode_num = $bit_width/$access;
$wmode_1 = $wmode_num - 1;

$acmode_num = &log2u($wmode_num);
$acmode_1 = $acmode_num - 1;

if ($acmode_num == 0){
    $acmode_str = "";
    $ext_str = "";
    $aerr_str = "";
    $wmode_str = "bit";
}
else{
    $wmode_str = "bit_vector   $wmode_1   0";
    if ($acmode_num == 1){
        $acmode_str = "\nac_mode	in	bit		ctrl";
	$a_t_comma = "'";
    }
    else{
	$acmode_str = "\nac_mode	in	bit_vector   $acmode_1   0	ctrl";
	$a_t_comma = "\"";
    }
    $ext_str = "\next_mode	in	bit	ctrl";
    $aerr_str = "\naddr_err	out	bit	data";
}

{
    print <<FHM_DL_FUNC
reset	in	bit		reset
req	in	bit		ctrl
rw	in	bit		ctrl${acmode_str}${ext_str}
addr	in	bit_vector   $a_1   0	data
data_in	in	bit_vector   $b_1   0	data${aerr_str}
req_bus	out	bit	data
w_mode_bus	out	${wmode_str}	data
addr_bus	out	bit_vector   $a_1   0	data
data_bus	inout	bit_vector   $b_1   0	data
ack_bus	in	bit	data
ack	out	bit	ctrl
data_out	out	bit_vector   $b_1   0	data
FHM_DL_FUNC
}
exit(0);

# -----------------------

sub log2u{
    $num = $_[0];

    if ($num == 1){
	return(0);
    }
    for ($i=1, $N=2; $N<$num; $i++, $N*=2){};
    return($i);
}

# ---------------------------------

sub to_comp{
  @buf = ();
  $num = $_[0];
  $width = $_[1];

  for ($x=1; $x<$width; $x++){
    $buf[$x] = $num % 2;
    $num = ($num - $buf[$x]) / 2;
  }
  $buf[$x] = $num % 2;
  return (join("", reverse(@buf)));
}
        ]]>
      </script>
    </function_port>

    <design>
      <design_lang> vhdl </design_lang>

      <instance>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates instance for dmau in rt level
# parameter : instance_name bit_width address_space access_width

if ($#ARGV != 3){
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name bit_width address_space access_width\n";
    exit (100);
}

$instance_name = $ARGV[0];
$bit_width = $ARGV[1];
$addr_space = $ARGV[2];
$access = $ARGV[3];

@bit_widths = (8, 16, 32, 64, 128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

@addr_spaces = (4, 8, 16, 32, 64, 128);
if (! grep($_ eq $addr_space, @addr_spaces)){
    print "address_space $addr_space is not supported.\n";
    exit (100);
}

@accesses = (8, 16, 32, 64, 128);
if (! grep($_ eq $access, @accesses)){
    print "access_width $access is not supported.\n";
    exit (100);
}

$a_tmp = $access;
while ($bit_width != $a_tmp){
    if ($bit_width < $a_tmp){
	print "The value of \"bit_width\" must be 2^n * \"access_width\".\n";
	exit (100);
    }
    $a_tmp = $a_tmp * 2;
}

$b4 = $bit_width;

$b4_1 = $b4 - 1;

$wmode_num = $bit_width/$access;
$wmode_1 = $wmode_num - 1;
if ($wmode_num == 1){
    $wmode_port = "std_logic";
    $a_tmp = 0;
    $a_tmp_str_0 = "";
    $acmode_num_str_0 =  "";
}
else{
    $wmode_port = "std_logic_vector($wmode_1 downto 0)";
    $a_tmp = $wmode_num/2;
    $a_tmp_str_0 =  " & \"" . '0' x $a_tmp . "\"";
    $acmode_num_str_0 =  " & \"" . '0' x $acmode_num . "\"";
}
$a_1 = $addr_space - 1;
$a_tmp_1 = $a_tmp - 1;
$acmode_num = &log2u($wmode_num);
$acmode_1 = $acmode_num - 1;

$zs = 'Z' x $bit_width;
{
    print <<FHM_DL_INSTANCE
-- Module	 : Data Memory Access Unit
-- Author	 : M. Itoh (c) 2000.
--                 Modified by J.Sato (c) 2001
-- Version	 : 1.0
-- VHDL          : 87

-- Functionality : rt level
--  port
--    reset        : reset
--    req          : memory access request from cpu
--    rw           : read/write mode from cpu
--                   0 => read
--                   1 => write
FHM_DL_INSTANCE
}
if ($acmode_num!=0){
    print "--    ac_mode      : access mode from cpu\n";
    for ($i=$wmode_1; $i>=0; $i--){
	$str = &to_comp($i, $acmode_num);
	$access_bits = $access * ($i+1);
	print "--                   $str => $access_bits bits access\n";
    }
    print <<FHM_DL_INSTANCE
--    ext_mode     : extention mode from cpu
--                   0 => zero extention
--                   1 => sign extention
FHM_DL_INSTANCE
}
{
    print <<FHM_DL_INSTANCE
--    addr         : address from cpu
--    data_in      : data output for cpu
FHM_DL_INSTANCE
}
if ($acmode_num!=0){
    print "--    addr_err     : address error signal for cpu\n";
}
{
    print <<FHM_DL_INSTANCE
--    req_bus      : memory access request for bus
--    w_mode_bus   : access mode for bus
--    addr_bus     : address output for bus
--    data_bus     : data input/output for bus
--    ack_bus      : memory access ack from bus
--    ack          : memory access ack for cpu
--    data_out     : data input for cpu

library ieee;
use ieee.std_logic_1164.all;

entity $instance_name is
    port (reset        : in  std_logic;				-- reset signal
	  req          : in  std_logic;				-- request from cpu
	  rw           : in  std_logic;				-- read/write mode from cpu
FHM_DL_INSTANCE
}
if ($acmode_num!=0){
    print "          ac_mode      : in  std_logic_vector($acmode_1 downto 0);	-- access mode from cpu\n";
    print "          ext_mode     : in  std_logic;				-- extention mode from cpu\n";
}
{
    print <<FHM_DL_INSTANCE
	  addr         : in  std_logic_vector($a_1 downto 0);	-- address from cpu
	  data_in      : in  std_logic_vector($b4_1 downto 0);	-- input data from cpu
FHM_DL_INSTANCE
}
if ($acmode_num!=0){
    print "	  addr_err     : out std_logic;				-- address error signal for cpu\n";
}
{
    print <<FHM_DL_INSTANCE
	  req_bus      : out std_logic;				-- request for bus
	  w_mode_bus   : out $wmode_port;				-- access mode for bus
	  addr_bus     : out std_logic_vector($a_1 downto 0);	-- address for bus
	  data_bus     : inout std_logic_vector($b4_1 downto 0);	-- input data for bus
	  ack_bus      : in  std_logic;				-- ack from bus
	  ack          : out std_logic;				-- ack for cpu
	  data_out     : out std_logic_vector($b4_1 downto 0));	-- output data for cpu
end $instance_name;

-- purpose: rt description for data memory access unit
architecture rt of $instance_name is

begin  -- rt
    process (reset, req, ack_bus)
    begin  -- process
      if reset = '1' then
        req_bus <= '0';
        ack     <= '0';
      else
        if req'event and req = '1' then
          addr_bus <= addr($a_1 downto $a_tmp)$acmode_num_str_0;
          if rw = '1' then
FHM_DL_INSTANCE
}
    if ($acmode_num!=0){
	for ($i=$wmode_1; $i>=0; $i--){
	    $str = &to_comp($i, $acmode_num);
	    if ($i==$wmode_1){
		print "            if ac_mode = \"$str\" then\n";
	    }
	    else{
		print "            elsif ac_mode = \"$str\" then\n";
	    }
	    for ($j=0; $j<=$wmode_1-$i; $j++){
		$str = &to_comp($j, $a_tmp);
		if ($j==0){
		    print "              if addr($a_tmp_1 downto 0) = \"$str\" then\n";
		}
		else{
		    print "              elsif addr($a_tmp_1 downto 0) = \"$str\" then\n";
		}
		@w_str = ();
		$rem_data = $i+1;
		for ($k=0; $k<$wmode_num; $k++){
		    if ($k >= $j && $rem_data > 0){
			@w_str = (@w_str, 0);
			$rem_data--;
		    }
		    else{
			@w_str = (@w_str, 1);
		    }
		}
		$w_str = join("",@w_str);
		$tmp = $access * ($i+1);
		$data_str = "";
		if ($j != 0){
		    $data_str =  "\"" . 'Z' x ($bit_width-$access*($wmode_num-$j)) . "\" & ";
		}
		$r_m = $tmp - 1;
		$data_str = $data_str . "data_in($r_m downto 0)";
		$tmp = $access * ($wmode_num - $i - $j - 1);
		if ($tmp > 0){
		    $data_str = $data_str . " & \"" . 'Z' x $tmp . "\"";
		}
                print <<FHM_DL_INSTANCE
                addr_err <= '0';
                req_bus  <= '1';
                data_bus <= $data_str;
                w_mode_bus <= "$w_str";
FHM_DL_INSTANCE
	    }
            print <<FHM_DL_INSTANCE
              else
                addr_err <= '1';
                req_bus  <= '0';
                data_bus <= "$zs";
              end if;
FHM_DL_INSTANCE
	}
	{
            $w_1s = '1' x $wmode_num;
	    print <<FHM_DL_INSTANCE
            end if;
          elsif rw = '0' then
            data_bus <= "$zs";
            w_mode_bus <= "$w_1s";
FHM_DL_INSTANCE
        }
	for ($i=$wmode_1; $i>=0; $i--){
	    $str = &to_comp($i, $acmode_num);
	    if ($i==$wmode_1){
		print "            if ac_mode = \"$str\" then\n";
	    }
	    else{
		print "            elsif ac_mode = \"$str\" then\n";
	    }
	    for ($j=0; $j<=$wmode_1-$i; $j++){
		$str = &to_comp($j, $a_tmp);
		if ($j==0){
		    print "              if addr($a_tmp_1 downto 0) = \"$str\" then\n";
		}
		else{
		    print "              elsif addr($a_tmp_1 downto 0) = \"$str\" then\n";
		}
                {
                    print <<FHM_DL_INSTANCE
                addr_err <= '0';
                req_bus  <= '1';
FHM_DL_INSTANCE
                }
            }
            print <<FHM_DL_INSTANCE
              else
                addr_err <= '1';
                req_bus  <= '0';
              end if;
FHM_DL_INSTANCE
	}
        {
        print <<FHM_DL_INSTANCE
            end if;
          end if;
        elsif req'event and req = '0' then
          req_bus <= '0';
        elsif ack_bus'event and ack_bus = '1' then
          ack <= '1';
          req_bus <= '0';
          if rw = '0' then
FHM_DL_INSTANCE
        }
	for ($i=$wmode_1; $i>=0; $i--){
	    $str = &to_comp($i, $acmode_num);
	    if ($i==$wmode_1){
		print "            if ac_mode = \"$str\" then\n";
	    }
	    else{
		print "            elsif ac_mode = \"$str\" then\n";
	    }
	    for ($j=0; $j<=$wmode_1-$i; $j++){
		$str = &to_comp($j, $a_tmp);
		if ($j==0){
		    print "              if addr($a_tmp_1 downto 0) = \"$str\" then\n";
		}
		else{
		    print "              elsif addr($a_tmp_1 downto 0) = \"$str\" then\n";
		}
		$tmp = $access * ($i+1);
		$r_m = $tmp - 1;
		$b_m = $bit_width-$access*$j - 1;
		$b_l = $access*($wmode_num-$i-$j-1);
		print "                data_out($r_m downto 0) <= data_bus($b_m downto $b_l);\n";
		if ($r_m != $b4_1){
		    print "                data_out($b4_1 downto $tmp) <= (others => ext_mode and data_bus($b_m));\n";
		}
	    }
            print "              end if;\n";
	}
        print "            end if;\n          end if;\n";
    }
    else{
        print <<FHM_DL_INSTANCE
            req_bus  <= '1';
            data_bus <= data_in;
            w_mode_bus <= '0';
          elsif rw = '0' then
            req_bus  <= '1';
            data_bus <= "$zs";
            w_mode_bus <= '1';
          end if;
        elsif req'event and req = '0' then
          req_bus <= '0';
        elsif ack_bus'event and ack_bus = '1' then
          ack <= '1';
          req_bus <= '0';
          if rw = '0' then
            data_out <= data_bus;
          end if;
FHM_DL_INSTANCE
    }
{
print <<FHM_DL_INSTANCE
        elsif ack_bus'event and ack_bus = '0' then
          ack <= '0';
        end if;
      end if;
    end process;
      
end rt;
FHM_DL_INSTANCE
}
exit(0);

# -----------------------

sub log2u{
    $num = $_[0];

    if ($num == 1){
	return(0);
    }
    for ($i=1, $N=2; $N<$num; $i++, $N*=2){};
    return($i);
}

# ---------------------------------

sub to_comp{
  @buf = ();
  $num = $_[0];
  $width = $_[1];

  for ($x=1; $x<$width; $x++){
    $buf[$x] = $num % 2;
    $num = ($num - $buf[$x]) / 2;
  }
  $buf[$x] = $num % 2;
  return (join("", reverse(@buf)));
}
          ]]>
        </script>
      </instance>

      <entity>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates entity for dmau in rt level
# parameter : instance_name bit_width address_space access_width

if ($#ARGV != 3){
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name bit_width address_space access_width\n";
    exit (100);
}

$instance_name = $ARGV[0];
$bit_width = $ARGV[1];
$addr_space = $ARGV[2];
$access = $ARGV[3];

@bit_widths = (8, 16, 32, 64, 128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

@addr_spaces = (4, 8, 16, 32, 64, 128);
if (! grep($_ eq $addr_space, @addr_spaces)){
    print "address_space $addr_space is not supported.\n";
    exit (100);
}

@accesses = (8, 16, 32, 64, 128);
if (! grep($_ eq $access, @accesses)){
    print "access_width $access is not supported.\n";
    exit (100);
}

$a_tmp = $access;
while ($bit_width != $a_tmp){
    if ($bit_width < $a_tmp){
	print "The value of \"bit_width\" must be 2^n * \"access_width\".\n";
	exit (100);
    }
    $a_tmp = $a_tmp * 2;
}

$b4 = $bit_width;
$b4_1 = $b4 - 1;

$wmode_num = $bit_width/$access;
$wmode_1 = $wmode_num - 1;
if ($wmode_num == 1){
    $wmode_port = "std_logic";
}
else{
    $wmode_port = "std_logic_vector($wmode_1 downto 0)";
}
$a_1 = $addr_space - 1;
$acmode_num = &log2u($wmode_num);
$acmode_1 = $acmode_num - 1;

{
    print <<FHM_DL_INSTANCE
entity $instance_name is
    port (reset        : in  std_logic;				-- reset signal
	  req          : in  std_logic;				-- request from cpu
	  rw           : in  std_logic;				-- read/write mode from cpu
FHM_DL_INSTANCE
}
if ($acmode_num!=0){
    print "          ac_mode      : in  std_logic_vector($acmode_1 downto 0);	-- access mode from cpu\n";
    print "          ext_mode     : in  std_logic;				-- extention mode from cpu\n";
}
{
    print <<FHM_DL_INSTANCE
	  addr         : in  std_logic_vector($a_1 downto 0);	-- address from cpu
	  data_in      : in  std_logic_vector($b4_1 downto 0);	-- input data from cpu
FHM_DL_INSTANCE
}
if ($acmode_num!=0){
    print "	  addr_err     : out std_logic;				-- address error signal for cpu\n";
}
{
    print <<FHM_DL_INSTANCE
	  req_bus      : out std_logic;				-- request for bus
	  w_mode_bus   : out $wmode_port;				-- access mode for bus
	  addr_bus     : out std_logic_vector($a_1 downto 0);	-- address for bus
	  data_bus     : inout std_logic_vector($b4_1 downto 0);	-- input data for bus
	  ack_bus      : in  std_logic;				-- ack from bus
	  ack          : out std_logic;				-- ack for cpu
	  data_out     : out std_logic_vector($b4_1 downto 0));	-- output data for cpu
end $instance_name;
FHM_DL_INSTANCE
}

exit(0);

# -----------------------

sub log2u{
    $num = $_[0];

    if ($num == 1){
	return(0);
    }
    for ($i=1, $N=2; $N<$num; $i++, $N*=2){};
    return($i);
}

# ---------------------------------

sub to_comp{
  @buf = ();
  $num = $_[0];
  $width = $_[1];

  for ($x=1; $x<$width; $x++){
    $buf[$x] = $num % 2;
    $num = ($num - $buf[$x]) / 2;
  }
  $buf[$x] = $num % 2;
  return (join("", reverse(@buf)));
}
          ]]>
        </script>
      </entity>

      <testvector>
        <testvector_script>
          <![CDATA[ ]]>
        </testvector_script>
      </testvector>

      <synthesis>
        <parameter></parameter>
        <synthesis_script>
          <script>
            <![CDATA[
#!/usr/bin/perl
# this script generates synthesis script for dmau in rt level
# parameter : instance_name priority bit_width address_space access_width


if ($#ARGV != 4){
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name priority bit_width address_space access_width\n";
    exit (100);
}

$instance_name = $ARGV[0];
$priority      = $ARGV[1];
$bit_width = $ARGV[2];
$addr_space = $ARGV[3];
$access = $ARGV[4];

if ($priority eq "area"){
    $priority_const = "set_max_area 0";
}
elsif ($priority eq "performance"){
    $priority_const = "set_max_delay -from all_inputs() -to all_outputs() 0";
}
elsif ($priority eq "power"){
    $priority_const = "";
}
elsif ($priority eq "none"){
    $priority_const = "";
}
else{
    print "priority $priority is not supported.\n";
    exit (100);
}

@bit_widths = (8, 16, 32, 64, 128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

@addr_spaces = (4, 8, 16, 32, 64, 128);
if (! grep($_ eq $addr_space, @addr_spaces)){
    print "address_space $addr_space is not supported.\n";
    exit (100);
}

@accesses = (8, 16, 32, 64, 128);
if (! grep($_ eq $access, @accesses)){
    print "access_width $access is not supported.\n";
    exit (100);
}

{
    print <<FHM_DL_SCRIPT
hdlin_auto_save_templates = TRUE

analyze -f vhdl $instance_name.vhd

elaborate $instance_name
uniquify

$priority_const

compile 

write -hierarchy -output $instance_name.db

report_area
report_timing

quit
FHM_DL_SCRIPT
}
exit(0);
            ]]>
          </script>
        </synthesis_script>
      </synthesis>
    </design>

    <estimation>
      <estimation_data>
        <library name="OSAKA">

          <est_type name="shape">
            <est_index name="area">
              <unit> mm2 </unit>
              <translate>
                <translate_value key="gate"> 4201.68 </translate_value>
                <translate_value key="mm2">  1 </translate_value>
              </translate>

              <parameters name="16,8">
                <max>
                  <data bit_width="8"> 0.0491116324898612 </data>
                  <data bit_width="16"> 0.188537633756021 </data>
                  <data bit_width="32"> 0.641681106604977 </data>
                  <data bit_width="64"> 1.99871664976866 </data>
                  <data bit_width="128"> 7.00404362064698 </data>
                </max>
                <min>
                  <data bit_width="8"> 0.0456015931722549 </data>
                  <data bit_width="16"> 0.157305735800918 </data>
                  <data bit_width="32"> 0.468288840178214 </data>
                  <data bit_width="64"> 1.41029851083376 </data>
                  <data bit_width="128"> 5.2416393932903 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 0.0456015931722549 </data>
                    <data bit_width="16"> 0.157305735800918 </data>
                    <data bit_width="32"> 0.468288840178214 </data>
                    <data bit_width="64"> 1.41029851083376 </data>
                    <data bit_width="128"> 5.2416393932903 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 0.0491116324898612 </data>
                    <data bit_width="16"> 0.188537633756021 </data>
                    <data bit_width="32"> 0.641681106604977 </data>
                    <data bit_width="64"> 1.99871664976866 </data>
                    <data bit_width="128"> 7.00404362064698 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 0.0476324993811999 </data>
                    <data bit_width="16"> 0.182413345376135 </data>
                    <data bit_width="32"> 0.550974039431846 </data>
                    <data bit_width="64"> 1.62255224386436 </data>
                    <data bit_width="128"> 6.02069254155481 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,16">
                <max>
                  <data bit_width="16"> 0.0932829120732659 </data>
                  <data bit_width="32"> 0.386070111479218 </data>
                  <data bit_width="64"> 1.2856225162316 </data>
                  <data bit_width="128"> 4.17257669099027 </data>
                </max>
                <min>
                  <data bit_width="16"> 0.0878354072656651 </data>
                  <data bit_width="32"> 0.300107414653186 </data>
                  <data bit_width="64"> 0.976351693370271 </data>
                  <data bit_width="128"> 2.91883362916738 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 0.0878354072656651 </data>
                    <data bit_width="32"> 0.300107414653186 </data>
                    <data bit_width="64"> 0.976351693370271 </data>
                    <data bit_width="128"> 2.91883362916738 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 0.0932829120732659 </data>
                    <data bit_width="32"> 0.386070111479218 </data>
                    <data bit_width="64"> 1.2856225162316 </data>
                    <data bit_width="128"> 4.17257669099027 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 0.0912087791074046 </data>
                    <data bit_width="32"> 0.374616243502599 </data>
                    <data bit_width="64"> 1.10890702314312 </data>
                    <data bit_width="128"> 3.57207238009558 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,32">
                <max>
                  <data bit_width="32"> 0.179432345395175 </data>
                  <data bit_width="64"> 0.768935880409741 </data>
                  <data bit_width="128"> 2.59594520644123 </data>
                </max>
                <min>
                  <data bit_width="32"> 0.17107862259858 </data>
                  <data bit_width="64"> 0.626924988099998 </data>
                  <data bit_width="128"> 2.12897774295044 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="32"> 0.17107862259858 </data>
                    <data bit_width="64"> 0.626924988099998 </data>
                    <data bit_width="128"> 2.12897774295044 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="32"> 0.171867477056796 </data>
                    <data bit_width="64"> 0.768935880409741 </data>
                    <data bit_width="128"> 2.59594520644123 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="32"> 0.179432345395175 </data>
                    <data bit_width="64"> 0.731922632851621 </data>
                    <data bit_width="128"> 2.56829443627311 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,64">
                <max>
                  <data bit_width="64"> 0.365044324651092 </data>
                  <data bit_width="128"> 1.73671393609223 </data>
                </max>
                <min>
                  <data bit_width="64"> 0.351432971335275 </data>
                  <data bit_width="128"> 1.31958296014927 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="64"> 0.351432971335275 </data>
                    <data bit_width="128"> 1.31958296014927 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="64"> 0.358229394670703 </data>
                    <data bit_width="128"> 1.49189092029855 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="64"> 0.365044324651092 </data>
                    <data bit_width="128"> 1.73671393609223 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,128">
                <max>
                  <data bit_width="128"> 0.908172758991641 </data>
                </max>
                <min>
                  <data bit_width="128"> 0.701261650339864 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="128"> 0.701261650339864 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="128"> 0.776010629081701 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="128"> 0.908172758991641 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,8">
                <max>
                  <data bit_width="8"> 0.0504726880676301 </data>
                  <data bit_width="16"> 0.189898696473791 </data>
                  <data bit_width="32"> 0.643448558909769 </data>
                  <data bit_width="64"> 2.00734972939396 </data>
                  <data bit_width="128"> 7.00441363645018 </data>
                </max>
                <min>
                  <data bit_width="8"> 0.0469626485120238 </data>
                  <data bit_width="16"> 0.158666798518688 </data>
                  <data bit_width="32"> 0.469937350535976 </data>
                  <data bit_width="64"> 1.41212441737591 </data>
                  <data bit_width="128"> 5.24362892485863 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 0.0469626485120238 </data>
                    <data bit_width="16"> 0.158666798518688 </data>
                    <data bit_width="32"> 0.469937350535976 </data>
                    <data bit_width="64"> 1.41212441737591 </data>
                    <data bit_width="128"> 5.24362892485863 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 0.0504726880676301 </data>
                    <data bit_width="16"> 0.189898696473791 </data>
                    <data bit_width="32"> 0.643448558909769 </data>
                    <data bit_width="64"> 2.00734972939396 </data>
                    <data bit_width="128"> 7.00441363645018 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 0.0489935549589688 </data>
                    <data bit_width="16"> 0.183774408093905 </data>
                    <data bit_width="32"> 0.552622549789608 </data>
                    <data bit_width="64"> 1.6243781506445 </data>
                    <data bit_width="128"> 6.02804172235868 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,16">
                <max>
                  <data bit_width="16"> 0.094643974791036 </data>
                  <data bit_width="32"> 0.38771856400297 </data>
                  <data bit_width="64"> 1.28857892295463 </data>
                  <data bit_width="128"> 4.17410323822852 </data>
                </max>
                <min>
                  <data bit_width="16"> 0.0891964554654329 </data>
                  <data bit_width="32"> 0.301468477370956 </data>
                  <data bit_width="64"> 0.978291719026675 </data>
                  <data bit_width="128"> 2.92092170750747 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 0.0891964554654329 </data>
                    <data bit_width="32"> 0.301468477370956 </data>
                    <data bit_width="64"> 0.978291719026675 </data>
                    <data bit_width="128"> 2.92092170750747 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 0.094643974791036 </data>
                    <data bit_width="32"> 0.38771856400297 </data>
                    <data bit_width="64"> 1.28857892295463 </data>
                    <data bit_width="128"> 4.17410323822852 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 0.0925698418251747 </data>
                    <data bit_width="32"> 0.375820682917309 </data>
                    <data bit_width="64"> 1.11073304582929 </data>
                    <data bit_width="128"> 3.57380345861655 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,32">
                <max>
                  <data bit_width="32"> 0.180793408112945 </data>
                  <data bit_width="64"> 0.770703390786542 </data>
                  <data bit_width="128"> 2.59708128462901 </data>
                </max>
                <min>
                  <data bit_width="32"> 0.17243968531635 </data>
                  <data bit_width="64"> 0.628676461320234 </data>
                  <data bit_width="128"> 2.13105420022467 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="32"> 0.17243968531635 </data>
                    <data bit_width="64"> 0.628676461320234 </data>
                    <data bit_width="128"> 2.13105420022467 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="32"> 0.173228539774566 </data>
                    <data bit_width="64"> 0.770703390786542 </data>
                    <data bit_width="128"> 2.59708128462901 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="32"> 0.180793408112945 </data>
                    <data bit_width="64"> 0.733571085137374 </data>
                    <data bit_width="128"> 2.5703825148512 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,64">
                <max>
                  <data bit_width="64"> 0.366692806210849 </data>
                  <data bit_width="128"> 1.73880201443232 </data>
                </max>
                <min>
                  <data bit_width="64"> 0.352978431722549 </data>
                  <data bit_width="128"> 1.32140898283544 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="64"> 0.352978431722549 </data>
                    <data bit_width="128"> 1.32140898283544 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="64"> 0.35987787623046 </data>
                    <data bit_width="128"> 1.49335994292759 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="64"> 0.366692806210849 </data>
                    <data bit_width="128"> 1.73880201443232 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,128">
                <max>
                  <data bit_width="128"> 0.909998781915805 </data>
                </max>
                <min>
                  <data bit_width="128"> 0.702910160697626 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="128"> 0.702910160697626 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="128"> 0.777836651767864 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="128"> 0.909998781915805 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,8">
                <max>
                  <data bit_width="8"> 0.0531947989851678 </data>
                  <data bit_width="16"> 0.192620807391329 </data>
                  <data bit_width="32"> 0.646864580120333 </data>
                  <data bit_width="64"> 2.00837238580758 </data>
                  <data bit_width="128"> 7.01343486034158 </data>
                </max>
                <min>
                  <data bit_width="8"> 0.0496847594295615 </data>
                  <data bit_width="16"> 0.161388894918223 </data>
                  <data bit_width="32"> 0.47323431341749 </data>
                  <data bit_width="64"> 1.41577646274823 </data>
                  <data bit_width="128"> 5.24788596466175 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 0.0496847594295615 </data>
                    <data bit_width="16"> 0.161388894918223 </data>
                    <data bit_width="32"> 0.47323431341749 </data>
                    <data bit_width="64"> 1.41577646274823 </data>
                    <data bit_width="128"> 5.24788596466175 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 0.0531947989851678 </data>
                    <data bit_width="16"> 0.192620807391329 </data>
                    <data bit_width="32"> 0.646864580120333 </data>
                    <data bit_width="64"> 2.00837238580758 </data>
                    <data bit_width="128"> 7.01343486034158 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 0.0517156658765065 </data>
                    <data bit_width="16"> 0.186496519011443 </data>
                    <data bit_width="32"> 0.555919512671122 </data>
                    <data bit_width="64"> 1.62879881523581 </data>
                    <data bit_width="128"> 6.02908111303098 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,16">
                <max>
                  <data bit_width="16"> 0.0973660857085737 </data>
                  <data bit_width="32"> 0.391491526960644 </data>
                  <data bit_width="64"> 1.2923162673026 </data>
                  <data bit_width="128"> 4.18108426272348 </data>
                </max>
                <min>
                  <data bit_width="16"> 0.0919185663829706 </data>
                  <data bit_width="32"> 0.304190602806496 </data>
                  <data bit_width="64"> 0.982057883751261 </data>
                  <data bit_width="128"> 2.92509786442566 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 0.0919185663829706 </data>
                    <data bit_width="32"> 0.304190602806496 </data>
                    <data bit_width="64"> 0.982057883751261 </data>
                    <data bit_width="128"> 2.92509786442566 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 0.0973660857085737 </data>
                    <data bit_width="32"> 0.391491526960644 </data>
                    <data bit_width="64"> 1.2923162673026 </data>
                    <data bit_width="128"> 4.18108426272348 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 0.0952919527427124 </data>
                    <data bit_width="32"> 0.379117645798823 </data>
                    <data bit_width="64"> 1.11438509143961 </data>
                    <data bit_width="128"> 3.57887211567754 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,32">
                <max>
                  <data bit_width="32"> 0.183515519030483 </data>
                  <data bit_width="64"> 0.773524353829897 </data>
                  <data bit_width="128"> 2.59905594119495 </data>
                </max>
                <min>
                  <data bit_width="32"> 0.175161796233887 </data>
                  <data bit_width="64"> 0.63207650344624 </data>
                  <data bit_width="128"> 2.13521896860303 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="32"> 0.175161796233887 </data>
                    <data bit_width="64"> 0.63207650344624 </data>
                    <data bit_width="128"> 2.13521896860303 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="32"> 0.175950650692104 </data>
                    <data bit_width="64"> 0.773524353829897 </data>
                    <data bit_width="128"> 2.59905594119495 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="32"> 0.183515519030483 </data>
                    <data bit_width="64"> 0.736868106090897 </data>
                    <data bit_width="128"> 2.57756621113459 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,64">
                <max>
                  <data bit_width="64"> 0.369989769092363 </data>
                  <data bit_width="128"> 1.74279967132195 </data>
                </max>
                <min>
                  <data bit_width="64"> 0.356275394604063 </data>
                  <data bit_width="128"> 1.32483279021725 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="64"> 0.356275394604063 </data>
                    <data bit_width="128"> 1.32483279021725 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="64"> 0.363174839111974 </data>
                    <data bit_width="128"> 1.49677387235582 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="64"> 0.369989769092363 </data>
                    <data bit_width="128"> 1.74279967132195 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,128">
                <max>
                  <data bit_width="128"> 0.913650769216123 </data>
                </max>
                <min>
                  <data bit_width="128"> 0.70620712381714 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="128"> 0.70620712381714 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="128"> 0.781488639306182 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="128"> 0.913650769216123 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,8">
                <max>
                  <data bit_width="8"> 0.0586390208202433 </data>
                  <data bit_width="16"> 0.197827029188325 </data>
                  <data bit_width="32"> 0.650186005359761 </data>
                  <data bit_width="64"> 2.01363069914891 </data>
                  <data bit_width="128"> 7.02430523314484 </data>
                </max>
                <min>
                  <data bit_width="8"> 0.055128981264637 </data>
                  <data bit_width="16"> 0.166918183202909 </data>
                  <data bit_width="32"> 0.479828239418518 </data>
                  <data bit_width="64"> 1.42308055396889 </data>
                  <data bit_width="128"> 5.25649254798081 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 0.055128981264637 </data>
                    <data bit_width="16"> 0.166918183202909 </data>
                    <data bit_width="32"> 0.479828239418518 </data>
                    <data bit_width="64"> 1.42308055396889 </data>
                    <data bit_width="128"> 5.25649254798081 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 0.0586390208202433 </data>
                    <data bit_width="16"> 0.197827029188325 </data>
                    <data bit_width="32"> 0.650186005359761 </data>
                    <data bit_width="64"> 2.01363069914891 </data>
                    <data bit_width="128"> 7.02430523314484 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 0.056862387663982 </data>
                    <data bit_width="16"> 0.191643240798919 </data>
                    <data bit_width="32"> 0.562675959616153 </data>
                    <data bit_width="64"> 1.63610290621846 </data>
                    <data bit_width="128"> 6.04038890396222 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,16">
                <max>
                  <data bit_width="16"> 0.102810307543649 </data>
                  <data bit_width="32"> 0.397609481921517 </data>
                  <data bit_width="64"> 1.29846405937625 </data>
                  <data bit_width="128"> 4.1868943455951 </data>
                </max>
                <min>
                  <data bit_width="16"> 0.0973627882180461 </data>
                  <data bit_width="32"> 0.309634824641572 </data>
                  <data bit_width="64"> 0.989247855619657 </data>
                  <data bit_width="128"> 2.93345017826203 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 0.0973627882180461 </data>
                    <data bit_width="32"> 0.309634824641572 </data>
                    <data bit_width="64"> 0.989247855619657 </data>
                    <data bit_width="128"> 2.93345017826203 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 0.102810307543649 </data>
                    <data bit_width="32"> 0.397609481921517 </data>
                    <data bit_width="64"> 1.29846405937625 </data>
                    <data bit_width="128"> 4.1868943455951 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 0.100736174339788 </data>
                    <data bit_width="32"> 0.385711600835856 </data>
                    <data bit_width="64"> 1.12168906627825 </data>
                    <data bit_width="128"> 3.58692692946631 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,32">
                <max>
                  <data bit_width="32"> 0.188959740865559 </data>
                  <data bit_width="64"> 0.780832279707165 </data>
                  <data bit_width="128"> 2.60818175515508 </data>
                </max>
                <min>
                  <data bit_width="32"> 0.180606018068963 </data>
                  <data bit_width="64"> 0.638670429447269 </data>
                  <data bit_width="128"> 2.14345228242037 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="32"> 0.180606018068963 </data>
                    <data bit_width="64"> 0.638670429447269 </data>
                    <data bit_width="128"> 2.14345228242037 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="32"> 0.18139487252718 </data>
                    <data bit_width="64"> 0.780832279707165 </data>
                    <data bit_width="128"> 2.60818175515508 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="32"> 0.188959740865559 </data>
                    <data bit_width="64"> 0.743462032091925 </data>
                    <data bit_width="128"> 2.58291098560576 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,64">
                <max>
                  <data bit_width="64"> 0.376583695093391 </data>
                  <data bit_width="128"> 1.75115198515832 </data>
                </max>
                <min>
                  <data bit_width="64"> 0.362972370575579 </data>
                  <data bit_width="128"> 1.3321368811999 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="64"> 0.362972370575579 </data>
                    <data bit_width="128"> 1.3321368811999 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="64"> 0.369768764875002 </data>
                    <data bit_width="128"> 1.50348296324327 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="64"> 0.376583695093391 </data>
                    <data bit_width="128"> 1.75115198515832 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,128">
                <max>
                  <data bit_width="128"> 0.920954860198778 </data>
                </max>
                <min>
                  <data bit_width="128"> 0.712595007473201 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="128"> 0.712595007473201 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="128"> 0.788792672216827 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="128"> 0.920954860198778 </data>
                  </priority>
                </typ>
              </parameters>
            </est_index>

            <est_index name="aspect_ratio">
              <!-- Dummy yet -->
            </est_index>

            <est_index name="height">
              <!-- Dummy yet -->
            </est_index>

            <est_index name="width">
              <!-- Dummy yet -->
            </est_index>
          </est_type>

          <est_type name="timing">
            <est_index name="delay">
              <unit> ns </unit>

              <parameters name="16,8">
                <max>
                  <data bit_width="8"> 1.11 </data>
                  <data bit_width="16"> 3.74 </data>
                  <data bit_width="32"> 5.89 </data>
                  <data bit_width="64"> 8.40 </data>
                  <data bit_width="128"> 12.90 </data>
                </max>
                <min>
                  <data bit_width="8"> 1.03 </data>
                  <data bit_width="16"> 1.85 </data>
                  <data bit_width="32"> 3.24 </data>
                  <data bit_width="64"> 4.22 </data>
                  <data bit_width="128"> 5.34 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 1.11 </data>
                    <data bit_width="16"> 2.64 </data>
                    <data bit_width="32"> 4.12 </data>
                    <data bit_width="64"> 7.09 </data>
                    <data bit_width="128"> 10.53 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 1.03 </data>
                    <data bit_width="16"> 1.85 </data>
                    <data bit_width="32"> 3.24 </data>
                    <data bit_width="64"> 4.22 </data>
                    <data bit_width="128"> 5.34 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 1.04 </data>
                    <data bit_width="16"> 3.74 </data>
                    <data bit_width="32"> 5.89 </data>
                    <data bit_width="64"> 8.40 </data>
                    <data bit_width="128"> 12.90 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,16">
                <max>
                  <data bit_width="16"> 1.54 </data>
                  <data bit_width="32"> 3.86 </data>
                  <data bit_width="64"> 6.52 </data>
                  <data bit_width="128"> 10.49 </data>
                </max>
                <min>
                  <data bit_width="16"> 1.03 </data>
                  <data bit_width="32"> 1.87 </data>
                  <data bit_width="64"> 3.02 </data>
                  <data bit_width="128"> 4.53 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 1.11 </data>
                    <data bit_width="32"> 3.10 </data>
                    <data bit_width="64"> 5.08 </data>
                    <data bit_width="128"> 9.20 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 1.03 </data>
                    <data bit_width="32"> 1.87 </data>
                    <data bit_width="64"> 3.02 </data>
                    <data bit_width="128"> 4.53 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 1.54 </data>
                    <data bit_width="32"> 3.86 </data>
                    <data bit_width="64"> 6.52 </data>
                    <data bit_width="128"> 10.49 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,32">
                <max>
                  <data bit_width="32"> 1.63 </data>
                  <data bit_width="64"> 5.23 </data>
                  <data bit_width="128"> 8.61 </data>
                </max>
                <min>
                  <data bit_width="32"> 1.04 </data>
                  <data bit_width="64"> 1.86 </data>
                  <data bit_width="128"> 3.18 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="32"> 1.11 </data>
                    <data bit_width="64"> 4.91 </data>
                    <data bit_width="128"> 8.01 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="32"> 1.04 </data>
                    <data bit_width="64"> 1.86 </data>
                    <data bit_width="128"> 3.18 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="32"> 1.63 </data>
                    <data bit_width="64"> 5.23 </data>
                    <data bit_width="128"> 8.61 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,64">
                <max>
                  <data bit_width="64"> 1.80 </data>
                  <data bit_width="128"> 5.75 </data>
                </max>
                <min>
                  <data bit_width="64"> 1.05 </data>
                  <data bit_width="128"> 2.04 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="64"> 1.80 </data>
                    <data bit_width="128"> 5.37 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="64"> 1.05 </data>
                    <data bit_width="128"> 2.04 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="64"> 1.56 </data>
                    <data bit_width="128"> 5.75 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,128">
                <max>
                  <data bit_width="128"> 2.84 </data>
                </max>
                <min>
                  <data bit_width="128"> 1.03 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="128"> 2.01 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="128"> 1.03 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="128"> 2.84 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,8">
                <max>
                  <data bit_width="8"> 1.11 </data>
                  <data bit_width="16"> 3.74 </data>
                  <data bit_width="32"> 5.89 </data>
                  <data bit_width="64"> 8.40 </data>
                  <data bit_width="128"> 12.89 </data>
                </max>
                <min>
                  <data bit_width="8"> 1.03 </data>
                  <data bit_width="16"> 1.85 </data>
                  <data bit_width="32"> 3.24 </data>
                  <data bit_width="64"> 4.22 </data>
                  <data bit_width="128"> 5.34 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 1.11 </data>
                    <data bit_width="16"> 2.64 </data>
                    <data bit_width="32"> 4.12 </data>
                    <data bit_width="64"> 7.09 </data>
                    <data bit_width="128"> 10.53 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 1.03 </data>
                    <data bit_width="16"> 1.85 </data>
                    <data bit_width="32"> 3.24 </data>
                    <data bit_width="64"> 4.22 </data>
                    <data bit_width="128"> 5.34 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 1.04 </data>
                    <data bit_width="16"> 3.74 </data>
                    <data bit_width="32"> 5.89 </data>
                    <data bit_width="64"> 8.40 </data>
                    <data bit_width="128"> 12.89 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,16">
                <max>
                  <data bit_width="16"> 1.54 </data>
                  <data bit_width="32"> 3.86 </data>
                  <data bit_width="64"> 6.52 </data>
                  <data bit_width="128"> 10.49 </data>
                </max>
                <min>
                  <data bit_width="16"> 1.03 </data>
                  <data bit_width="32"> 1.87 </data>
                  <data bit_width="64"> 3.02 </data>
                  <data bit_width="128"> 4.53 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 1.11 </data>
                    <data bit_width="32"> 3.10 </data>
                    <data bit_width="64"> 5.08 </data>
                    <data bit_width="128"> 9.20 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 1.03 </data>
                    <data bit_width="32"> 1.87 </data>
                    <data bit_width="64"> 3.02 </data>
                    <data bit_width="128"> 4.53 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 1.54 </data>
                    <data bit_width="32"> 3.86 </data>
                    <data bit_width="64"> 6.52 </data>
                    <data bit_width="128"> 10.49 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,32">
                <max>
                  <data bit_width="32"> 1.63 </data>
                  <data bit_width="64"> 5.23 </data>
                  <data bit_width="128"> 8.61 </data>
                </max>
                <min>
                  <data bit_width="32"> 1.04 </data>
                  <data bit_width="64"> 1.86 </data>
                  <data bit_width="128"> 3.18 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="32"> 1.11 </data>
                    <data bit_width="64"> 4.91 </data>
                    <data bit_width="128"> 8.01 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="32"> 1.04 </data>
                    <data bit_width="64"> 1.86 </data>
                    <data bit_width="128"> 3.18 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="32"> 1.63 </data>
                    <data bit_width="64"> 5.23 </data>
                    <data bit_width="128"> 8.61 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,64">
                <max>
                  <data bit_width="64"> 1.80 </data>
                  <data bit_width="128"> 5.75 </data>
                </max>
                <min>
                  <data bit_width="64"> 1.05 </data>
                  <data bit_width="128"> 2.04 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="64"> 1.80 </data>
                    <data bit_width="128"> 5.37 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="64"> 1.05 </data>
                    <data bit_width="128"> 2.04 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="64"> 1.56 </data>
                    <data bit_width="128"> 5.75 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,128">
                <max>
                  <data bit_width="128"> 2.84 </data>
                </max>
                <min>
                  <data bit_width="128"> 1.03 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="128"> 2.01 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="128"> 1.03 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="128"> 2.84 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,8">
                <max>
                  <data bit_width="8"> 1.11 </data>
                  <data bit_width="16"> 3.74 </data>
                  <data bit_width="32"> 5.90 </data>
                  <data bit_width="64"> 8.43 </data>
                  <data bit_width="128"> 12.92 </data>
                </max>
                <min>
                  <data bit_width="8"> 1.03 </data>
                  <data bit_width="16"> 1.85 </data>
                  <data bit_width="32"> 3.24 </data>
                  <data bit_width="64"> 4.21 </data>
                  <data bit_width="128"> 5.32 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 1.11 </data>
                    <data bit_width="16"> 2.64 </data>
                    <data bit_width="32"> 4.12 </data>
                    <data bit_width="64"> 7.09 </data>
                    <data bit_width="128"> 10.53 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 1.03 </data>
                    <data bit_width="16"> 1.85 </data>
                    <data bit_width="32"> 3.24 </data>
                    <data bit_width="64"> 4.21 </data>
                    <data bit_width="128"> 5.32 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 1.04 </data>
                    <data bit_width="16"> 3.74 </data>
                    <data bit_width="32"> 5.90 </data>
                    <data bit_width="64"> 8.43 </data>
                    <data bit_width="128"> 12.92 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,16">
                <max>
                  <data bit_width="16"> 1.54 </data>
                  <data bit_width="32"> 3.86 </data>
                  <data bit_width="64"> 6.53 </data>
                  <data bit_width="128"> 10.49 </data>
                </max>
                <min>
                  <data bit_width="16"> 1.03 </data>
                  <data bit_width="32"> 1.87 </data>
                  <data bit_width="64"> 3.02 </data>
                  <data bit_width="128"> 4.53 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 1.11 </data>
                    <data bit_width="32"> 3.10 </data>
                    <data bit_width="64"> 5.07 </data>
                    <data bit_width="128"> 9.20 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 1.03 </data>
                    <data bit_width="32"> 1.87 </data>
                    <data bit_width="64"> 3.02 </data>
                    <data bit_width="128"> 4.53 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 1.54 </data>
                    <data bit_width="32"> 3.86 </data>
                    <data bit_width="64"> 6.53 </data>
                    <data bit_width="128"> 10.49 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,32">
                <max>
                  <data bit_width="32"> 1.63 </data>
                  <data bit_width="64"> 5.23 </data>
                  <data bit_width="128"> 9.03 </data>
                </max>
                <min>
                  <data bit_width="32"> 1.04 </data>
                  <data bit_width="64"> 1.86 </data>
                  <data bit_width="128"> 3.18 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="32"> 1.11 </data>
                    <data bit_width="64"> 4.91 </data>
                    <data bit_width="128"> 8.01 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="32"> 1.04 </data>
                    <data bit_width="64"> 1.86 </data>
                    <data bit_width="128"> 3.18 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="32"> 1.63 </data>
                    <data bit_width="64"> 5.23 </data>
                    <data bit_width="128"> 9.03 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,64">
                <max>
                  <data bit_width="64"> 1.80 </data>
                  <data bit_width="128"> 5.75 </data>
                </max>
                <min>
                  <data bit_width="64"> 1.05 </data>
                  <data bit_width="128"> 2.04 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="64"> 1.80 </data>
                    <data bit_width="128"> 5.37 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="64"> 1.05 </data>
                    <data bit_width="128"> 2.04 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="64"> 1.56 </data>
                    <data bit_width="128"> 5.75 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,128">
                <max>
                  <data bit_width="128"> 2.84 </data>
                </max>
                <min>
                  <data bit_width="128"> 1.03 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="128"> 2.01 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="128"> 1.03 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="128"> 2.84 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,8">
                <max>
                  <data bit_width="8"> 1.11 </data>
                  <data bit_width="16"> 3.74 </data>
                  <data bit_width="32"> 5.89 </data>
                  <data bit_width="64"> 8.43 </data>
                  <data bit_width="128"> 12.90 </data>
                </max>
                <min>
                  <data bit_width="8"> 1.03 </data>
                  <data bit_width="16"> 1.85 </data>
                  <data bit_width="32"> 3.24 </data>
                  <data bit_width="64"> 4.21 </data>
                  <data bit_width="128"> 5.34 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 1.11 </data>
                    <data bit_width="16"> 2.64 </data>
                    <data bit_width="32"> 4.12 </data>
                    <data bit_width="64"> 7.09 </data>
                    <data bit_width="128"> 10.53 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 1.03 </data>
                    <data bit_width="16"> 1.85 </data>
                    <data bit_width="32"> 3.24 </data>
                    <data bit_width="64"> 4.21 </data>
                    <data bit_width="128"> 5.34 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 1.04 </data>
                    <data bit_width="16"> 3.74 </data>
                    <data bit_width="32"> 5.89 </data>
                    <data bit_width="64"> 8.43 </data>
                    <data bit_width="128"> 12.90 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,16">
                <max>
                  <data bit_width="16"> 1.54 </data>
                  <data bit_width="32"> 3.86 </data>
                  <data bit_width="64"> 6.52 </data>
                  <data bit_width="128"> 10.49 </data>
                </max>
                <min>
                  <data bit_width="16"> 1.03 </data>
                  <data bit_width="32"> 1.87 </data>
                  <data bit_width="64"> 3.02 </data>
                  <data bit_width="128"> 4.53 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 1.11 </data>
                    <data bit_width="32"> 3.10 </data>
                    <data bit_width="64"> 5.07 </data>
                    <data bit_width="128"> 9.20 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 1.03 </data>
                    <data bit_width="32"> 1.87 </data>
                    <data bit_width="64"> 3.02 </data>
                    <data bit_width="128"> 4.53 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 1.54 </data>
                    <data bit_width="32"> 3.86 </data>
                    <data bit_width="64"> 6.52 </data>
                    <data bit_width="128"> 10.49 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,32">
                <max>
                  <data bit_width="32"> 1.63 </data>
                  <data bit_width="64"> 5.23 </data>
                  <data bit_width="128"> 8.61 </data>
                </max>
                <min>
                  <data bit_width="32"> 1.04 </data>
                  <data bit_width="64"> 1.86 </data>
                  <data bit_width="128"> 3.18 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="32"> 1.11 </data>
                    <data bit_width="64"> 4.91 </data>
                    <data bit_width="128"> 8.01 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="32"> 1.04 </data>
                    <data bit_width="64"> 1.86 </data>
                    <data bit_width="128"> 3.18 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="32"> 1.63 </data>
                    <data bit_width="64"> 5.23 </data>
                    <data bit_width="128"> 8.61 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,64">
                <max>
                  <data bit_width="64"> 1.80 </data>
                  <data bit_width="128"> 5.75 </data>
                </max>
                <min>
                  <data bit_width="64"> 1.05 </data>
                  <data bit_width="128"> 2.04 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="64"> 1.80 </data>
                    <data bit_width="128"> 5.37 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="64"> 1.05 </data>
                    <data bit_width="128"> 2.04 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="64"> 1.56 </data>
                    <data bit_width="128"> 5.75 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,128">
                <max>
                  <data bit_width="128"> 2.84 </data>
                </max>
                <min>
                  <data bit_width="128"> 1.03 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="128"> 2.01 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="128"> 1.03 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="128"> 2.84 </data>
                  </priority>
                </typ>
              </parameters>
            </est_index>

            <est_index name="delay_fullpath">
            <!-- Dummy yet -->
            </est_index>
          </est_type>

          <est_type name="power">
            <est_index name="static_power">
              <unit> mW </unit>
              <parameters name="16,8">
                <max>
                  <data bit_width="8"> 9.7059 </data>
                  <data bit_width="16"> 38.2709 </data>
                  <data bit_width="32"> 131.8512 </data>
                  <data bit_width="64"> 379.1205 </data>
                  <data bit_width="128"> 925.8934 </data>
                </max>
                <min>
                  <data bit_width="8"> 7.6890 </data>
                  <data bit_width="16"> 26.8109 </data>
                  <data bit_width="32"> 88.7195 </data>
                  <data bit_width="64"> 242.9874 </data>
                  <data bit_width="128"> 675.2848 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 8.6937 </data>
                    <data bit_width="16"> 30.9092 </data>
                    <data bit_width="32"> 112.0353 </data>
                    <data bit_width="64"> 291.2534 </data>
                    <data bit_width="128"> 776.5723 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 9.7059 </data>
                    <data bit_width="16"> 38.2709 </data>
                    <data bit_width="32"> 131.8512 </data>
                    <data bit_width="64"> 379.1205 </data>
                    <data bit_width="128"> 925.8934 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 7.6890 </data>
                    <data bit_width="16"> 26.8109 </data>
                    <data bit_width="32"> 88.7195 </data>
                    <data bit_width="64"> 242.9874 </data>
                    <data bit_width="128"> 675.2848 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,16">
                <max>
                  <data bit_width="16"> 16.3745 </data>
                  <data bit_width="32"> 70.9144 </data>
                  <data bit_width="64"> 267.0685 </data>
                  <data bit_width="128"> 717.6888 </data>
                </max>
                <min>
                  <data bit_width="16"> 14.1729 </data>
                  <data bit_width="32"> 53.7902 </data>
                  <data bit_width="64"> 181.4695 </data>
                  <data bit_width="128"> 535.0379 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 16.2562 </data>
                    <data bit_width="32"> 58.5368 </data>
                    <data bit_width="64"> 226.9377 </data>
                    <data bit_width="128"> 619.7018 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 16.3745 </data>
                    <data bit_width="32"> 70.9144 </data>
                    <data bit_width="64"> 267.0685 </data>
                    <data bit_width="128"> 717.6888 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 14.1729 </data>
                    <data bit_width="32"> 53.7902 </data>
                    <data bit_width="64"> 181.4695 </data>
                    <data bit_width="128"> 535.0379 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,32">
                <max>
                  <data bit_width="32"> 30.8916 </data>
                  <data bit_width="64"> 138.8173 </data>
                  <data bit_width="128"> 518.9013 </data>
                </max>
                <min>
                  <data bit_width="32"> 27.5147 </data>
                  <data bit_width="64"> 104.2332 </data>
                  <data bit_width="128"> 386.3272 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="32"> 30.7092 </data>
                    <data bit_width="64"> 117.6191 </data>
                    <data bit_width="128"> 477.1381 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="32"> 30.8916 </data>
                    <data bit_width="64"> 138.8173 </data>
                    <data bit_width="128"> 518.9013 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="32"> 27.5147 </data>
                    <data bit_width="64"> 104.2332 </data>
                    <data bit_width="128"> 386.3272 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,64">
                <max>
                  <data bit_width="64"> 61.7459 </data>
                  <data bit_width="128"> 266.2877 </data>
                </max>
                <min>
                  <data bit_width="64"> 56.7440 </data>
                  <data bit_width="128"> 225.7758 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="64"> 61.7459 </data>
                    <data bit_width="128"> 242.8607 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="64"> 59.7873 </data>
                    <data bit_width="128"> 266.2877 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="64"> 56.7440 </data>
                    <data bit_width="128"> 225.7758 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,128">
                <max>
                  <data bit_width="128"> 124.6186 </data>
                </max>
                <min>
                  <data bit_width="128"> 115.9140 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="128"> 121.9134 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="128"> 124.6186 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="128"> 115.9140 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,8">
                <max>
                  <data bit_width="8"> 10.0460 </data>
                  <data bit_width="16"> 38.6110 </data>
                  <data bit_width="32"> 132.3105 </data>
                  <data bit_width="64"> 381.6944 </data>
                  <data bit_width="128"> 924.7305 </data>
                </max>
                <min>
                  <data bit_width="8"> 8.0291 </data>
                  <data bit_width="16"> 27.1511 </data>
                  <data bit_width="32"> 89.1315 </data>
                  <data bit_width="64"> 243.4437 </data>
                  <data bit_width="128"> 675.6988 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 9.0338 </data>
                    <data bit_width="16"> 31.2493 </data>
                    <data bit_width="32"> 112.4472 </data>
                    <data bit_width="64"> 291.7097 </data>
                    <data bit_width="128"> 777.0349 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 10.0460 </data>
                    <data bit_width="16"> 38.6110 </data>
                    <data bit_width="32"> 132.3105 </data>
                    <data bit_width="64"> 381.6944 </data>
                    <data bit_width="128"> 924.7305 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 8.0291 </data>
                    <data bit_width="16"> 27.1511 </data>
                    <data bit_width="32"> 89.1315 </data>
                    <data bit_width="64"> 243.4437 </data>
                    <data bit_width="128"> 675.6988 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,16">
                <max>
                  <data bit_width="16"> 16.7146 </data>
                  <data bit_width="32"> 71.3264 </data>
                  <data bit_width="64"> 268.2347 </data>
                  <data bit_width="128"> 717.9545 </data>
                </max>
                <min>
                  <data bit_width="16"> 14.5124 </data>
                  <data bit_width="32"> 54.2184 </data>
                  <data bit_width="64"> 181.9258 </data>
                  <data bit_width="128"> 535.5337 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 16.5963 </data>
                    <data bit_width="32"> 58.8154 </data>
                    <data bit_width="64"> 227.5727 </data>
                    <data bit_width="128"> 620.2240 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 16.7146 </data>
                    <data bit_width="32"> 71.3264 </data>
                    <data bit_width="64"> 268.2347 </data>
                    <data bit_width="128"> 717.9545 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 14.5124 </data>
                    <data bit_width="32"> 54.2184 </data>
                    <data bit_width="64"> 181.9258 </data>
                    <data bit_width="128"> 535.5337 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,32">
                <max>
                  <data bit_width="32"> 31.2317 </data>
                  <data bit_width="64"> 139.2380 </data>
                  <data bit_width="128"> 519.9050 </data>
                </max>
                <min>
                  <data bit_width="32"> 27.8549 </data>
                  <data bit_width="64"> 104.7993 </data>
                  <data bit_width="128"> 386.8490 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="32"> 31.0500 </data>
                    <data bit_width="64"> 118.0957 </data>
                    <data bit_width="128"> 477.6496 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="32"> 31.2317 </data>
                    <data bit_width="64"> 139.2380 </data>
                    <data bit_width="128"> 519.9050 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="32"> 27.8549 </data>
                    <data bit_width="64"> 104.7993 </data>
                    <data bit_width="128"> 386.8490 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,64">
                <max>
                  <data bit_width="64"> 62.1187 </data>
                  <data bit_width="128"> 266.4648 </data>
                </max>
                <min>
                  <data bit_width="64"> 57.1560 </data>
                  <data bit_width="128"> 226.0893 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="64"> 62.1187 </data>
                    <data bit_width="128"> 243.3289 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="64"> 60.1993 </data>
                    <data bit_width="128"> 266.4648 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="64"> 57.1560 </data>
                    <data bit_width="128"> 226.0893 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,128">
                <max>
                  <data bit_width="128"> 125.0750 </data>
                </max>
                <min>
                  <data bit_width="128"> 116.3703 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="128"> 122.3272 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="128"> 125.0750 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="128"> 116.3703 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,8">
                <max>
                  <data bit_width="8"> 10.7263 </data>
                  <data bit_width="16"> 39.2913 </data>
                  <data bit_width="32"> 133.1610 </data>
                  <data bit_width="64"> 382.3527 </data>
                  <data bit_width="128"> 927.2910 </data>
                </max>
                <min>
                  <data bit_width="8"> 8.7094 </data>
                  <data bit_width="16"> 27.8313 </data>
                  <data bit_width="32"> 89.9552 </data>
                  <data bit_width="64"> 244.3810 </data>
                  <data bit_width="128"> 676.8214 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 9.7141 </data>
                    <data bit_width="16"> 31.9295 </data>
                    <data bit_width="32"> 113.2712 </data>
                    <data bit_width="64"> 292.6223 </data>
                    <data bit_width="128"> 778.0301 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 10.7263 </data>
                    <data bit_width="16"> 39.2913 </data>
                    <data bit_width="32"> 133.1610 </data>
                    <data bit_width="64"> 382.3527 </data>
                    <data bit_width="128"> 927.2910 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 8.7094 </data>
                    <data bit_width="16"> 27.8313 </data>
                    <data bit_width="32"> 89.9552 </data>
                    <data bit_width="64"> 244.3810 </data>
                    <data bit_width="128"> 676.8214 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,16">
                <max>
                  <data bit_width="16"> 17.3949 </data>
                  <data bit_width="32"> 72.2338 </data>
                  <data bit_width="64"> 269.2593 </data>
                  <data bit_width="128"> 719.2770 </data>
                </max>
                <min>
                  <data bit_width="16"> 15.1931 </data>
                  <data bit_width="32"> 55.0423 </data>
                  <data bit_width="64"> 182.8384 </data>
                  <data bit_width="128"> 536.5009 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 17.2766 </data>
                    <data bit_width="32"> 59.4957 </data>
                    <data bit_width="64"> 228.5377 </data>
                    <data bit_width="128"> 621.2673 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 17.3949 </data>
                    <data bit_width="32"> 72.2338 </data>
                    <data bit_width="64"> 269.2593 </data>
                    <data bit_width="128"> 719.2770 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 15.1931 </data>
                    <data bit_width="32"> 55.0423 </data>
                    <data bit_width="64"> 182.8384 </data>
                    <data bit_width="128"> 536.5009 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,32">
                <max>
                  <data bit_width="32"> 31.9120 </data>
                  <data bit_width="64"> 139.9771 </data>
                  <data bit_width="128"> 519.0173 </data>
                </max>
                <min>
                  <data bit_width="32"> 28.5352 </data>
                  <data bit_width="64"> 105.6233 </data>
                  <data bit_width="128"> 387.7830 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="32"> 31.7272 </data>
                    <data bit_width="64"> 118.9810 </data>
                    <data bit_width="128"> 478.6823 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="32"> 31.9120 </data>
                    <data bit_width="64"> 139.9771 </data>
                    <data bit_width="128"> 519.0173 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="32"> 28.5352 </data>
                    <data bit_width="64"> 105.6233 </data>
                    <data bit_width="128"> 387.7830 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,64">
                <max>
                  <data bit_width="64"> 62.9403 </data>
                  <data bit_width="128"> 267.3982 </data>
                </max>
                <min>
                  <data bit_width="64"> 57.9799 </data>
                  <data bit_width="128"> 227.1391 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="64"> 62.9403 </data>
                    <data bit_width="128"> 244.1557 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="64"> 61.0232 </data>
                    <data bit_width="128"> 267.3982 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="64"> 57.9799 </data>
                    <data bit_width="128"> 227.1391 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,128">
                <max>
                  <data bit_width="128"> 125.9875 </data>
                </max>
                <min>
                  <data bit_width="128"> 117.2814 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="128"> 123.1586 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="128"> 125.9875 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="128"> 117.2814 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,8">
                <max>
                  <data bit_width="8"> 12.0869 </data>
                  <data bit_width="16"> 40.6251 </data>
                  <data bit_width="32"> 134.2491 </data>
                  <data bit_width="64"> 383.1406 </data>
                  <data bit_width="128"> 931.3599 </data>
                </max>
                <min>
                  <data bit_width="8"> 10.0539 </data>
                  <data bit_width="16"> 29.2300 </data>
                  <data bit_width="32"> 91.6415 </data>
                  <data bit_width="64"> 246.1905 </data>
                  <data bit_width="128"> 679.0334 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 11.0746 </data>
                    <data bit_width="16"> 33.3492 </data>
                    <data bit_width="32"> 114.9701 </data>
                    <data bit_width="64"> 294.4477 </data>
                    <data bit_width="128"> 780.2841 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 12.0869 </data>
                    <data bit_width="16"> 40.6251 </data>
                    <data bit_width="32"> 134.2491 </data>
                    <data bit_width="64"> 383.1406 </data>
                    <data bit_width="128"> 931.3599 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 10.0539 </data>
                    <data bit_width="16"> 29.2300 </data>
                    <data bit_width="32"> 91.6415 </data>
                    <data bit_width="64"> 246.1905 </data>
                    <data bit_width="128"> 679.0334 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,16">
                <max>
                  <data bit_width="16"> 18.7554 </data>
                  <data bit_width="32"> 73.6428 </data>
                  <data bit_width="64"> 270.5666 </data>
                  <data bit_width="128"> 722.0201 </data>
                </max>
                <min>
                  <data bit_width="16"> 16.5530 </data>
                  <data bit_width="32"> 56.6383 </data>
                  <data bit_width="64"> 184.5386 </data>
                  <data bit_width="128"> 537.8710 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 18.6371 </data>
                    <data bit_width="32"> 60.8442 </data>
                    <data bit_width="64"> 230.1477 </data>
                    <data bit_width="128"> 623.3547 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 18.7554 </data>
                    <data bit_width="32"> 73.6428 </data>
                    <data bit_width="64"> 270.5666 </data>
                    <data bit_width="128"> 722.0201 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 16.5530 </data>
                    <data bit_width="32"> 56.6383 </data>
                    <data bit_width="64"> 184.5386 </data>
                    <data bit_width="128"> 537.8710 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,32">
                <max>
                  <data bit_width="32"> 33.2727 </data>
                  <data bit_width="64"> 141.4080 </data>
                  <data bit_width="128"> 523.0338 </data>
                </max>
                <min>
                  <data bit_width="32"> 29.8959 </data>
                  <data bit_width="64"> 107.4075 </data>
                  <data bit_width="128"> 389.7528 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="32"> 33.0892 </data>
                    <data bit_width="64"> 120.7265 </data>
                    <data bit_width="128"> 481.9712 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="32"> 33.2727 </data>
                    <data bit_width="64"> 141.4080 </data>
                    <data bit_width="128"> 523.0338 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="32"> 29.8959 </data>
                    <data bit_width="64"> 107.4075 </data>
                    <data bit_width="128"> 389.7528 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,64">
                <max>
                  <data bit_width="64"> 64.6288 </data>
                  <data bit_width="128"> 268.9437 </data>
                </max>
                <min>
                  <data bit_width="64"> 59.6278 </data>
                  <data bit_width="128"> 229.1398 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="64"> 64.6288 </data>
                    <data bit_width="128"> 246.1786 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="64"> 62.6612 </data>
                    <data bit_width="128"> 268.9437 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="64"> 59.6278 </data>
                    <data bit_width="128"> 229.1398 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,128">
                <max>
                  <data bit_width="128"> 127.8129 </data>
                </max>
                <min>
                  <data bit_width="128"> 119.1067 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="128"> 124.7137 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="128"> 127.8129 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="128"> 119.1067 </data>
                  </priority>
                </typ>
              </parameters>
            </est_index>
          </est_type>

          <est_type name="function_cycle">
            <!-- Dummy yet -->
          </est_type>

          <est_type name="function_power">
            <!-- Dummy yet -->
          </est_type>
        </library>
      </estimation_data>

      <estimation_method>
         
        <est_type name="shape">

          <est_index name="area">

            <parameters name="16,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(16,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(16,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(16,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(16,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(16,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(32,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(32,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(32,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(32,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(32,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(64,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(64,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(64,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(64,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(64,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(128,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(128,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(128,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(128,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(128,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

          </est_index>

           <est_index name="aspect_ratio">

             <!-- Dummy yet -->

           </est_index>
		
           <est_index name="height">

             <!-- Dummy yet -->

           </est_index>
		
           <est_index name="width">

             <!-- Dummy yet -->

           </est_index>
		
        </est_type>

        <est_type name="timing">

          <est_index name="delay">

            <parameters name="16,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(16,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(16,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(16,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(16,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(16,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(32,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(32,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(32,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(32,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(32,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(64,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(64,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(64,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(64,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(64,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(128,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(128,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(128,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(128,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(128,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

          </est_index>

          <est_index name="delay_fullpath">

            <parameters name="16,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(16,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="16,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(16,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="16,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(16,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="16,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(16,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="16,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(16,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="32,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(32,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="32,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(32,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="32,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(32,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="32,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(32,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="32,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(32,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="64,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(64,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="64,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(64,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="64,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(64,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="64,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(64,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="64,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(64,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="128,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(128,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="128,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(128,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="128,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(128,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="128,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(128,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="128,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(128,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

          </est_index>

        </est_type>

        <est_type name="power">

          <est_index name="static_power">

            <parameters name="16,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(16,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(16,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(16,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(16,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(16,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(32,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(32,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(32,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(32,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(32,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(64,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(64,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(64,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(64,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(64,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(128,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(128,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(128,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(128,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(128,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

          </est_index>

        </est_type>

        <est_type name="function_cycle">

        </est_type>

        <est_type name="function_power">

        </est_type>

    
      </estimation_method>

    </estimation>

  </model>

  <model>
    <design_level> synthesis </design_level>
    <version> 1.0 </version>
    <author> <![CDATA[ Kyoko UEDA ]]> </author>
    <affiliation> <![CDATA[ Osaka Univ. ]]> </affiliation>
    <model_info> <![CDATA[ (c)2001,PEAS3-Lite Project ]]> </model_info>

    <parameter>
      <parameter_value key="bit_width">
        <value> 8 </value>
        <value> 16 </value>
        <value> 32 </value>
        <value> 64 </value>
        <value> 128 </value>
      </parameter_value>
      <parameter_value key="address_space">
        <value> 16 </value>
        <value> 32 </value>
        <value> 64 </value>
        <value> 128 </value>
      </parameter_value>
      <parameter_value key="access_width">
        <value> 8 </value>
        <value> 16 </value>
        <value> 32 </value>
        <value> 64 </value>
        <value> 128 </value>
      </parameter_value>
    </parameter>

    <function_description>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates function definition for dmau in synthesis level
# parameter : bit_width address_space access_width

if ($#ARGV != 2){
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width address_space access_width\n";
    exit (100);
}
$bit_width = $ARGV[0];
$addr_space = $ARGV[1];
$access = $ARGV[2];

@bit_widths = (8, 16, 32, 64, 128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

@addr_spaces = (4, 8, 16, 32, 64, 128);
if (! grep($_ eq $addr_space, @addr_spaces)){
    print "address_space $addr_space is not supported.\n";
    exit (100);
}

@accesses = (8, 16, 32, 64, 128);
if (! grep($_ eq $access, @accesses)){
    print "access_width $access is not supported.\n";
    exit (100);
}

if ($bit_width < $access){
   print "The value of \"access_width\" must be less than the value of \"bit_width\".\n";
   exit(100);
}
 
$a_tmp = $access;
while ($bit_width != $a_tmp){
    if ($bit_width < $a_tmp){
	print "The value of \"bit_width\" must be 2^n * \"access_width\".\n";
	exit (100);
    }
    $a_tmp = $a_tmp * 2;
}

$b_1 = $bit_width - 1;
$a_1 = $addr_space - 1;

$b_range = "${b_1}:0";
$a_range = "${a_1}:0";

$wmode_num = $bit_width/$access;
$wmode_1 = $wmode_num - 1;

$acmode_num = &log2u($wmode_num);
$acmode_1 = $acmode_num - 1;

if ($acmode_num == 0){
    $acmode_str = "";
    $ext_str = "";
    $aerr_str = "";
    $wmode_str = "";
}
else{
    $wmode_str = "[$wmode_1:0]";
    if ($acmode_num == 1){
        $acmode_str = "ac_mode, ";
	$a_t_comma = "'";
    }
    else{
	$acmode_str = "ac_mode[$acmode_1:0], ";
	$a_t_comma = "\"";
    }
    $ext_str = "ext_mode, ";
    $aerr_str = "addr_err, ";
}

$b_str = $a_t_comma . &to_comp($wmode_1, $acmode_num) . $a_t_comma;
$b_h = $bit_width / 2;
$b_h_str = $a_t_comma . &to_comp($b_h/$access-1, $acmode_num) . $a_t_comma;
$b_b = 8;
$b_b_str = $a_t_comma . &to_comp(0, $acmode_num) . $a_t_comma;

if ($bit_width != $access){
    print "bit addr_err(bit_vector addr, bit_vector ac_mode);\n\n";
}

{
    print <<FHM_DL_FUNC
/** ${bit_width}-bit data memory access unit */
model dmau${bit_width}{
  port{
    in    reset;
    in    req, rw, ${acmode_str}${ext_str}addr[${a_range}], data_in[${b_range}];
    out   ${aerr_str}req_bus, w_mode_bus$wmode_str, addr_bus[${a_range}];
    inout data_bus[${b_range}];
    in    ack_bus;
    out   ack, data_out[${b_range}];
  }
  default_control{
    reset   = 0;
    req     = 0;
  }

  /** no operation */
  function nop : idle{
    control{
      in reset, req;
    }
    protocol{
      [reset ==0 && req == 0]{
      }
    }
  }

  /** reset */
  function reset : reset{
    assignment{
      reg = 0;
    }
    control{
      in reset;
    }
    protocol{
      [reset == 0]{
	store reg;
      }
    }
  }

FHM_DL_FUNC
    }
if ($acmode_num != 0){
    {
	print <<FHM_DL_FUNC
  /** load ${bit_width} bits */
  function ld_${bit_width}{
    input{
      bit_vector addr;
    }
    output{
      bit_vector data_out = data_bus;
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 0 && ac_mode == ${b_str}] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid data_out;
	valid addr_err;
      }
    }
  }

FHM_DL_FUNC
    }
    for ($i=$wmode_1,$w_b=$bit_width-$access; $i>0; $i--,$w_b=$w_b-$access){
	$str = $a_t_comma . &to_comp($i-1, $acmode_num) . $a_t_comma;
	{
	    print <<FHM_DL_FUNC
  /** load ${w_b} bits */
  function ld_${w_b}{
    input{
      bit_vector addr;
    }
    output{
      bit_vector data_out = data_bus;
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode, ext_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 0 && ac_mode == $str && ext_mode == 1] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid data_out;
	valid addr_err;
      }
    }
  }

  /** load ${w_b} bits (unsigned) */
  function ldu_${w_b}{
    input{
      bit_vector addr;
    }
    output{
      bit_vector data_out = data_bus;
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode, ext_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 0 && ac_mode == $str && ext_mode == 0] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid data_out;
	valid addr_err;
      }
    }
  }

FHM_DL_FUNC
        }
    }
    {
	print <<FHM_DL_FUNC
  /** store ${bit_width} bits */
  function s_${bit_width}{
    input{
      bit_vector addr;
      bit_vector data_in;
    }
    output{
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 1 && ac_mode == ${b_str}] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid addr_err;
      }
    }
  }

FHM_DL_FUNC
    }
    for ($i=$wmode_1,$w_b=$bit_width-$access; $i>0; $i--,$w_b=$w_b-$access){
	$str = $a_t_comma . &to_comp($i-1, $acmode_num) . $a_t_comma;
	{
	    print <<FHM_DL_FUNC
  /** store ${w_b} bits */
  function s_${w_b}{
    input{
      bit_vector addr;
      bit_vector data_in;
    }
    output{
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 1 && ac_mode == $str] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid addr_err;
      }
    }
  }

FHM_DL_FUNC
        }
    }
    {
	print <<FHM_DL_FUNC
  /** load : same as ld_${bit_width} */
  function load{
    input{
      bit_vector addr;
    }
    output{
      bit_vector data_out = data_bus;
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 0 && ac_mode == ${b_str}] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid data_out;
	valid addr_err;
      }
    }
  }

  /** read : same as ld_${bit_width} */
  function read{
    input{
      bit_vector addr;
    }
    output{
      bit_vector data_out = data_bus;
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 0 && ac_mode == ${b_str}] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid data_out;
	valid addr_err;
      }
    }
  }

  /** lh : same as ld_${b_h} */
  function lh{
    input{
      bit_vector addr;
    }
    output{
      bit_vector data_out = data_bus;
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode, ext_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 0 && ac_mode == ${b_h_str} && ext_mode = 1] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid data_out;
	valid addr_err;
      }
    }
  }

  /** lhu : same as ldu_${b_h} */
  function lhu{
    input{
      bit_vector addr;
    }
    output{
      bit_vector data_out = data_bus;
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode, ext_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 0 && ac_mode == ${b_h_str} && ext_mode = 0] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid data_out;
	valid addr_err;
      }
    }
  }

  /** lb : same as ld_${b_b} */
  function lb{
    input{
      bit_vector addr;
    }
    output{
      bit_vector data_out = data_bus;
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode, ext_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 0 && ac_mode == ${b_b_str} && ext_mode = 1] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid data_out;
	valid addr_err;
      }
    }
  }

  /** lbu : same as ldu_${b_b} */
  function lbu{
    input{
      bit_vector addr;
    }
    output{
      bit_vector data_out = data_bus;
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode, ext_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 0 && ac_mode == ${b_b_str} && ext_mode = 0] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid data_out;
	valid addr_err;
      }
    }
  }

  /** store : same as s_${bit_width} */
  function store{
    input{
      bit_vector addr;
      bit_vector data_in;
    }
    output{
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 1 && ac_mode == ${b_str}] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid addr_err;
      }
    }
  }

  /** write : same as s_${bit_width} */
  function write{
    input{
      bit_vector addr;
      bit_vector data_in;
    }
    output{
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 1 && ac_mode == ${b_str}] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid addr_err;
      }
    }
  }

  /** sh : same as s_${b_h} */
  function sh{
    input{
      bit_vector addr;
      bit_vector data_in;
    }
    output{
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 1 && ac_mode == ${b_h_str}] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid addr_err;
      }
    }
  }

  /** sb : same as s_${b_b} */
  function sb{
    input{
      bit_vector addr;
      bit_vector data_in;
    }
    output{
      bit addr_err = addr_err(addr, ac_mode);
    }
    control{
      in  reset, req, rw, ac_mode;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 1 && ac_mode == ${b_b_str}] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid addr_err;
      }
    }
  }
}
FHM_DL_FUNC
    }
}
else{
    {
	print <<FHM_DL_FUNC
  /** load : load data */
  function load{
    input{
      bit_vector addr;
    }
    output{
      bit_vector data_out = data_bus;
    }
    control{
      in  reset, req, rw;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 0] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid data_out;
      }
    }
  }

  /** read : same as load */
  function read{
    input{
      bit_vector addr;
    }
    output{
      bit_vector data_out = data_bus;
    }
    control{
      in  reset, req, rw;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 0] until (ack == 1 || reset == 1);
      if (ack == 1){
	valid data_out;
      }
    }
  }

  /** store : store data */
  function store{
    input{
      bit_vector addr;
      bit_vector data_in;
    }
    control{
      in  reset, req, rw;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 1] until (ack == 1 || reset == 1);
    }
  }

  /** write : same as store */
  function write{
    input{
      bit_vector addr;
      bit_vector data_in;
    }
    control{
      in  reset, req, rw;
      out ack;
    }
    protocol{
      repeat [req == 1 && rw == 1] until (ack == 1 || reset == 1);
    }
  }
}
FHM_DL_FUNC
    }    
}
exit(0);

# -----------------------

sub log2u{
    $num = $_[0];

    if ($num == 1){
	return(0);
    }
    for ($i=1, $N=2; $N<$num; $i++, $N*=2){};
    return($i);
}

# ---------------------------------

sub to_comp{
  @buf = ();
  $num = $_[0];
  $width = $_[1];

  for ($x=1; $x<$width; $x++){
    $buf[$x] = $num % 2;
    $num = ($num - $buf[$x]) / 2;
  }
  $buf[$x] = $num % 2;
  return (join("", reverse(@buf)));
}
        ]]>
      </script>
    </function_description>

    <function_conv>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates function definition for dmau in synthesis level
# parameter : bit_width address_space access_width

if ($#ARGV != 2){
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width address_space access_width\n";
    exit (100);
}
$bit_width = $ARGV[0];
$addr_space = $ARGV[1];
$access = $ARGV[2];

@bit_widths = (8, 16, 32, 64, 128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

@addr_spaces = (4, 8, 16, 32, 64, 128);
if (! grep($_ eq $addr_space, @addr_spaces)){
    print "address_space $addr_space is not supported.\n";
    exit (100);
}

@accesses = (8, 16, 32, 64, 128);
if (! grep($_ eq $access, @accesses)){
    print "access_width $access is not supported.\n";
    exit (100);
}

$a_tmp = $access;
while ($bit_width != $a_tmp){
    if ($bit_width < $a_tmp){
	print "The value of \"bit_width\" must be 2^n * \"access_width\".\n";
	exit (100);
    }
    $a_tmp = $a_tmp * 2;
}

$b_1 = $bit_width - 1;
$a_1 = $addr_space - 1;

$wmode_num = $bit_width/$access;
$wmode_1 = $wmode_num - 1;

$acmode_num = &log2u($wmode_num);
$acmode_1 = $acmode_num - 1;

if ($acmode_num == 1){
    $a_t_comma = "'";
}
else{
    $ac_range = "[$acmode_1:0] ";
    $a_t_comma = "\"";
}

$b_str = $a_t_comma . &to_comp($wmode_1, $acmode_num) . $a_t_comma;
$b_h = $bit_width / 2;
$b_h_str = $a_t_comma . &to_comp($b_h/$access-1, $acmode_num) . $a_t_comma;
$b_b = 8;
$b_b_str = $a_t_comma . &to_comp(0, $acmode_num) . $a_t_comma;

{
    print <<FHM_DL_FUNC
/** nop */
function nop{
  input{
  }
  output{
  }
  control{
    in bit reset;
    in bit req;
  }
  protocol{
    single_cycle_protocol{
      reset = '0';
      req   = '0';
    }
  }
}

/** reset */
function reset{
  input{
  }
  output{
  }
  control{
    in bit reset;
  }
  protocol{
    single_cycle_protocol{
      reset = '1';
    }
  }
}

FHM_DL_FUNC
    }
if ($acmode_num != 0){
    {
	print <<FHM_DL_FUNC
/** load ${bit_width} bits */
function ld_${bit_width}{
  input{
    bit [$a_1:0] addr;
  }
  output{
    bit [$b_1:0] data_out;
    bit addr_err;
  }
  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '0';
      ac_mode = ${b_str};
    }
  }
}

FHM_DL_FUNC
    }
    for ($i=$wmode_1,$w_b=$bit_width-$access; $i>0; $i--,$w_b=$w_b-$access){
	$str = $a_t_comma . &to_comp($i-1, $acmode_num) . $a_t_comma;
	{
	    print <<FHM_DL_FUNC
/** load ${w_b} bits */
function ld_${w_b}{
  input{
    bit [$a_1:0] addr;
  }
  output{
    bit [$b_1:0] data_out;
    bit addr_err;
  }
  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    in  bit ext_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '0';
      ac_mode = ${str};
      ext_mode = '1';
    }
  }
}

/** load ${w_b} bits (unsigned) */
function ldu_${w_b}{
  input{
    bit [$a_1:0] addr;
  }
  output{
    bit [$b_1:0] data_out;
    bit addr_err;
  }
  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    in  bit ext_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '0';
      ac_mode = ${str};
      ext_mode = '0';
    }
  }
}

FHM_DL_FUNC
        }
    }
    {
	print <<FHM_DL_FUNC
/** store ${bit_width} bits */
function s_${bit_width}{
  input{
    bit [$a_1:0] addr;
    bit [$b_1:0] data_in;
  }

  output{
    bit addr_err;
  }

  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '1';
      ac_mode = $b_str;
    }
  }
}

FHM_DL_FUNC
    }
    for ($i=$wmode_1,$w_b=$bit_width-$access; $i>0; $i--,$w_b=$w_b-$access){
	$str = $a_t_comma . &to_comp($i-1, $acmode_num) . $a_t_comma;
	{
	    print <<FHM_DL_FUNC
  /** store ${w_b} bits */
  function s_${w_b}{
  input{
    bit [$a_1:0] addr;
    bit [$b_1:0] data_in;
  }

  output{
    bit addr_err;
  }

  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '1';
      ac_mode = $b_str;
    }
  }
}

FHM_DL_FUNC
        }
    }
    {
	print <<FHM_DL_FUNC
/** load : same as ld_${bit_width} */
function load{
  input{
    bit [$a_1:0] addr;
  }
  output{
    bit [$b_1:0] data_out;
    bit addr_err;
  }
  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '0';
      ac_mode = ${b_str};
    }
  }
}

/** read : same as ld_${bit_width} */
function read{
  input{
    bit [$a_1:0] addr;
  }
  output{
    bit [$b_1:0] data_out;
    bit addr_err;
  }
  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '0';
      ac_mode = ${b_str};
    }
  }
}

/** lh : same as ld_${b_h} */
function lh{
  input{
    bit [$a_1:0] addr;
  }
  output{
    bit [$b_1:0] data_out;
    bit addr_err;
  }
  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    in bit ext_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '0';
      ac_mode = ${b_h_str};
      ext_mode = '1';
    }
  }
}

/** lhu : same as ldu_${b_h} */
function lhu{
  input{
    bit [$a_1:0] addr;
  }
  output{
    bit [$b_1:0] data_out;
    bit addr_err;
  }
  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    in bit ext_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '0';
      ac_mode = ${b_h_str};
      ext_mode = '0';
    }
  }
}

/** lb : same as ld_${b_b} */
function lb{
  input{
    bit [$a_1:0] addr;
  }
  output{
    bit [$b_1:0] data_out;
    bit addr_err;
  }
  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    in bit ext_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '0';
      ac_mode = ${b_b_str};
      ext_mode = '1';
    }
  }
}

/** lbu : same as ldu_${b_b} */
function lbu{
  input{
    bit [$a_1:0] addr;
  }
  output{
    bit [$b_1:0] data_out;
    bit addr_err;
  }
  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    in bit ext_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '0';
      ac_mode = ${b_b_str};
      ext_mode = '0';
    }
  }
}

/** store : same as s_${bit_width} */
function store{
  input{
    bit [$a_1:0] addr;
    bit [$b_1:0] data_in;
  }

  output{
    bit addr_err;
  }

  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '1';
      ac_mode = $b_str;
    }
  }
}

/** write : same as s_${bit_width} */
function write{
  input{
    bit [$a_1:0] addr;
    bit [$b_1:0] data_in;
  }

  output{
    bit addr_err;
  }

  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '1';
      ac_mode = $b_str;
    }
  }
}

/** sh : same as s_${b_h} */
function sh{
  input{
    bit [$a_1:0] addr;
    bit [$b_1:0] data_in;
  }

  output{
    bit addr_err;
  }

  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '1';
      ac_mode = $b_h_str;
    }
  }
}

/** sb : same as s_${b_b} */
function sb{
  input{
    bit [$a_1:0] addr;
    bit [$b_1:0] data_in;
  }

  output{
    bit addr_err;
  }

  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    in  bit ${ac_range}ac_mode;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '1';
      ac_mode = $b_b_str;
    }
  }
}
FHM_DL_FUNC
    }
}
else{
    {
	print <<FHM_DL_FUNC
/** load : load data */
function load{
  input{
    bit [$a_1:0] addr;
  }

  output{
    bit [$b_1:0] data_out;
  }

  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '0';
    }
  }
}

/** read : same as load */
function read{
  input{
    bit [$a_1:0] addr;
  }

  output{
    bit [$b_1:0] data_out;
  }

  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '0';
    }
  }
}

/** store : store data */
function store{
  input{
    bit [$a_1:0] addr;
    bit [$b_1:0] data_in;
  }

  output{
  }

  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '1';
    }
  }
}

/** write : same as store */
function write{
  input{
    bit [$a_1:0] addr;
    bit [$b_1:0] data_in;
  }

  output{
  }

  control{
    in  bit reset;
    in  bit req;
    in  bit rw;
    out bit ack;
  }

  protocol{
    multi_cycle_protocol{
      start_signal  req   = '1';
      fin_signal    ack   = '1';
      cancel_signal reset = '1';

      rw = '1';
    }
  }
}
FHM_DL_FUNC
    }
}
exit(0);

# -----------------------

sub log2u{
    $num = $_[0];

    if ($num == 1){
	return(0);
    }
    for ($i=1, $N=2; $N<$num; $i++, $N*=2){};
    return($i);
}

# ---------------------------------

sub to_comp{
  @buf = ();
  $num = $_[0];
  $width = $_[1];

  for ($x=1; $x<$width; $x++){
    $buf[$x] = $num % 2;
    $num = ($num - $buf[$x]) / 2;
  }
  $buf[$x] = $num % 2;
  return (join("", reverse(@buf)));
}
        ]]>
      </script>
    </function_conv>

    <function_port>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates port information for dmau in synthesis level
# parameter : bit_width address_space access_width

if ($#ARGV != 2){
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width address_space access_width\n";
    exit (100);
}
$bit_width = $ARGV[0];
$addr_space = $ARGV[1];
$access = $ARGV[2];

@bit_widths = (8, 16, 32, 64, 128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

@addr_spaces = (4, 8, 16, 32, 64, 128);
if (! grep($_ eq $addr_space, @addr_spaces)){
    print "address_space $addr_space is not supported.\n";
    exit (100);
}

@accesses = (8, 16, 32, 64, 128);
if (! grep($_ eq $access, @accesses)){
    print "access_width $access is not supported.\n";
    exit (100);
}

$a_tmp = $access;
while ($bit_width != $a_tmp){
    if ($bit_width < $a_tmp){
	print "The value of \"bit_width\" must be 2^n * \"access_width\".\n";
	exit (100);
    }
    $a_tmp = $a_tmp * 2;
}

$b_1 = $bit_width - 1;
$a_1 = $addr_space - 1;

$b_range = "${b_1}:0";
$a_range = "${a_1}:0";

$wmode_num = $bit_width/$access;
$wmode_1 = $wmode_num - 1;

$acmode_num = &log2u($wmode_num);
$acmode_1 = $acmode_num - 1;

if ($acmode_num == 0){
    $acmode_str = "";
    $ext_str = "";
    $aerr_str = "";
    $wmode_str = "bit";
}
else{
    $wmode_str = "bit_vector   $wmode_1   0";
    if ($acmode_num == 1){
        $acmode_str = "\nac_mode	in	bit		ctrl";
	$a_t_comma = "'";
    }
    else{
	$acmode_str = "\nac_mode	in	bit_vector   $acmode_1   0	ctrl";
	$a_t_comma = "\"";
    }
    $ext_str = "\next_mode	in	bit	ctrl";
    $aerr_str = "\naddr_err	out	bit	data";
}

{
    print <<FHM_DL_FUNC
reset	in	bit		reset
req	in	bit		ctrl
rw	in	bit		ctrl${acmode_str}${ext_str}
addr	in	bit_vector   $a_1   0	data
data_in	in	bit_vector   $b_1   0	data${aerr_str}
req_bus	out	bit	data
w_mode_bus	out	${wmode_str}	data
addr_bus	out	bit_vector   $a_1   0	data
data_bus	inout	bit_vector   $b_1   0	data
ack_bus	in	bit	data
ack	out	bit	ctrl
data_out	out	bit_vector   $b_1   0	data
FHM_DL_FUNC
}
exit(0);

# -----------------------

sub log2u{
    $num = $_[0];

    if ($num == 1){
	return(0);
    }
    for ($i=1, $N=2; $N<$num; $i++, $N*=2){};
    return($i);
}

# ---------------------------------

sub to_comp{
  @buf = ();
  $num = $_[0];
  $width = $_[1];

  for ($x=1; $x<$width; $x++){
    $buf[$x] = $num % 2;
    $num = ($num - $buf[$x]) / 2;
  }
  $buf[$x] = $num % 2;
  return (join("", reverse(@buf)));
}
        ]]>
      </script>
    </function_port>

    <design>
      <design_lang> vhdl </design_lang>

      <instance>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates instance for dmau in synthesis level
# parameter : instance_name bit_width address_space

if ($#ARGV != 3){
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name bit_width address_space access_width\n";
    exit (100);
}

$instance_name = $ARGV[0];
$bit_width = $ARGV[1];
$addr_space = $ARGV[2];
$access = $ARGV[3];

@bit_widths = (8, 16, 32, 64, 128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

@addr_spaces = (4, 8, 16, 32, 64, 128);
if (! grep($_ eq $addr_space, @addr_spaces)){
    print "address_space $addr_space is not supported.\n";
    exit (100);
}

@accesses = (8, 16, 32, 64, 128);
if (! grep($_ eq $access, @accesses)){
    print "access_width $access is not supported.\n";
    exit (100);
}

$a_tmp = $access;
while ($bit_width != $a_tmp){
    if ($bit_width < $a_tmp){
	print "The value of \"bit_width\" must be 2^n * \"access_width\".\n";
	exit (100);
    }
    $a_tmp = $a_tmp * 2;
}

$b4 = $bit_width;
$b4_1 = $b4 - 1;

$wmode_num = $bit_width/$access;
$wmode_1 = $wmode_num - 1;
$a_1 = $addr_space - 1;
$a_tmp_1 = $a_tmp - 1;
$acmode_num = &log2u($wmode_num);
$acmode_1 = $acmode_num - 1;
if ($wmode_num == 1){
    $wmode_port = "std_logic";
    $a_tmp = 0;
    $acmode_num_str_0 =  "";
}
else{
    $wmode_port = "std_logic_vector($wmode_1 downto 0)";
    $a_tmp = $wmode_num/2;
    $acmode_num_str_0 =  " & \"" . '0' x $acmode_num . "\"";
}

if ($acmode_num == 1){
    $a_t_comma = "'";
}
else{
    $a_t_comma = "\"";
}

$zs4 = 'Z' x $bit_width;
$zs1 = 'Z' x $access;

{
    $reg_name = "${instance_name}_reg$bit_width";
    $zeros = '0' x $bit_width;
    $zs    = 'Z' x $bit_width;
    print <<FHM_DL_REG
-- Module     : $bit_width-bit positive edge trigger register
-- Author     : Designed by T.Morifuji (c)1997.
-- Version    : 1.0
-- VHDL       : 87

-- Functionality :
--  port
--   clock    : clock port
--   reset    : reset port
--   data_in  : input data
--   data_out : output data

library IEEE;
  use IEEE.std_logic_1164.all;

entity $reg_name is
  port(
    clock    : in  std_logic;
    reset    : in  std_logic;
    data_in  : in  std_logic_vector($b4_1 downto 0);
    data_out : out std_logic_vector($b4_1 downto 0)
  );
end $reg_name;

architecture synthesis of $reg_name is
begin
  process (clock, reset)
  begin
    if (reset = '1') then
      data_out <= "$zeros";
    elsif (clock'event and clock = '1') then --'
      data_out <= data_in;
    end if;
  end process;
end synthesis;
FHM_DL_REG
}

print "\n--%%\n\n";

    {
        print <<FHM_DL_INSTANCE
-- Module	 : Data Memory Access Unit
-- Author	 : M. Itoh (c) 2000.
--                 Modified by J.Sato (c) 2001
--                 Modified by K.Ueda (c) 2002
-- Version	 : 1.0
-- VHDL          : 87

-- Functionality : synthesis level
--  port
--    reset        : reset
--    req          : memory access request from cpu
--    rw           : read/write mode from cpu
--                   0 => read
--                   1 => write
FHM_DL_INSTANCE
    }
    if ($acmode_num!=0){
	print "--    ac_mode      : access mode from cpu\n";
	for ($i=$wmode_1; $i>=0; $i--){
	    $str = &to_comp($i, $acmode_num);
	    $access_bits = $access * ($i+1);
	    print "--                   $str => $access_bits bits access\n";
	}
        print <<FHM_DL_INSTANCE
--    ext_mode     : extention mode from cpu
--                   0 => zero extention
--                   1 => sign extention
FHM_DL_INSTANCE
    }
    {
	print <<FHM_DL_INSTANCE
--    addr         : address from cpu
--    data_in      : data output for cpu
FHM_DL_INSTANCE
    }
    if ($acmode_num!=0){
	print "--    addr_err     : address error signal for cpu\n";
    }
    {
	print <<FHM_DL_INSTANCE
--    req_bus      : memory access request for bus
--    w_mode_bus   : access mode for bus
--    addr_bus     : address output for bus
--    data_bus     : data input/output for bus
--    ack_bus      : memory access ack from bus
--    ack          : memory access ack for cpu
--    data_out     : data input for cpu

library ieee;
use ieee.std_logic_1164.all;

entity $instance_name is
  port (
    reset        : in    std_logic;			-- reset signal
    req          : in    std_logic;			-- request from cpu
    rw           : in    std_logic;			-- read/write mode from cpu
FHM_DL_INSTANCE
}
    if ($acmode_num!=0){
	if ($acmode_num==1){
	    print "    ac_mode      : in    std_logic;	-- access mode from cpu\n";
	}
	else{
	    print "    ac_mode      : in    std_logic_vector($acmode_1 downto 0);	-- access mode from cpu\n";
	}
	print "    ext_mode     : in    std_logic;			-- extention mode from cpu\n";
    }
    {
	print <<FHM_DL_INSTANCE
    addr         : in    std_logic_vector($a_1 downto 0);	-- address from cpu
    data_in      : in    std_logic_vector($b4_1 downto 0);	-- input data from cpu
FHM_DL_INSTANCE
    }
    if ($acmode_num!=0){
	print "    addr_err     : out   std_logic;                       -- address error signal for cpu\n";
    }
    {
	print <<FHM_DL_INSTANCE
    req_bus      : out   std_logic;			-- request for bus
    w_mode_bus   : out   $wmode_port;		-- read/write mode for bus
    addr_bus     : out   std_logic_vector($a_1 downto 0);	-- address for bus
    data_bus     : inout std_logic_vector($b4_1 downto 0);	-- input data for bus
    ack_bus      : in    std_logic;			-- ack from bus
    ack          : out   std_logic;			-- ack for cpu
    data_out     : out   std_logic_vector($b4_1 downto 0)	-- output data for cpu
  );
end $instance_name;

architecture synthesis of $instance_name is
  component $reg_name
    port (
      clock    : in  std_logic;
      reset    : in  std_logic;
      data_in  : in  std_logic_vector($b4_1 downto 0);
      data_out : out std_logic_vector($b4_1 downto 0)
    );
  end component;
FHM_DL_INSTANCE
    }
    if ($acmode_num != 0){
	if ($acmode_num == 1){
	    $a_t_str = "std_logic";
	}
	else{
	    $a_t_str = "std_logic_vector($acmode_1 downto 0)";
	}
        {
	    print <<FHM_DL_INSTANCE
  signal data_in_tmp1, data_in_tmp2, data_in_tmp3 : std_logic_vector($b4_1 downto 0);
  signal data_bus_out, data_out_tmp1, data_out_tmp2 : std_logic_vector($b4_1 downto 0);
  signal addr_tmp : $a_t_str;
  signal w_mode_tmp : std_logic_vector($wmode_1 downto 0);
  signal addr_err_tmp : std_logic;
  signal ext : std_logic;
begin  -- synthesis
FHM_DL_INSTANCE
    }
    print "  addr_err_tmp <= '0' when ";
    for ($i=$wmode_1; $i>=0; $i--){
	$str = $a_t_comma . &to_comp($i, $acmode_num) . $a_t_comma;
	print "(ac_mode = $str and ";
	for ($j=0; $j<=$wmode_1-$i; $j++){
#	    $str = $a_t_comma . &to_comp($j, $a_tmp) . $a_t_comma;
	    $str = $a_t_comma . &to_comp($j, $acmode_num) . $a_t_comma;
	    if ($j==0){
		print "(addr_tmp = $str";
	    }
	    else{
		print " or addr_tmp = $str";
	    }
	}
	if ($i==0){
	    print "))\n                  else '1';\n";
	}
	else{
	    print ")) or\n                           ";
	}
    }
    {
	if ($acmode_num == 1){
	    $a_t_str = "addr(0)";
	}
	else{
#	    $a_t_str = "addr($a_tmp_1 downto 0)";
	    $a_t_str = "addr($acmode_1 downto 0)";
	}
        print <<FHM_DL_INSTANCE
  addr_err <= addr_err_tmp;
  req_bus  <= '0' when (reset = '1' or addr_err_tmp='1') else req;
  addr_bus <= addr($a_1 downto $acmode_num)$acmode_num_str_0;

  addr_tmp <= $a_t_str;
FHM_DL_INSTANCE
    }
    for ($i=$wmode_1; $i>=0; $i--){
	$ok_addr = $wmode_1 - $i;
	$str = $a_t_comma . &to_comp($ok_addr, $acmode_num) . $a_t_comma;
	print "  w_mode_tmp($i) <= '0' when (addr_tmp = $str)";
	for ($j=$ok_addr-1; $j>=0; $j--){
#	    $str = $a_t_comma . &to_comp($j, $a_tmp) . $a_t_comma;
	    $str = $a_t_comma . &to_comp($j, $acmode_num) . $a_t_comma;
	    print " or\n                            (addr_tmp = $str and (";
	    for ($k=$wmode_1; $k>=$ok_addr-$j; $k--){
		$str = $a_t_comma . &to_comp($k, $acmode_num) . $a_t_comma;
		if ($k == $wmode_1){
		    print "ac_mode = $str";
		}
		else{
		    print " or ac_mode = $str";
		}
	    }
	    print "))";
	}
	print "\n                    else '1';\n";
    }
    {
	$w_1s = '1' x $wmode_num;
	print <<FHM_DL_INSTANCE
  w_mode_bus <= "$w_1s" when rw='0' else w_mode_tmp;

  ack <= '0' when reset = '1' else
         ack_bus;

  data_bus <= data_in_tmp3 when (rw='1' and addr_err_tmp='0') else "$zs";

FHM_DL_INSTANCE
    }
    for ($i=$wmode_1; $i>=0; $i--){
	$b_m = $access * ($i+1) - 1;
	$b_l = $access * $i;
	print "  data_in_tmp2($b_m downto $b_l) <=\n";
	$ok_addr = $wmode_1 - $i;
	for ($j=0; $j<=$i; $j++,$b_m=$b_m-$access,$b_l=$b_l-$access){
#	    $str = $a_t_comma . &to_comp($wmode_num-$j-1, $a_tmp) . $a_t_comma;
	    $str = $a_t_comma . &to_comp($wmode_num-$j-1, $acmode_num) . $a_t_comma;
	    print "    data_in_tmp1($b_m downto $b_l) when (ac_mode=$str) else\n";
	}
	print "    \"$zs1\";\n";
    }
    print "\n";
    for ($i=$wmode_1; $i>=0; $i--){
	$b_m = $access * ($i+1) - 1;
	$b_l = $access * $i;
	print "  data_in_tmp3($b_m downto $b_l) <=\n";
	$ok_addr = $wmode_1 - $i;
	for ($j=$wmode_1; $j>=$i; $j--,$b_m=$b_m+$access,$b_l=$b_l+$access){
#	    $str = $a_t_comma . &to_comp($wmode_1-$j, $a_tmp) . $a_t_comma;
	    $str = $a_t_comma . &to_comp($wmode_1-$j, $acmode_num) . $a_t_comma;
	    print "    data_in_tmp2($b_m downto $b_l) when (addr_tmp=$str) else\n";
	}
	print "    \"$zs1\";\n";
    }
    {
	print <<FHM_DL_INSTANCE

  REG_DATA_IN: $reg_name
    port map (
      clock    => req,
      reset    => reset,
      data_in  => data_in,
      data_out => data_in_tmp1);

  REG_DATA_OUT: $reg_name
    port map (
      clock    => ack_bus,
      reset    => reset,
      data_in  => data_bus,
      data_out => data_bus_out);

  ext <= ext_mode and data_out_tmp1($b4_1);

FHM_DL_INSTANCE
    }
    for ($i=$wmode_1; $i>=0; $i--){
	$b_m = $access * ($i+1) - 1;
	$b_l = $access * $i;
	print "  data_out_tmp1($b_m downto $b_l) <=\n";
	$ok_addr = $wmode_1 - $i;
	for ($j=0; $j<=$i; $j++,$b_m=$b_m-$access,$b_l=$b_l-$access){
#	    $str = $a_t_comma . &to_comp($j, $a_tmp) . $a_t_comma;
	    $str = $a_t_comma . &to_comp($j, $acmode_num) . $a_t_comma;
	    print "    data_bus_out($b_m downto $b_l) when (addr_tmp=$str) else";
	}
	print "  \"$zs1\";\n";
    }
    print "\n";
    for ($i=$wmode_1; $i>=0; $i--){
	$b_m = $access * ($i+1) - 1;
	$b_l = $access * $i;
	print "  data_out_tmp2($b_m downto $b_l) <=\n";
	$ok_addr = $wmode_1 - $i;
	for ($j=$wmode_1; $j>=$i; $j--,$b_m=$b_m+$access,$b_l=$b_l+$access){
#	    $str = $a_t_comma . &to_comp($j, $a_tmp) . $a_t_comma;
	    $str = $a_t_comma . &to_comp($j, $acmode_num) . $a_t_comma;
	    print "    data_out_tmp1($b_m downto $b_l) when (ac_mode=$str) else\n";
	}
	print "    (others => ext);\n";
    }
	print <<FHM_DL_INSTANCE

  data_out <= data_out_tmp2;
FHM_DL_INSTANCE
    }
    else{
        print <<FHM_DL_INSTANCE
  signal data_in_tmp, data_bus_out : std_logic_vector($b4_1 downto 0);
begin  -- synthesis
  req_bus  <= '0' when reset = '1' else req;
  addr_bus <= addr;
  w_mode_bus <= '1' when rw='0' else '0';

  ack <= '0' when reset = '1' else
         ack_bus;

  data_bus <= data_in_tmp when rw='1' else "$zs";

  REG_DATA_IN: $reg_name
    port map (
      clock    => req,
      reset    => reset,
      data_in  => data_in,
      data_out => data_in_tmp);

  REG_DATA_OUT: $reg_name
    port map (
      clock    => ack_bus,
      reset    => reset,
      data_in  => data_bus,
      data_out => data_bus_out);

  data_out <= data_bus_out;
FHM_DL_INSTANCE
    }
print "end synthesis;\n";

exit(0);

# -----------------------

sub log2u{
    $num = $_[0];

    if ($num == 1){
	return(0);
    }
    for ($i=1, $N=2; $N<$num; $i++, $N*=2){};
    return($i);
}

# ---------------------------------

sub to_comp{
  @buf = ();
  $num = $_[0];
  $width = $_[1];

  for ($x=1; $x<$width; $x++){
    $buf[$x] = $num % 2;
    $num = ($num - $buf[$x]) / 2;
  }
  $buf[$x] = $num % 2;
  return (join("", reverse(@buf)));
}
          ]]>
        </script>
      </instance>

      <entity>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates entity for dmau in synthesis level
# parameter : instance_name bit_width address_space

if ($#ARGV != 3){
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name bit_width address_space access_width\n";
    exit (100);
}

$instance_name = $ARGV[0];
$bit_width = $ARGV[1];
$addr_space = $ARGV[2];
$access = $ARGV[3];

@bit_widths = (8, 16, 32, 64, 128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

@addr_spaces = (4, 8, 16, 32, 64, 128);
if (! grep($_ eq $addr_space, @addr_spaces)){
    print "address_space $addr_space is not supported.\n";
    exit (100);
}

@accesses = (8, 16, 32, 64, 128);
if (! grep($_ eq $access, @accesses)){
    print "access_width $access is not supported.\n";
    exit (100);
}

$a_tmp = $access;
while ($bit_width != $a_tmp){
    if ($bit_width < $a_tmp){
	print "The value of \"bit_width\" must be 2^n * \"access_width\".\n";
	exit (100);
    }
    $a_tmp = $a_tmp * 2;
}

$b4 = $bit_width;
$b4_1 = $b4 - 1;

$wmode_num = $bit_width/$access;
$wmode_1 = $wmode_num - 1;
if ($wmode_num == 1){
    $wmode_port = "std_logic";
}
else{
    $wmode_port = "std_logic_vector($wmode_1 downto 0)";
}
$a_1 = $addr_space - 1;
$acmode_num = &log2u($wmode_num);


{
    print <<FHM_DL_INSTANCE
entity $instance_name is
  port (
    reset        : in    std_logic;			-- reset signal
    req          : in    std_logic;			-- request from cpu
    rw           : in    std_logic;			-- read/write mode from cpu
FHM_DL_INSTANCE
}
    if ($acmode_num!=0){
	if ($acmode_num==1){
	    print "    ac_mode      : in    std_logic;			-- access mode from cpu\n";
	}
	else{
	    print "    ac_mode      : in    std_logic_vector($acmode_1 downto 0);	-- access mode from cpu\n";
	}
	print "    ext_mode     : in    std_logic;			-- extention mode from cpu\n";
    }
    {
	print <<FHM_DL_INSTANCE
    addr         : in    std_logic_vector($a_1 downto 0);	-- address from cpu
    data_in      : in    std_logic_vector($b4_1 downto 0);	-- input data from cpu
FHM_DL_INSTANCE
    }
    if ($acmode_num!=0){
	print "    addr_err     : out   std_logic;			-- address error signal for cpu\n";
    }
    {
	print <<FHM_DL_INSTANCE
    req_bus      : out   std_logic;			-- request for bus
    w_mode_bus   : out   $wmode_port;	-- read/write mode for bus
    addr_bus     : out   std_logic_vector($a_1 downto 0);	-- address for bus
    data_bus     : inout std_logic_vector($b4_1 downto 0);	-- input data for bus
    ack_bus      : in    std_logic;			-- ack from bus
    ack          : out   std_logic;			-- ack for cpu
    data_out     : out   std_logic_vector($b4_1 downto 0)	-- output data for cpu
  );
end $instance_name;
FHM_DL_INSTANCE
}

exit(0);

# -----------------------

sub log2u{
    $num = $_[0];

    if ($num == 1){
	return(0);
    }
    for ($i=1, $N=2; $N<$num; $i++, $N*=2){};
    return($i);
}

# ---------------------------------

sub to_comp{
  @buf = ();
  $num = $_[0];
  $width = $_[1];

  for ($x=1; $x<$width; $x++){
    $buf[$x] = $num % 2;
    $num = ($num - $buf[$x]) / 2;
  }
  $buf[$x] = $num % 2;
  return (join("", reverse(@buf)));
}
          ]]>
        </script>
      </entity>

      <testvector>
        <testvector_script>
          <![CDATA[ ]]>
        </testvector_script>
      </testvector>

      <synthesis>
        <parameter></parameter>
        <synthesis_script>
          <script>
            <![CDATA[
#!/usr/bin/perl
# this script generates synthesis script for dmau in synthesis level
# parameter : instance_name priority bit_width address_space access_width

if ($#ARGV != 4){
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name priority bit_width address_space access_width\n";
    exit (100);
}

$instance_name = $ARGV[0];
$priority      = $ARGV[1];
$bit_width     = $ARGV[2];
$addr_space    = $ARGV[3];
$access        = $ARGV[4];

if ($priority eq "area"){
    $priority_const = "set_max_area 0";
}
elsif ($priority eq "performance"){
    $priority_const = "set_max_delay -from all_inputs() -to all_outputs() 0";
}
elsif ($priority eq "power"){
    $priority_const = "";
}
elsif ($priority eq "none"){
    $priority_const = "";
}
else{
    print "priority $priority is not supported.\n";
    exit (100);
}

@bit_widths = (8, 16, 32, 64, 128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

@addr_spaces = (4, 8, 16, 32, 64, 128);
if (! grep($_ eq $addr_space, @addr_spaces)){
    print "addr_space $addr_space is not supported.\n";
    exit (100);
}

@accesses = (8, 16, 32, 64, 128);
if (! grep($_ eq $access, @accesses)){
    print "access_width $access is not supported.\n";
    exit (100);
}

{
    print <<FHM_DL_SCRIPT
hdlin_auto_save_templates = TRUE

analyze -f vhdl $instance_name.vhd

elaborate $instance_name
uniquify

$priority_const

compile 

write -hierarchy -output $instance_name.db

report_area
report_timing

quit
FHM_DL_SCRIPT
}
exit(0);
            ]]>
          </script>
        </synthesis_script>
      </synthesis>
    </design>

    <estimation>
      <estimation_data>
        <library name="OSAKA">

          <est_type name="shape">
            <est_index name="area">
              <unit> mm2 </unit>
              <translate>
                <translate_value key="gate"> 4201.68 </translate_value>
                <translate_value key="mm2">  1 </translate_value>
              </translate>

              <parameters name="16,8">
                <max>
                  <data bit_width="8"> 0.0491116324898612 </data>
                  <data bit_width="16"> 0.188537633756021 </data>
                  <data bit_width="32"> 0.641681106604977 </data>
                  <data bit_width="64"> 1.99871664976866 </data>
                  <data bit_width="128"> 7.00404362064698 </data>
                </max>
                <min>
                  <data bit_width="8"> 0.0456015931722549 </data>
                  <data bit_width="16"> 0.157305735800918 </data>
                  <data bit_width="32"> 0.468288840178214 </data>
                  <data bit_width="64"> 1.41029851083376 </data>
                  <data bit_width="128"> 5.2416393932903 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 0.0456015931722549 </data>
                    <data bit_width="16"> 0.157305735800918 </data>
                    <data bit_width="32"> 0.468288840178214 </data>
                    <data bit_width="64"> 1.41029851083376 </data>
                    <data bit_width="128"> 5.2416393932903 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 0.0491116324898612 </data>
                    <data bit_width="16"> 0.188537633756021 </data>
                    <data bit_width="32"> 0.641681106604977 </data>
                    <data bit_width="64"> 1.99871664976866 </data>
                    <data bit_width="128"> 7.00404362064698 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 0.0476324993811999 </data>
                    <data bit_width="16"> 0.182413345376135 </data>
                    <data bit_width="32"> 0.550974039431846 </data>
                    <data bit_width="64"> 1.62255224386436 </data>
                    <data bit_width="128"> 6.02069254155481 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,16">
                <max>
                  <data bit_width="16"> 0.0932829120732659 </data>
                  <data bit_width="32"> 0.386070111479218 </data>
                  <data bit_width="64"> 1.2856225162316 </data>
                  <data bit_width="128"> 4.17257669099027 </data>
                </max>
                <min>
                  <data bit_width="16"> 0.0878354072656651 </data>
                  <data bit_width="32"> 0.300107414653186 </data>
                  <data bit_width="64"> 0.976351693370271 </data>
                  <data bit_width="128"> 2.91883362916738 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 0.0878354072656651 </data>
                    <data bit_width="32"> 0.300107414653186 </data>
                    <data bit_width="64"> 0.976351693370271 </data>
                    <data bit_width="128"> 2.91883362916738 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 0.0932829120732659 </data>
                    <data bit_width="32"> 0.386070111479218 </data>
                    <data bit_width="64"> 1.2856225162316 </data>
                    <data bit_width="128"> 4.17257669099027 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 0.0912087791074046 </data>
                    <data bit_width="32"> 0.374616243502599 </data>
                    <data bit_width="64"> 1.10890702314312 </data>
                    <data bit_width="128"> 3.57207238009558 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,32">
                <max>
                  <data bit_width="32"> 0.179432345395175 </data>
                  <data bit_width="64"> 0.768935880409741 </data>
                  <data bit_width="128"> 2.59594520644123 </data>
                </max>
                <min>
                  <data bit_width="32"> 0.17107862259858 </data>
                  <data bit_width="64"> 0.626924988099998 </data>
                  <data bit_width="128"> 2.12897774295044 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="32"> 0.17107862259858 </data>
                    <data bit_width="64"> 0.626924988099998 </data>
                    <data bit_width="128"> 2.12897774295044 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="32"> 0.171867477056796 </data>
                    <data bit_width="64"> 0.768935880409741 </data>
                    <data bit_width="128"> 2.59594520644123 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="32"> 0.179432345395175 </data>
                    <data bit_width="64"> 0.731922632851621 </data>
                    <data bit_width="128"> 2.56829443627311 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,64">
                <max>
                  <data bit_width="64"> 0.365044324651092 </data>
                  <data bit_width="128"> 1.73671393609223 </data>
                </max>
                <min>
                  <data bit_width="64"> 0.351432971335275 </data>
                  <data bit_width="128"> 1.31958296014927 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="64"> 0.351432971335275 </data>
                    <data bit_width="128"> 1.31958296014927 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="64"> 0.358229394670703 </data>
                    <data bit_width="128"> 1.49189092029855 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="64"> 0.365044324651092 </data>
                    <data bit_width="128"> 1.73671393609223 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,128">
                <max>
                  <data bit_width="128"> 0.908172758991641 </data>
                </max>
                <min>
                  <data bit_width="128"> 0.701261650339864 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="128"> 0.701261650339864 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="128"> 0.776010629081701 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="128"> 0.908172758991641 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,8">
                <max>
                  <data bit_width="8"> 0.0504726880676301 </data>
                  <data bit_width="16"> 0.189898696473791 </data>
                  <data bit_width="32"> 0.643448558909769 </data>
                  <data bit_width="64"> 2.00734972939396 </data>
                  <data bit_width="128"> 7.00441363645018 </data>
                </max>
                <min>
                  <data bit_width="8"> 0.0469626485120238 </data>
                  <data bit_width="16"> 0.158666798518688 </data>
                  <data bit_width="32"> 0.469937350535976 </data>
                  <data bit_width="64"> 1.41212441737591 </data>
                  <data bit_width="128"> 5.24362892485863 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 0.0469626485120238 </data>
                    <data bit_width="16"> 0.158666798518688 </data>
                    <data bit_width="32"> 0.469937350535976 </data>
                    <data bit_width="64"> 1.41212441737591 </data>
                    <data bit_width="128"> 5.24362892485863 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 0.0504726880676301 </data>
                    <data bit_width="16"> 0.189898696473791 </data>
                    <data bit_width="32"> 0.643448558909769 </data>
                    <data bit_width="64"> 2.00734972939396 </data>
                    <data bit_width="128"> 7.00441363645018 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 0.0489935549589688 </data>
                    <data bit_width="16"> 0.183774408093905 </data>
                    <data bit_width="32"> 0.552622549789608 </data>
                    <data bit_width="64"> 1.6243781506445 </data>
                    <data bit_width="128"> 6.02804172235868 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,16">
                <max>
                  <data bit_width="16"> 0.094643974791036 </data>
                  <data bit_width="32"> 0.38771856400297 </data>
                  <data bit_width="64"> 1.28857892295463 </data>
                  <data bit_width="128"> 4.17410323822852 </data>
                </max>
                <min>
                  <data bit_width="16"> 0.0891964554654329 </data>
                  <data bit_width="32"> 0.301468477370956 </data>
                  <data bit_width="64"> 0.978291719026675 </data>
                  <data bit_width="128"> 2.92092170750747 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 0.0891964554654329 </data>
                    <data bit_width="32"> 0.301468477370956 </data>
                    <data bit_width="64"> 0.978291719026675 </data>
                    <data bit_width="128"> 2.92092170750747 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 0.094643974791036 </data>
                    <data bit_width="32"> 0.38771856400297 </data>
                    <data bit_width="64"> 1.28857892295463 </data>
                    <data bit_width="128"> 4.17410323822852 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 0.0925698418251747 </data>
                    <data bit_width="32"> 0.375820682917309 </data>
                    <data bit_width="64"> 1.11073304582929 </data>
                    <data bit_width="128"> 3.57380345861655 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,32">
                <max>
                  <data bit_width="32"> 0.180793408112945 </data>
                  <data bit_width="64"> 0.770703390786542 </data>
                  <data bit_width="128"> 2.59708128462901 </data>
                </max>
                <min>
                  <data bit_width="32"> 0.17243968531635 </data>
                  <data bit_width="64"> 0.628676461320234 </data>
                  <data bit_width="128"> 2.13105420022467 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="32"> 0.17243968531635 </data>
                    <data bit_width="64"> 0.628676461320234 </data>
                    <data bit_width="128"> 2.13105420022467 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="32"> 0.173228539774566 </data>
                    <data bit_width="64"> 0.770703390786542 </data>
                    <data bit_width="128"> 2.59708128462901 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="32"> 0.180793408112945 </data>
                    <data bit_width="64"> 0.733571085137374 </data>
                    <data bit_width="128"> 2.5703825148512 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,64">
                <max>
                  <data bit_width="64"> 0.366692806210849 </data>
                  <data bit_width="128"> 1.73880201443232 </data>
                </max>
                <min>
                  <data bit_width="64"> 0.352978431722549 </data>
                  <data bit_width="128"> 1.32140898283544 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="64"> 0.352978431722549 </data>
                    <data bit_width="128"> 1.32140898283544 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="64"> 0.35987787623046 </data>
                    <data bit_width="128"> 1.49335994292759 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="64"> 0.366692806210849 </data>
                    <data bit_width="128"> 1.73880201443232 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,128">
                <max>
                  <data bit_width="128"> 0.909998781915805 </data>
                </max>
                <min>
                  <data bit_width="128"> 0.702910160697626 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="128"> 0.702910160697626 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="128"> 0.777836651767864 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="128"> 0.909998781915805 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,8">
                <max>
                  <data bit_width="8"> 0.0531947989851678 </data>
                  <data bit_width="16"> 0.192620807391329 </data>
                  <data bit_width="32"> 0.646864580120333 </data>
                  <data bit_width="64"> 2.00837238580758 </data>
                  <data bit_width="128"> 7.01343486034158 </data>
                </max>
                <min>
                  <data bit_width="8"> 0.0496847594295615 </data>
                  <data bit_width="16"> 0.161388894918223 </data>
                  <data bit_width="32"> 0.47323431341749 </data>
                  <data bit_width="64"> 1.41577646274823 </data>
                  <data bit_width="128"> 5.24788596466175 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 0.0496847594295615 </data>
                    <data bit_width="16"> 0.161388894918223 </data>
                    <data bit_width="32"> 0.47323431341749 </data>
                    <data bit_width="64"> 1.41577646274823 </data>
                    <data bit_width="128"> 5.24788596466175 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 0.0531947989851678 </data>
                    <data bit_width="16"> 0.192620807391329 </data>
                    <data bit_width="32"> 0.646864580120333 </data>
                    <data bit_width="64"> 2.00837238580758 </data>
                    <data bit_width="128"> 7.01343486034158 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 0.0517156658765065 </data>
                    <data bit_width="16"> 0.186496519011443 </data>
                    <data bit_width="32"> 0.555919512671122 </data>
                    <data bit_width="64"> 1.62879881523581 </data>
                    <data bit_width="128"> 6.02908111303098 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,16">
                <max>
                  <data bit_width="16"> 0.0973660857085737 </data>
                  <data bit_width="32"> 0.391491526960644 </data>
                  <data bit_width="64"> 1.2923162673026 </data>
                  <data bit_width="128"> 4.18108426272348 </data>
                </max>
                <min>
                  <data bit_width="16"> 0.0919185663829706 </data>
                  <data bit_width="32"> 0.304190602806496 </data>
                  <data bit_width="64"> 0.982057883751261 </data>
                  <data bit_width="128"> 2.92509786442566 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 0.0919185663829706 </data>
                    <data bit_width="32"> 0.304190602806496 </data>
                    <data bit_width="64"> 0.982057883751261 </data>
                    <data bit_width="128"> 2.92509786442566 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 0.0973660857085737 </data>
                    <data bit_width="32"> 0.391491526960644 </data>
                    <data bit_width="64"> 1.2923162673026 </data>
                    <data bit_width="128"> 4.18108426272348 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 0.0952919527427124 </data>
                    <data bit_width="32"> 0.379117645798823 </data>
                    <data bit_width="64"> 1.11438509143961 </data>
                    <data bit_width="128"> 3.57887211567754 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,32">
                <max>
                  <data bit_width="32"> 0.183515519030483 </data>
                  <data bit_width="64"> 0.773524353829897 </data>
                  <data bit_width="128"> 2.59905594119495 </data>
                </max>
                <min>
                  <data bit_width="32"> 0.175161796233887 </data>
                  <data bit_width="64"> 0.63207650344624 </data>
                  <data bit_width="128"> 2.13521896860303 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="32"> 0.175161796233887 </data>
                    <data bit_width="64"> 0.63207650344624 </data>
                    <data bit_width="128"> 2.13521896860303 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="32"> 0.175950650692104 </data>
                    <data bit_width="64"> 0.773524353829897 </data>
                    <data bit_width="128"> 2.59905594119495 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="32"> 0.183515519030483 </data>
                    <data bit_width="64"> 0.736868106090897 </data>
                    <data bit_width="128"> 2.57756621113459 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,64">
                <max>
                  <data bit_width="64"> 0.369989769092363 </data>
                  <data bit_width="128"> 1.74279967132195 </data>
                </max>
                <min>
                  <data bit_width="64"> 0.356275394604063 </data>
                  <data bit_width="128"> 1.32483279021725 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="64"> 0.356275394604063 </data>
                    <data bit_width="128"> 1.32483279021725 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="64"> 0.363174839111974 </data>
                    <data bit_width="128"> 1.49677387235582 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="64"> 0.369989769092363 </data>
                    <data bit_width="128"> 1.74279967132195 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,128">
                <max>
                  <data bit_width="128"> 0.913650769216123 </data>
                </max>
                <min>
                  <data bit_width="128"> 0.70620712381714 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="128"> 0.70620712381714 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="128"> 0.781488639306182 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="128"> 0.913650769216123 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,8">
                <max>
                  <data bit_width="8"> 0.0586390208202433 </data>
                  <data bit_width="16"> 0.197827029188325 </data>
                  <data bit_width="32"> 0.650186005359761 </data>
                  <data bit_width="64"> 2.01363069914891 </data>
                  <data bit_width="128"> 7.02430523314484 </data>
                </max>
                <min>
                  <data bit_width="8"> 0.055128981264637 </data>
                  <data bit_width="16"> 0.166918183202909 </data>
                  <data bit_width="32"> 0.479828239418518 </data>
                  <data bit_width="64"> 1.42308055396889 </data>
                  <data bit_width="128"> 5.25649254798081 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 0.055128981264637 </data>
                    <data bit_width="16"> 0.166918183202909 </data>
                    <data bit_width="32"> 0.479828239418518 </data>
                    <data bit_width="64"> 1.42308055396889 </data>
                    <data bit_width="128"> 5.25649254798081 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 0.0586390208202433 </data>
                    <data bit_width="16"> 0.197827029188325 </data>
                    <data bit_width="32"> 0.650186005359761 </data>
                    <data bit_width="64"> 2.01363069914891 </data>
                    <data bit_width="128"> 7.02430523314484 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 0.056862387663982 </data>
                    <data bit_width="16"> 0.191643240798919 </data>
                    <data bit_width="32"> 0.562675959616153 </data>
                    <data bit_width="64"> 1.63610290621846 </data>
                    <data bit_width="128"> 6.04038890396222 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,16">
                <max>
                  <data bit_width="16"> 0.102810307543649 </data>
                  <data bit_width="32"> 0.397609481921517 </data>
                  <data bit_width="64"> 1.29846405937625 </data>
                  <data bit_width="128"> 4.1868943455951 </data>
                </max>
                <min>
                  <data bit_width="16"> 0.0973627882180461 </data>
                  <data bit_width="32"> 0.309634824641572 </data>
                  <data bit_width="64"> 0.989247855619657 </data>
                  <data bit_width="128"> 2.93345017826203 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 0.0973627882180461 </data>
                    <data bit_width="32"> 0.309634824641572 </data>
                    <data bit_width="64"> 0.989247855619657 </data>
                    <data bit_width="128"> 2.93345017826203 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 0.102810307543649 </data>
                    <data bit_width="32"> 0.397609481921517 </data>
                    <data bit_width="64"> 1.29846405937625 </data>
                    <data bit_width="128"> 4.1868943455951 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 0.100736174339788 </data>
                    <data bit_width="32"> 0.385711600835856 </data>
                    <data bit_width="64"> 1.12168906627825 </data>
                    <data bit_width="128"> 3.58692692946631 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,32">
                <max>
                  <data bit_width="32"> 0.188959740865559 </data>
                  <data bit_width="64"> 0.780832279707165 </data>
                  <data bit_width="128"> 2.60818175515508 </data>
                </max>
                <min>
                  <data bit_width="32"> 0.180606018068963 </data>
                  <data bit_width="64"> 0.638670429447269 </data>
                  <data bit_width="128"> 2.14345228242037 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="32"> 0.180606018068963 </data>
                    <data bit_width="64"> 0.638670429447269 </data>
                    <data bit_width="128"> 2.14345228242037 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="32"> 0.18139487252718 </data>
                    <data bit_width="64"> 0.780832279707165 </data>
                    <data bit_width="128"> 2.60818175515508 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="32"> 0.188959740865559 </data>
                    <data bit_width="64"> 0.743462032091925 </data>
                    <data bit_width="128"> 2.58291098560576 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,64">
                <max>
                  <data bit_width="64"> 0.376583695093391 </data>
                  <data bit_width="128"> 1.75115198515832 </data>
                </max>
                <min>
                  <data bit_width="64"> 0.362972370575579 </data>
                  <data bit_width="128"> 1.3321368811999 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="64"> 0.362972370575579 </data>
                    <data bit_width="128"> 1.3321368811999 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="64"> 0.369768764875002 </data>
                    <data bit_width="128"> 1.50348296324327 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="64"> 0.376583695093391 </data>
                    <data bit_width="128"> 1.75115198515832 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,128">
                <max>
                  <data bit_width="128"> 0.920954860198778 </data>
                </max>
                <min>
                  <data bit_width="128"> 0.712595007473201 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="128"> 0.712595007473201 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="128"> 0.788792672216827 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="128"> 0.920954860198778 </data>
                  </priority>
                </typ>
              </parameters>
            </est_index>

            <est_index name="aspect_ratio">
              <!-- Dummy yet -->
            </est_index>

            <est_index name="height">
              <!-- Dummy yet -->
            </est_index>

            <est_index name="width">
              <!-- Dummy yet -->
            </est_index>
          </est_type>

          <est_type name="timing">
            <est_index name="delay">
              <unit> ns </unit>

              <parameters name="16,8">
                <max>
                  <data bit_width="8"> 1.11 </data>
                  <data bit_width="16"> 3.74 </data>
                  <data bit_width="32"> 5.89 </data>
                  <data bit_width="64"> 8.40 </data>
                  <data bit_width="128"> 12.90 </data>
                </max>
                <min>
                  <data bit_width="8"> 1.03 </data>
                  <data bit_width="16"> 1.85 </data>
                  <data bit_width="32"> 3.24 </data>
                  <data bit_width="64"> 4.22 </data>
                  <data bit_width="128"> 5.34 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 1.11 </data>
                    <data bit_width="16"> 2.64 </data>
                    <data bit_width="32"> 4.12 </data>
                    <data bit_width="64"> 7.09 </data>
                    <data bit_width="128"> 10.53 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 1.03 </data>
                    <data bit_width="16"> 1.85 </data>
                    <data bit_width="32"> 3.24 </data>
                    <data bit_width="64"> 4.22 </data>
                    <data bit_width="128"> 5.34 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 1.04 </data>
                    <data bit_width="16"> 3.74 </data>
                    <data bit_width="32"> 5.89 </data>
                    <data bit_width="64"> 8.40 </data>
                    <data bit_width="128"> 12.90 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,16">
                <max>
                  <data bit_width="16"> 1.54 </data>
                  <data bit_width="32"> 3.86 </data>
                  <data bit_width="64"> 6.52 </data>
                  <data bit_width="128"> 10.49 </data>
                </max>
                <min>
                  <data bit_width="16"> 1.03 </data>
                  <data bit_width="32"> 1.87 </data>
                  <data bit_width="64"> 3.02 </data>
                  <data bit_width="128"> 4.53 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 1.11 </data>
                    <data bit_width="32"> 3.10 </data>
                    <data bit_width="64"> 5.08 </data>
                    <data bit_width="128"> 9.20 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 1.03 </data>
                    <data bit_width="32"> 1.87 </data>
                    <data bit_width="64"> 3.02 </data>
                    <data bit_width="128"> 4.53 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 1.54 </data>
                    <data bit_width="32"> 3.86 </data>
                    <data bit_width="64"> 6.52 </data>
                    <data bit_width="128"> 10.49 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,32">
                <max>
                  <data bit_width="32"> 1.63 </data>
                  <data bit_width="64"> 5.23 </data>
                  <data bit_width="128"> 8.61 </data>
                </max>
                <min>
                  <data bit_width="32"> 1.04 </data>
                  <data bit_width="64"> 1.86 </data>
                  <data bit_width="128"> 3.18 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="32"> 1.11 </data>
                    <data bit_width="64"> 4.91 </data>
                    <data bit_width="128"> 8.01 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="32"> 1.04 </data>
                    <data bit_width="64"> 1.86 </data>
                    <data bit_width="128"> 3.18 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="32"> 1.63 </data>
                    <data bit_width="64"> 5.23 </data>
                    <data bit_width="128"> 8.61 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,64">
                <max>
                  <data bit_width="64"> 1.80 </data>
                  <data bit_width="128"> 5.75 </data>
                </max>
                <min>
                  <data bit_width="64"> 1.05 </data>
                  <data bit_width="128"> 2.04 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="64"> 1.80 </data>
                    <data bit_width="128"> 5.37 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="64"> 1.05 </data>
                    <data bit_width="128"> 2.04 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="64"> 1.56 </data>
                    <data bit_width="128"> 5.75 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,128">
                <max>
                  <data bit_width="128"> 2.84 </data>
                </max>
                <min>
                  <data bit_width="128"> 1.03 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="128"> 2.01 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="128"> 1.03 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="128"> 2.84 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,8">
                <max>
                  <data bit_width="8"> 1.11 </data>
                  <data bit_width="16"> 3.74 </data>
                  <data bit_width="32"> 5.89 </data>
                  <data bit_width="64"> 8.40 </data>
                  <data bit_width="128"> 12.89 </data>
                </max>
                <min>
                  <data bit_width="8"> 1.03 </data>
                  <data bit_width="16"> 1.85 </data>
                  <data bit_width="32"> 3.24 </data>
                  <data bit_width="64"> 4.22 </data>
                  <data bit_width="128"> 5.34 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 1.11 </data>
                    <data bit_width="16"> 2.64 </data>
                    <data bit_width="32"> 4.12 </data>
                    <data bit_width="64"> 7.09 </data>
                    <data bit_width="128"> 10.53 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 1.03 </data>
                    <data bit_width="16"> 1.85 </data>
                    <data bit_width="32"> 3.24 </data>
                    <data bit_width="64"> 4.22 </data>
                    <data bit_width="128"> 5.34 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 1.04 </data>
                    <data bit_width="16"> 3.74 </data>
                    <data bit_width="32"> 5.89 </data>
                    <data bit_width="64"> 8.40 </data>
                    <data bit_width="128"> 12.89 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,16">
                <max>
                  <data bit_width="16"> 1.54 </data>
                  <data bit_width="32"> 3.86 </data>
                  <data bit_width="64"> 6.52 </data>
                  <data bit_width="128"> 10.49 </data>
                </max>
                <min>
                  <data bit_width="16"> 1.03 </data>
                  <data bit_width="32"> 1.87 </data>
                  <data bit_width="64"> 3.02 </data>
                  <data bit_width="128"> 4.53 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 1.11 </data>
                    <data bit_width="32"> 3.10 </data>
                    <data bit_width="64"> 5.08 </data>
                    <data bit_width="128"> 9.20 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 1.03 </data>
                    <data bit_width="32"> 1.87 </data>
                    <data bit_width="64"> 3.02 </data>
                    <data bit_width="128"> 4.53 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 1.54 </data>
                    <data bit_width="32"> 3.86 </data>
                    <data bit_width="64"> 6.52 </data>
                    <data bit_width="128"> 10.49 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,32">
                <max>
                  <data bit_width="32"> 1.63 </data>
                  <data bit_width="64"> 5.23 </data>
                  <data bit_width="128"> 8.61 </data>
                </max>
                <min>
                  <data bit_width="32"> 1.04 </data>
                  <data bit_width="64"> 1.86 </data>
                  <data bit_width="128"> 3.18 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="32"> 1.11 </data>
                    <data bit_width="64"> 4.91 </data>
                    <data bit_width="128"> 8.01 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="32"> 1.04 </data>
                    <data bit_width="64"> 1.86 </data>
                    <data bit_width="128"> 3.18 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="32"> 1.63 </data>
                    <data bit_width="64"> 5.23 </data>
                    <data bit_width="128"> 8.61 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,64">
                <max>
                  <data bit_width="64"> 1.80 </data>
                  <data bit_width="128"> 5.75 </data>
                </max>
                <min>
                  <data bit_width="64"> 1.05 </data>
                  <data bit_width="128"> 2.04 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="64"> 1.80 </data>
                    <data bit_width="128"> 5.37 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="64"> 1.05 </data>
                    <data bit_width="128"> 2.04 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="64"> 1.56 </data>
                    <data bit_width="128"> 5.75 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,128">
                <max>
                  <data bit_width="128"> 2.84 </data>
                </max>
                <min>
                  <data bit_width="128"> 1.03 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="128"> 2.01 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="128"> 1.03 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="128"> 2.84 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,8">
                <max>
                  <data bit_width="8"> 1.11 </data>
                  <data bit_width="16"> 3.74 </data>
                  <data bit_width="32"> 5.90 </data>
                  <data bit_width="64"> 8.43 </data>
                  <data bit_width="128"> 12.92 </data>
                </max>
                <min>
                  <data bit_width="8"> 1.03 </data>
                  <data bit_width="16"> 1.85 </data>
                  <data bit_width="32"> 3.24 </data>
                  <data bit_width="64"> 4.21 </data>
                  <data bit_width="128"> 5.32 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 1.11 </data>
                    <data bit_width="16"> 2.64 </data>
                    <data bit_width="32"> 4.12 </data>
                    <data bit_width="64"> 7.09 </data>
                    <data bit_width="128"> 10.53 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 1.03 </data>
                    <data bit_width="16"> 1.85 </data>
                    <data bit_width="32"> 3.24 </data>
                    <data bit_width="64"> 4.21 </data>
                    <data bit_width="128"> 5.32 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 1.04 </data>
                    <data bit_width="16"> 3.74 </data>
                    <data bit_width="32"> 5.90 </data>
                    <data bit_width="64"> 8.43 </data>
                    <data bit_width="128"> 12.92 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,16">
                <max>
                  <data bit_width="16"> 1.54 </data>
                  <data bit_width="32"> 3.86 </data>
                  <data bit_width="64"> 6.53 </data>
                  <data bit_width="128"> 10.49 </data>
                </max>
                <min>
                  <data bit_width="16"> 1.03 </data>
                  <data bit_width="32"> 1.87 </data>
                  <data bit_width="64"> 3.02 </data>
                  <data bit_width="128"> 4.53 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 1.11 </data>
                    <data bit_width="32"> 3.10 </data>
                    <data bit_width="64"> 5.07 </data>
                    <data bit_width="128"> 9.20 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 1.03 </data>
                    <data bit_width="32"> 1.87 </data>
                    <data bit_width="64"> 3.02 </data>
                    <data bit_width="128"> 4.53 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 1.54 </data>
                    <data bit_width="32"> 3.86 </data>
                    <data bit_width="64"> 6.53 </data>
                    <data bit_width="128"> 10.49 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,32">
                <max>
                  <data bit_width="32"> 1.63 </data>
                  <data bit_width="64"> 5.23 </data>
                  <data bit_width="128"> 9.03 </data>
                </max>
                <min>
                  <data bit_width="32"> 1.04 </data>
                  <data bit_width="64"> 1.86 </data>
                  <data bit_width="128"> 3.18 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="32"> 1.11 </data>
                    <data bit_width="64"> 4.91 </data>
                    <data bit_width="128"> 8.01 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="32"> 1.04 </data>
                    <data bit_width="64"> 1.86 </data>
                    <data bit_width="128"> 3.18 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="32"> 1.63 </data>
                    <data bit_width="64"> 5.23 </data>
                    <data bit_width="128"> 9.03 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,64">
                <max>
                  <data bit_width="64"> 1.80 </data>
                  <data bit_width="128"> 5.75 </data>
                </max>
                <min>
                  <data bit_width="64"> 1.05 </data>
                  <data bit_width="128"> 2.04 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="64"> 1.80 </data>
                    <data bit_width="128"> 5.37 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="64"> 1.05 </data>
                    <data bit_width="128"> 2.04 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="64"> 1.56 </data>
                    <data bit_width="128"> 5.75 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,128">
                <max>
                  <data bit_width="128"> 2.84 </data>
                </max>
                <min>
                  <data bit_width="128"> 1.03 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="128"> 2.01 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="128"> 1.03 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="128"> 2.84 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,8">
                <max>
                  <data bit_width="8"> 1.11 </data>
                  <data bit_width="16"> 3.74 </data>
                  <data bit_width="32"> 5.89 </data>
                  <data bit_width="64"> 8.43 </data>
                  <data bit_width="128"> 12.90 </data>
                </max>
                <min>
                  <data bit_width="8"> 1.03 </data>
                  <data bit_width="16"> 1.85 </data>
                  <data bit_width="32"> 3.24 </data>
                  <data bit_width="64"> 4.21 </data>
                  <data bit_width="128"> 5.34 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 1.11 </data>
                    <data bit_width="16"> 2.64 </data>
                    <data bit_width="32"> 4.12 </data>
                    <data bit_width="64"> 7.09 </data>
                    <data bit_width="128"> 10.53 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 1.03 </data>
                    <data bit_width="16"> 1.85 </data>
                    <data bit_width="32"> 3.24 </data>
                    <data bit_width="64"> 4.21 </data>
                    <data bit_width="128"> 5.34 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 1.04 </data>
                    <data bit_width="16"> 3.74 </data>
                    <data bit_width="32"> 5.89 </data>
                    <data bit_width="64"> 8.43 </data>
                    <data bit_width="128"> 12.90 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,16">
                <max>
                  <data bit_width="16"> 1.54 </data>
                  <data bit_width="32"> 3.86 </data>
                  <data bit_width="64"> 6.52 </data>
                  <data bit_width="128"> 10.49 </data>
                </max>
                <min>
                  <data bit_width="16"> 1.03 </data>
                  <data bit_width="32"> 1.87 </data>
                  <data bit_width="64"> 3.02 </data>
                  <data bit_width="128"> 4.53 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 1.11 </data>
                    <data bit_width="32"> 3.10 </data>
                    <data bit_width="64"> 5.07 </data>
                    <data bit_width="128"> 9.20 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 1.03 </data>
                    <data bit_width="32"> 1.87 </data>
                    <data bit_width="64"> 3.02 </data>
                    <data bit_width="128"> 4.53 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 1.54 </data>
                    <data bit_width="32"> 3.86 </data>
                    <data bit_width="64"> 6.52 </data>
                    <data bit_width="128"> 10.49 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,32">
                <max>
                  <data bit_width="32"> 1.63 </data>
                  <data bit_width="64"> 5.23 </data>
                  <data bit_width="128"> 8.61 </data>
                </max>
                <min>
                  <data bit_width="32"> 1.04 </data>
                  <data bit_width="64"> 1.86 </data>
                  <data bit_width="128"> 3.18 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="32"> 1.11 </data>
                    <data bit_width="64"> 4.91 </data>
                    <data bit_width="128"> 8.01 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="32"> 1.04 </data>
                    <data bit_width="64"> 1.86 </data>
                    <data bit_width="128"> 3.18 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="32"> 1.63 </data>
                    <data bit_width="64"> 5.23 </data>
                    <data bit_width="128"> 8.61 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,64">
                <max>
                  <data bit_width="64"> 1.80 </data>
                  <data bit_width="128"> 5.75 </data>
                </max>
                <min>
                  <data bit_width="64"> 1.05 </data>
                  <data bit_width="128"> 2.04 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="64"> 1.80 </data>
                    <data bit_width="128"> 5.37 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="64"> 1.05 </data>
                    <data bit_width="128"> 2.04 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="64"> 1.56 </data>
                    <data bit_width="128"> 5.75 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,128">
                <max>
                  <data bit_width="128"> 2.84 </data>
                </max>
                <min>
                  <data bit_width="128"> 1.03 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="128"> 2.01 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="128"> 1.03 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="128"> 2.84 </data>
                  </priority>
                </typ>
              </parameters>
            </est_index>

            <est_index name="delay_fullpath">
              <unit> ns </unit>

              <parameters name="16,8">
                <max>
                  <data bit_width="8">
                    path	 addr	 addr_bus	 0.00
                    
                    
                    
                    
                    inport	 data_in	 0
                    
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="16">
                    path	 addr	 w_mode_bus	 0.76
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.08
                    
                    
                    inport	 addr	 1.91
                    inport	 data_in	 0
                    
                    outport	 REG_DATA_OUT	 3.01
                    internal	 3.01
                  </data>
                  <data bit_width="64">
                    path	 ac_mode	 w_mode_bus	 3.74
                    path	 ac_mode	 data_out	 4.20
                    path	 addr	 w_mode_bus	 5.79
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 8.19
                    inport	 ac_mode	 7.34
                    inport	 addr	 7.60
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 5.01
                    internal	 5.39
                  </data>
                  <data bit_width="128">
                    path	 ac_mode	 w_mode_bus	 6.55
                    path	 ac_mode	 data_out	 7.17
                    path	 addr	 w_mode_bus	 6.80
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 10.03
                    inport	 ac_mode	 11.09
                    inport	 addr	 9.43
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 7.24
                    internal	 8.58
                  </data>
                </max>
                <min>
                  <data bit_width="8">
                    path	 addr	 addr_bus	 0.00
                    
                    
                    
                    
                    inport	 data_in	 0.00
                    
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="16">
                    path	 addr	 w_mode_bus	 0.76
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.08
                    
                    
                    inport	 addr	 1.91
                    inport	 data_in	 0.00
                    
                    outport	 REG_DATA_OUT	 3.01
                    internal	 3.01
                  </data>
                  <data bit_width="64">
                    path	 ac_mode	 w_mode_bus	 3.74
                    path	 ac_mode	 data_out	 4.20
                    path	 addr	 w_mode_bus	 5.79
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 8.19
                    inport	 ac_mode	 7.34
                    inport	 addr	 7.60
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 5.01
                    internal	 5.39
                  </data>
                  <data bit_width="128">
                    path	 ac_mode	 w_mode_bus	 6.55
                    path	 ac_mode	 data_out	 7.17
                    path	 addr	 w_mode_bus	 6.80
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 10.03
                    inport	 ac_mode	 11.09
                    inport	 addr	 9.43
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 7.24
                    internal	 8.58
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.00
                      
                      
                      
                      
                      inport	 data_in	 0.00
                      
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="16">
                      path	 addr	 w_mode_bus	 0.66
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 1.19
                      
                      
                      inport	 addr	 1.62
                      inport	 data_in	 0.00
                      
                      outport	 REG_DATA_OUT	 1.91
                      internal	 1.91
                    </data>
                    <data bit_width="64">
                      path	 ac_mode	 w_mode_bus	 4.57
                      path	 ac_mode	 data_out	 4.29
                      path	 addr	 w_mode_bus	 4.96
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 6.90
                      inport	 ac_mode	 7.21
                      inport	 addr	 7.80
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 5.49
                      internal	 5.52
                    </data>
                    <data bit_width="128">
                      path	 ac_mode	 w_mode_bus	 6.57
                      path	 ac_mode	 data_out	 7.06
                      path	 addr	 w_mode_bus	 7.66
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 9.45
                      inport	 ac_mode	 9.72
                      inport	 addr	 9.55
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 6.04
                      internal	 7.49
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.10
                      
                      
                      
                      
                      inport	 data_in	 0.10
                      
                      
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.11
                    </data>
                    <data bit_width="16">
                      path	 addr	 w_mode_bus	 0.44
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 1.11
                      
                      
                      inport	 addr	 1.23
                      inport	 data_in	 0.10
                      
                      outport	 REG_DATA_OUT	 1.83
                      internal	 1.80
                    </data>
                    <data bit_width="64">
                      path	 ac_mode	 w_mode_bus	 2.26
                      path	 ac_mode	 data_out	 2.79
                      path	 addr	 w_mode_bus	 2.67
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 3.95
                      inport	 ac_mode	 3.95
                      inport	 addr	 3.53
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 4.12
                      internal	 4.11
                    </data>
                    <data bit_width="128">
                      path	 ac_mode	 w_mode_bus	 3.27
                      path	 ac_mode	 data_out	 3.76
                      path	 addr	 w_mode_bus	 3.29
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 5.07
                      inport	 ac_mode	 5.05
                      inport	 addr	 4.15
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 5.10
                      internal	 5.07
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.00
                      
                      
                      
                      
                      inport	 data_in	 0.00
                      
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="16">
                      path	 addr	 w_mode_bus	 0.76
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 2.08
                      
                      
                      inport	 addr	 1.91
                      inport	 data_in	 0.00
                      
                      outport	 REG_DATA_OUT	 3.01
                      internal	 3.01
                    </data>
                    <data bit_width="64">
                      path	 ac_mode	 w_mode_bus	 3.74
                      path	 ac_mode	 data_out	 4.20
                      path	 addr	 w_mode_bus	 5.79
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 8.19
                      inport	 ac_mode	 7.34
                      inport	 addr	 7.60
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 5.01
                      internal	 5.39
                    </data>
                    <data bit_width="128">
                      path	 ac_mode	 w_mode_bus	 6.55
                      path	 ac_mode	 data_out	 7.17
                      path	 addr	 w_mode_bus	 6.80
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 10.03
                      inport	 ac_mode	 11.09
                      inport	 addr	 9.43
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 7.24
                      internal	 8.58
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,16">
                <max>
                  <data bit_width="8">
                    path	 addr	 addr_bus	 0.00
                    
                    
                    
                    
                    inport	 data_in	 0
                    
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="16">
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.08
                    
                    
                    inport	 data_in	 0
                    inport	 data_in	 0
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="64">
                    path	 ac_mode	 w_mode_bus	 2.50
                    path	 ac_mode	 data_out	 3.38
                    path	 addr	 w_mode_bus	 3.15
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 5.43
                    inport	 ac_mode	 5.20
                    inport	 addr	 4.49
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 4.70
                    internal	 4.70
                  </data>
                  <data bit_width="128">
                    path	 ac_mode	 w_mode_bus	 5.01
                    path	 ac_mode	 data_out	 6.20
                    path	 addr	 w_mode_bus	 5.10
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 7.52
                    inport	 ac_mode	 8.81
                    inport	 addr	 7.74
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 5.96
                    internal	 6.09
                  </data>
                </max>
                <min>
                  <data bit_width="8">
                    path	 addr	 addr_bus	 0.00
                    
                    
                    
                    
                    inport	 data_in	 0.00
                    
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="16">
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.08
                    
                    
                    inport	 data_in	 0.00
                    inport	 data_in	 0.00
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="64">
                    path	 ac_mode	 w_mode_bus	 2.50
                    path	 ac_mode	 data_out	 3.38
                    path	 addr	 w_mode_bus	 3.15
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 5.43
                    inport	 ac_mode	 5.20
                    inport	 addr	 4.49
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 4.70
                    internal	 4.70
                  </data>
                  <data bit_width="128">
                    path	 ac_mode	 w_mode_bus	 5.01
                    path	 ac_mode	 data_out	 6.20
                    path	 addr	 w_mode_bus	 5.10
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 7.52
                    inport	 ac_mode	 8.81
                    inport	 addr	 7.74
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 5.96
                    internal	 6.09
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.00
                      
                      
                      
                      
                      inport	 data_in	 0.00
                      
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 1.19
                      
                      
                      inport	 data_in	 0.00
                      inport	 data_in	 0.00
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="64">
                      path	 ac_mode	 w_mode_bus	 1.58
                      path	 ac_mode	 data_out	 2.95
                      path	 addr	 w_mode_bus	 3.11
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 4.26
                      inport	 ac_mode	 4.90
                      inport	 addr	 4.42
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 3.65
                      internal	 3.91
                    </data>
                    <data bit_width="128">
                      path	 ac_mode	 w_mode_bus	 4.82
                      path	 ac_mode	 data_out	 5.75
                      path	 addr	 w_mode_bus	 5.20
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 7.49
                      inport	 ac_mode	 8.30
                      inport	 addr	 7.64
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 5.81
                      internal	 5.81
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.10
                      
                      
                      
                      
                      inport	 data_in	 0.10
                      
                      
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.11
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 1.11
                      
                      
                      inport	 data_in	 0.10
                      inport	 data_in	 0.10
                      
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.11
                    </data>
                    <data bit_width="64">
                      path	 ac_mode	 w_mode_bus	 1.27
                      path	 ac_mode	 data_out	 1.78
                      path	 addr	 w_mode_bus	 1.34
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 2.73
                      inport	 ac_mode	 2.67
                      inport	 addr	 2.47
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 2.91
                      internal	 2.82
                    </data>
                    <data bit_width="128">
                      path	 ac_mode	 w_mode_bus	 2.50
                      path	 ac_mode	 data_out	 2.63
                      path	 addr	 w_mode_bus	 2.25
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 4.05
                      inport	 ac_mode	 3.96
                      inport	 addr	 3.74
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 4.07
                      internal	 4.03
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.00
                      
                      
                      
                      
                      inport	 data_in	 0.00
                      
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 2.08
                      
                      
                      inport	 data_in	 0.00
                      inport	 data_in	 0.00
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="64">
                      path	 ac_mode	 w_mode_bus	 2.50
                      path	 ac_mode	 data_out	 3.38
                      path	 addr	 w_mode_bus	 3.15
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 5.43
                      inport	 ac_mode	 5.20
                      inport	 addr	 4.49
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 4.70
                      internal	 4.70
                    </data>
                    <data bit_width="128">
                      path	 ac_mode	 w_mode_bus	 5.01
                      path	 ac_mode	 data_out	 6.20
                      path	 addr	 w_mode_bus	 5.10
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 7.52
                      inport	 ac_mode	 8.81
                      inport	 addr	 7.74
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 5.96
                      internal	 6.09
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,32">
                <max>
                  <data bit_width="8">
                    path	 addr	 addr_bus	 0.00
                    
                    
                    
                    
                    inport	 data_in	 0
                    
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="16">
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.08
                    
                    
                    inport	 data_in	 0
                    inport	 data_in	 0
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="64">
                    path	 addr	 w_mode_bus	 1.71
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.38
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 5.43
                    inport	 addr	 4.09
                    inport	 data_in	 0
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 3.33
                    internal	 3.33
                  </data>
                  <data bit_width="128">
                    path	 ac_mode	 w_mode_bus	 2.59
                    path	 ac_mode	 data_out	 4.66
                    path	 addr	 w_mode_bus	 4.69
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 6.45
                    inport	 ac_mode	 6.93
                    inport	 addr	 8.95
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 5.05
                    internal	 5.05
                  </data>
                </max>
                <min>
                  <data bit_width="8">
                    path	 addr	 addr_bus	 0.00
                    
                    
                    
                    
                    inport	 data_in	 0.00
                    
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="16">
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.08
                    
                    
                    inport	 data_in	 0.00
                    inport	 data_in	 0.00
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="64">
                    path	 addr	 w_mode_bus	 1.71
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.38
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 5.43
                    inport	 addr	 4.09
                    inport	 data_in	 0.00
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 3.33
                    internal	 3.33
                  </data>
                  <data bit_width="128">
                    path	 ac_mode	 w_mode_bus	 2.59
                    path	 ac_mode	 data_out	 4.66
                    path	 addr	 w_mode_bus	 4.69
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 6.45
                    inport	 ac_mode	 6.93
                    inport	 addr	 8.95
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 5.05
                    internal	 5.05
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.00
                      
                      
                      
                      
                      inport	 data_in	 0.00
                      
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 1.19
                      
                      
                      inport	 data_in	 0.00
                      inport	 data_in	 0.00
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="64">
                      path	 addr	 w_mode_bus	 0.66
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 1.93
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 4.26
                      inport	 addr	 4.23
                      inport	 data_in	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 2.39
                      internal	 2.39
                    </data>
                    <data bit_width="128">
                      path	 ac_mode	 w_mode_bus	 2.21
                      path	 ac_mode	 data_out	 5.76
                      path	 addr	 w_mode_bus	 3.79
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 5.20
                      inport	 ac_mode	 7.41
                      inport	 addr	 7.05
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 3.88
                      internal	 3.88
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.10
                      
                      
                      
                      
                      inport	 data_in	 0.10
                      
                      
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.11
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 1.11
                      
                      
                      inport	 data_in	 0.10
                      inport	 data_in	 0.10
                      
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.11
                    </data>
                    <data bit_width="64">
                      path	 addr	 w_mode_bus	 0.41
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 1.09
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 2.73
                      inport	 addr	 1.51
                      inport	 data_in	 0.10
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 2.00
                      internal	 2.00
                    </data>
                    <data bit_width="128">
                      path	 ac_mode	 w_mode_bus	 2.19
                      path	 ac_mode	 data_out	 1.70
                      path	 addr	 w_mode_bus	 1.74
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 2.83
                      inport	 ac_mode	 2.83
                      inport	 addr	 2.49
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 2.98
                      internal	 2.89
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.00
                      
                      
                      
                      
                      inport	 data_in	 0.00
                      
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 2.08
                      
                      
                      inport	 data_in	 0.00
                      inport	 data_in	 0.00
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="64">
                      path	 addr	 w_mode_bus	 1.71
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 2.38
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 5.43
                      inport	 addr	 4.09
                      inport	 data_in	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 3.33
                      internal	 3.33
                    </data>
                    <data bit_width="128">
                      path	 ac_mode	 w_mode_bus	 2.59
                      path	 ac_mode	 data_out	 4.66
                      path	 addr	 w_mode_bus	 4.69
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 6.45
                      inport	 ac_mode	 6.93
                      inport	 addr	 8.95
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 5.05
                      internal	 5.05
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,64">
                <max>
                  <data bit_width="8">
                    path	 addr	 addr_bus	 0.00
                    
                    
                    inport	 data_in	 0
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="16">
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.08
                    inport	 data_in	 0
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="64">
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.38
                    inport	 data_in	 0
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 0.72
                    internal	 1.11
                  </data>
                  <data bit_width="128">
                    path	 addr	 w_mode_bus	 1.10
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.59
                    inport	 addr	 4.13
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 3.54
                    internal	 3.54
                  </data>
                </max>
                <min>
                  <data bit_width="8">
                    path	 addr	 addr_bus	 0.00
                    
                    
                    inport	 data_in	 0.00
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="16">
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.08
                    inport	 data_in	 0.00
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="64">
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.38
                    inport	 data_in	 0.00
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 0.72
                    internal	 1.11
                  </data>
                  <data bit_width="128">
                    path	 addr	 w_mode_bus	 1.10
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.59
                    inport	 addr	 4.13
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 3.54
                    internal	 3.54
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.00
                      
                      
                      inport	 data_in	 0.00
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 1.19
                      inport	 data_in	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="64">
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 1.93
                      inport	 data_in	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.72
                      internal	 1.12
                    </data>
                    <data bit_width="128">
                      path	 addr	 w_mode_bus	 1.53
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 2.72
                      inport	 addr	 5.22
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 2.89
                      internal	 2.89
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.10
                      
                      
                      inport	 data_in	 0.10
                      
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.11
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 1.11
                      inport	 data_in	 0.10
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.11
                    </data>
                    <data bit_width="64">
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 1.09
                      inport	 data_in	 0.10
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.12
                    </data>
                    <data bit_width="128">
                      path	 addr	 w_mode_bus	 0.56
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 1.47
                      inport	 addr	 1.80
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 2.02
                      internal	 2.02
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.00
                      
                      
                      inport	 data_in	 0.00
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 2.08
                      inport	 data_in	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="64">
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 2.38
                      inport	 data_in	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.72
                      internal	 1.11
                    </data>
                    <data bit_width="128">
                      path	 addr	 w_mode_bus	 1.10
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 2.59
                      inport	 addr	 4.13
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 3.54
                      internal	 3.54
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,128">
                <max>
                  <data bit_width="8">
                    path	 addr	 addr_bus	 0.00
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="16">
                    path	 addr	 addr_bus	 0.00
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="64">
                    path	 addr	 addr_bus	 0.00
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 0.72
                    internal	 1.11
                  </data>
                  <data bit_width="128">
                    path	 addr	 addr_bus	 0.00
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 0.72
                    internal	 1.11
                  </data>
                </max>
                <min>
                  <data bit_width="8">
                    path	 addr	 addr_bus	 0.00
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="16">
                    path	 addr	 addr_bus	 0.00
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="64">
                    path	 addr	 addr_bus	 0.00
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 0.72
                    internal	 1.11
                  </data>
                  <data bit_width="128">
                    path	 addr	 addr_bus	 0.00
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 0.72
                    internal	 1.11
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="64">
                      path	 addr	 addr_bus	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.72
                      internal	 1.12
                    </data>
                    <data bit_width="128">
                      path	 addr	 addr_bus	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.72
                      internal	 1.12
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.10
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.11
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.10
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.11
                    </data>
                    <data bit_width="64">
                      path	 addr	 addr_bus	 0.10
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.12
                    </data>
                    <data bit_width="128">
                      path	 addr	 addr_bus	 0.10
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.12
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="64">
                      path	 addr	 addr_bus	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.72
                      internal	 1.11
                    </data>
                    <data bit_width="128">
                      path	 addr	 addr_bus	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.72
                      internal	 1.11
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,8">
                <max>
                  <data bit_width="8">
                    path	 addr	 addr_bus	 0.00
                    
                    
                    
                    
                    inport	 data_in	 0
                    
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="16">
                    path	 addr	 w_mode_bus	 0.76
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.08
                    
                    
                    inport	 addr	 1.91
                    inport	 data_in	 0
                    
                    outport	 REG_DATA_OUT	 3.01
                    internal	 3.01
                  </data>
                  <data bit_width="64">
                    path	 ac_mode	 w_mode_bus	 3.74
                    path	 ac_mode	 data_out	 4.05
                    path	 addr	 w_mode_bus	 5.79
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 8.20
                    inport	 ac_mode	 7.34
                    inport	 addr	 7.60
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 5.01
                    internal	 5.39
                  </data>
                  <data bit_width="128">
                    path	 ac_mode	 w_mode_bus	 6.55
                    path	 ac_mode	 data_out	 7.17
                    path	 addr	 w_mode_bus	 6.77
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 10.01
                    inport	 ac_mode	 11.09
                    inport	 addr	 9.28
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 7.25
                    internal	 8.58
                  </data>
                </max>
                <min>
                  <data bit_width="8">
                    path	 addr	 addr_bus	 0.00
                    
                    
                    
                    
                    inport	 data_in	 0.00
                    
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="16">
                    path	 addr	 w_mode_bus	 0.76
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.08
                    
                    
                    inport	 addr	 1.91
                    inport	 data_in	 0.00
                    
                    outport	 REG_DATA_OUT	 3.01
                    internal	 3.01
                  </data>
                  <data bit_width="64">
                    path	 ac_mode	 w_mode_bus	 3.74
                    path	 ac_mode	 data_out	 4.05
                    path	 addr	 w_mode_bus	 5.79
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 8.20
                    inport	 ac_mode	 7.34
                    inport	 addr	 7.60
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 5.01
                    internal	 5.39
                  </data>
                  <data bit_width="128">
                    path	 ac_mode	 w_mode_bus	 6.55
                    path	 ac_mode	 data_out	 7.17
                    path	 addr	 w_mode_bus	 6.77
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 10.01
                    inport	 ac_mode	 11.09
                    inport	 addr	 9.28
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 7.25
                    internal	 8.58
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.00
                      
                      
                      
                      
                      inport	 data_in	 0.00
                      
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="16">
                      path	 addr	 w_mode_bus	 0.66
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 1.19
                      
                      
                      inport	 addr	 1.62
                      inport	 data_in	 0.00
                      
                      outport	 REG_DATA_OUT	 1.91
                      internal	 1.91
                    </data>
                    <data bit_width="64">
                      path	 ac_mode	 w_mode_bus	 4.57
                      path	 ac_mode	 data_out	 4.29
                      path	 addr	 w_mode_bus	 4.96
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 6.90
                      inport	 ac_mode	 7.21
                      inport	 addr	 7.80
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 5.49
                      internal	 5.52
                    </data>
                    <data bit_width="128">
                      path	 ac_mode	 w_mode_bus	 6.57
                      path	 ac_mode	 data_out	 7.06
                      path	 addr	 w_mode_bus	 7.66
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 9.45
                      inport	 ac_mode	 9.72
                      inport	 addr	 9.55
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 6.04
                      internal	 7.49
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.10
                      
                      
                      
                      
                      inport	 data_in	 0.10
                      
                      
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.11
                    </data>
                    <data bit_width="16">
                      path	 addr	 w_mode_bus	 0.44
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 1.11
                      
                      
                      inport	 addr	 1.23
                      inport	 data_in	 0.10
                      
                      outport	 REG_DATA_OUT	 1.83
                      internal	 1.80
                    </data>
                    <data bit_width="64">
                      path	 ac_mode	 w_mode_bus	 2.26
                      path	 ac_mode	 data_out	 2.79
                      path	 addr	 w_mode_bus	 2.67
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 3.95
                      inport	 ac_mode	 3.95
                      inport	 addr	 3.53
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 4.12
                      internal	 4.11
                    </data>
                    <data bit_width="128">
                      path	 ac_mode	 w_mode_bus	 3.27
                      path	 ac_mode	 data_out	 3.76
                      path	 addr	 w_mode_bus	 3.29
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 5.07
                      inport	 ac_mode	 5.05
                      inport	 addr	 4.15
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 5.10
                      internal	 5.07
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.00
                      
                      
                      
                      
                      inport	 data_in	 0.00
                      
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="16">
                      path	 addr	 w_mode_bus	 0.76
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 2.08
                      
                      
                      inport	 addr	 1.91
                      inport	 data_in	 0.00
                      
                      outport	 REG_DATA_OUT	 3.01
                      internal	 3.01
                    </data>
                    <data bit_width="64">
                      path	 ac_mode	 w_mode_bus	 3.74
                      path	 ac_mode	 data_out	 4.05
                      path	 addr	 w_mode_bus	 5.79
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 8.20
                      inport	 ac_mode	 7.34
                      inport	 addr	 7.60
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 5.01
                      internal	 5.39
                    </data>
                    <data bit_width="128">
                      path	 ac_mode	 w_mode_bus	 6.55
                      path	 ac_mode	 data_out	 7.17
                      path	 addr	 w_mode_bus	 6.77
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 10.01
                      inport	 ac_mode	 11.09
                      inport	 addr	 9.28
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 7.25
                      internal	 8.58
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,16">
                <max>
                  <data bit_width="8">
                    path	 addr	 addr_bus	 0.00
                    
                    
                    
                    
                    inport	 data_in	 0
                    
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="16">
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.08
                    
                    
                    inport	 data_in	 0
                    inport	 data_in	 0
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="64">
                    path	 ac_mode	 w_mode_bus	 2.50
                    path	 ac_mode	 data_out	 3.54
                    path	 addr	 w_mode_bus	 3.15
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 5.43
                    inport	 ac_mode	 5.18
                    inport	 addr	 4.49
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 4.65
                    internal	 4.65
                  </data>
                  <data bit_width="128">
                    path	 ac_mode	 w_mode_bus	 4.97
                    path	 ac_mode	 data_out	 5.97
                    path	 addr	 w_mode_bus	 5.10
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 7.50
                    inport	 ac_mode	 8.58
                    inport	 addr	 7.74
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 5.96
                    internal	 6.09
                  </data>
                </max>
                <min>
                  <data bit_width="8">
                    path	 addr	 addr_bus	 0.00
                    
                    
                    
                    
                    inport	 data_in	 0.00
                    
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="16">
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.08
                    
                    
                    inport	 data_in	 0.00
                    inport	 data_in	 0.00
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="64">
                    path	 ac_mode	 w_mode_bus	 2.50
                    path	 ac_mode	 data_out	 3.54
                    path	 addr	 w_mode_bus	 3.15
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 5.43
                    inport	 ac_mode	 5.18
                    inport	 addr	 4.49
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 4.65
                    internal	 4.65
                  </data>
                  <data bit_width="128">
                    path	 ac_mode	 w_mode_bus	 4.97
                    path	 ac_mode	 data_out	 5.97
                    path	 addr	 w_mode_bus	 5.10
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 7.50
                    inport	 ac_mode	 8.58
                    inport	 addr	 7.74
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 5.96
                    internal	 6.09
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.00
                      
                      
                      
                      
                      inport	 data_in	 0.00
                      
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 1.19
                      
                      
                      inport	 data_in	 0.00
                      inport	 data_in	 0.00
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="64">
                      path	 ac_mode	 w_mode_bus	 1.58
                      path	 ac_mode	 data_out	 2.95
                      path	 addr	 w_mode_bus	 3.11
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 4.26
                      inport	 ac_mode	 4.90
                      inport	 addr	 4.42
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 3.65
                      internal	 3.91
                    </data>
                    <data bit_width="128">
                      path	 ac_mode	 w_mode_bus	 4.82
                      path	 ac_mode	 data_out	 5.75
                      path	 addr	 w_mode_bus	 5.20
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 7.49
                      inport	 ac_mode	 8.30
                      inport	 addr	 7.64
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 5.81
                      internal	 5.81
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.10
                      
                      
                      
                      
                      inport	 data_in	 0.10
                      
                      
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.11
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 1.11
                      
                      
                      inport	 data_in	 0.10
                      inport	 data_in	 0.10
                      
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.11
                    </data>
                    <data bit_width="64">
                      path	 ac_mode	 w_mode_bus	 1.27
                      path	 ac_mode	 data_out	 1.78
                      path	 addr	 w_mode_bus	 1.34
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 2.73
                      inport	 ac_mode	 2.67
                      inport	 addr	 2.47
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 2.91
                      internal	 2.82
                    </data>
                    <data bit_width="128">
                      path	 ac_mode	 w_mode_bus	 2.50
                      path	 ac_mode	 data_out	 2.63
                      path	 addr	 w_mode_bus	 2.25
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 4.05
                      inport	 ac_mode	 3.96
                      inport	 addr	 3.74
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 4.07
                      internal	 4.03
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.00
                      
                      
                      
                      
                      inport	 data_in	 0.00
                      
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 2.08
                      
                      
                      inport	 data_in	 0.00
                      inport	 data_in	 0.00
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="64">
                      path	 ac_mode	 w_mode_bus	 2.50
                      path	 ac_mode	 data_out	 3.54
                      path	 addr	 w_mode_bus	 3.15
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 5.43
                      inport	 ac_mode	 5.18
                      inport	 addr	 4.49
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 4.65
                      internal	 4.65
                    </data>
                    <data bit_width="128">
                      path	 ac_mode	 w_mode_bus	 4.97
                      path	 ac_mode	 data_out	 5.97
                      path	 addr	 w_mode_bus	 5.10
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 7.50
                      inport	 ac_mode	 8.58
                      inport	 addr	 7.74
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 5.96
                      internal	 6.09
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,32">
                <max>
                  <data bit_width="8">
                    path	 addr	 addr_bus	 0.00
                    
                    
                    
                    
                    inport	 data_in	 0
                    
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="16">
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.08
                    
                    
                    inport	 data_in	 0
                    inport	 data_in	 0
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="64">
                    path	 addr	 w_mode_bus	 1.19
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.38
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 5.43
                    inport	 addr	 4.09
                    inport	 data_in	 0
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 3.33
                    internal	 3.33
                  </data>
                  <data bit_width="128">
                    path	 ac_mode	 w_mode_bus	 2.59
                    path	 ac_mode	 data_out	 4.66
                    path	 addr	 w_mode_bus	 4.68
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 6.45
                    inport	 ac_mode	 6.93
                    inport	 addr	 8.95
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 5.05
                    internal	 5.05
                  </data>
                </max>
                <min>
                  <data bit_width="8">
                    path	 addr	 addr_bus	 0.00
                    
                    
                    
                    
                    inport	 data_in	 0.00
                    
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="16">
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.08
                    
                    
                    inport	 data_in	 0.00
                    inport	 data_in	 0.00
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="64">
                    path	 addr	 w_mode_bus	 1.19
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.38
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 5.43
                    inport	 addr	 4.09
                    inport	 data_in	 0.00
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 3.33
                    internal	 3.33
                  </data>
                  <data bit_width="128">
                    path	 ac_mode	 w_mode_bus	 2.59
                    path	 ac_mode	 data_out	 4.66
                    path	 addr	 w_mode_bus	 4.68
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 6.45
                    inport	 ac_mode	 6.93
                    inport	 addr	 8.95
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 5.05
                    internal	 5.05
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.00
                      
                      
                      
                      
                      inport	 data_in	 0.00
                      
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 1.19
                      
                      
                      inport	 data_in	 0.00
                      inport	 data_in	 0.00
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="64">
                      path	 addr	 w_mode_bus	 0.66
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 1.93
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 4.26
                      inport	 addr	 4.23
                      inport	 data_in	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 2.39
                      internal	 2.39
                    </data>
                    <data bit_width="128">
                      path	 ac_mode	 w_mode_bus	 2.21
                      path	 ac_mode	 data_out	 5.76
                      path	 addr	 w_mode_bus	 3.79
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 5.20
                      inport	 ac_mode	 7.41
                      inport	 addr	 7.05
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 3.88
                      internal	 3.88
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.10
                      
                      
                      
                      
                      inport	 data_in	 0.10
                      
                      
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.11
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 1.11
                      
                      
                      inport	 data_in	 0.10
                      inport	 data_in	 0.10
                      
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.11
                    </data>
                    <data bit_width="64">
                      path	 addr	 w_mode_bus	 0.41
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 1.09
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 2.73
                      inport	 addr	 1.51
                      inport	 data_in	 0.10
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 2.00
                      internal	 2.00
                    </data>
                    <data bit_width="128">
                      path	 ac_mode	 w_mode_bus	 2.19
                      path	 ac_mode	 data_out	 1.70
                      path	 addr	 w_mode_bus	 1.74
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 2.83
                      inport	 ac_mode	 2.83
                      inport	 addr	 2.49
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 2.98
                      internal	 2.89
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.00
                      
                      
                      
                      
                      inport	 data_in	 0.00
                      
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 2.08
                      
                      
                      inport	 data_in	 0.00
                      inport	 data_in	 0.00
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="64">
                      path	 addr	 w_mode_bus	 1.19
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 2.38
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 5.43
                      inport	 addr	 4.09
                      inport	 data_in	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 3.33
                      internal	 3.33
                    </data>
                    <data bit_width="128">
                      path	 ac_mode	 w_mode_bus	 2.59
                      path	 ac_mode	 data_out	 4.66
                      path	 addr	 w_mode_bus	 4.68
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 6.45
                      inport	 ac_mode	 6.93
                      inport	 addr	 8.95
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 5.05
                      internal	 5.05
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,64">
                <max>
                  <data bit_width="8">
                    path	 addr	 addr_bus	 0.00
                    
                    
                    inport	 data_in	 0
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="16">
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.08
                    inport	 data_in	 0
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="64">
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.38
                    inport	 data_in	 0
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 0.72
                    internal	 1.11
                  </data>
                  <data bit_width="128">
                    path	 addr	 w_mode_bus	 2.05
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.59
                    inport	 addr	 4.13
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 3.54
                    internal	 3.54
                  </data>
                </max>
                <min>
                  <data bit_width="8">
                    path	 addr	 addr_bus	 0.00
                    
                    
                    inport	 data_in	 0.00
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="16">
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.08
                    inport	 data_in	 0.00
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="64">
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.38
                    inport	 data_in	 0.00
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 0.72
                    internal	 1.11
                  </data>
                  <data bit_width="128">
                    path	 addr	 w_mode_bus	 2.05
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.59
                    inport	 addr	 4.13
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 3.54
                    internal	 3.54
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.00
                      
                      
                      inport	 data_in	 0.00
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 1.19
                      inport	 data_in	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="64">
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 1.93
                      inport	 data_in	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.72
                      internal	 1.12
                    </data>
                    <data bit_width="128">
                      path	 addr	 w_mode_bus	 1.53
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 2.72
                      inport	 addr	 5.22
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 2.89
                      internal	 2.89
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.10
                      
                      
                      inport	 data_in	 0.10
                      
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.11
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 1.11
                      inport	 data_in	 0.10
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.11
                    </data>
                    <data bit_width="64">
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 1.09
                      inport	 data_in	 0.10
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.12
                    </data>
                    <data bit_width="128">
                      path	 addr	 w_mode_bus	 0.56
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 1.47
                      inport	 addr	 1.80
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 2.02
                      internal	 2.02
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.00
                      
                      
                      inport	 data_in	 0.00
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 2.08
                      inport	 data_in	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="64">
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 2.38
                      inport	 data_in	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.72
                      internal	 1.11
                    </data>
                    <data bit_width="128">
                      path	 addr	 w_mode_bus	 2.05
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 2.59
                      inport	 addr	 4.13
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 3.54
                      internal	 3.54
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,128">
                <max>
                  <data bit_width="8">
                    path	 addr	 addr_bus	 0.00
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="16">
                    path	 addr	 addr_bus	 0.00
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="64">
                    path	 addr	 addr_bus	 0.00
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 0.72
                    internal	 1.11
                  </data>
                  <data bit_width="128">
                    path	 addr	 addr_bus	 0.00
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 0.72
                    internal	 1.11
                  </data>
                </max>
                <min>
                  <data bit_width="8">
                    path	 addr	 addr_bus	 0.00
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="16">
                    path	 addr	 addr_bus	 0.00
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="64">
                    path	 addr	 addr_bus	 0.00
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 0.72
                    internal	 1.11
                  </data>
                  <data bit_width="128">
                    path	 addr	 addr_bus	 0.00
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 0.72
                    internal	 1.11
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="64">
                      path	 addr	 addr_bus	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.72
                      internal	 1.12
                    </data>
                    <data bit_width="128">
                      path	 addr	 addr_bus	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.72
                      internal	 1.12
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.10
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.11
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.10
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.11
                    </data>
                    <data bit_width="64">
                      path	 addr	 addr_bus	 0.10
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.12
                    </data>
                    <data bit_width="128">
                      path	 addr	 addr_bus	 0.10
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.12
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="64">
                      path	 addr	 addr_bus	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.72
                      internal	 1.11
                    </data>
                    <data bit_width="128">
                      path	 addr	 addr_bus	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.72
                      internal	 1.11
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,8">
                <max>
                  <data bit_width="8">
                    path	 addr	 addr_bus	 0.00
                    
                    
                    
                    
                    inport	 data_in	 0
                    
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="16">
                    path	 addr	 w_mode_bus	 0.76
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.08
                    
                    
                    inport	 addr	 1.91
                    inport	 data_in	 0
                    
                    outport	 REG_DATA_OUT	 3.01
                    internal	 3.01
                  </data>
                  <data bit_width="64">
                    path	 ac_mode	 w_mode_bus	 3.74
                    path	 ac_mode	 data_out	 4.20
                    path	 addr	 w_mode_bus	 5.79
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 8.20
                    inport	 ac_mode	 7.34
                    inport	 addr	 7.60
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 5.01
                    internal	 5.39
                  </data>
                  <data bit_width="128">
                    path	 ac_mode	 w_mode_bus	 6.55
                    path	 ac_mode	 data_out	 7.17
                    path	 addr	 w_mode_bus	 6.80
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 10.03
                    inport	 ac_mode	 11.09
                    inport	 addr	 9.43
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 7.24
                    internal	 8.58
                  </data>
                </max>
                <min>
                  <data bit_width="8">
                    path	 addr	 addr_bus	 0.00
                    
                    
                    
                    
                    inport	 data_in	 0.00
                    
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="16">
                    path	 addr	 w_mode_bus	 0.76
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.08
                    
                    
                    inport	 addr	 1.91
                    inport	 data_in	 0.00
                    
                    outport	 REG_DATA_OUT	 3.01
                    internal	 3.01
                  </data>
                  <data bit_width="64">
                    path	 ac_mode	 w_mode_bus	 3.74
                    path	 ac_mode	 data_out	 4.20
                    path	 addr	 w_mode_bus	 5.79
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 8.20
                    inport	 ac_mode	 7.34
                    inport	 addr	 7.60
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 5.01
                    internal	 5.39
                  </data>
                  <data bit_width="128">
                    path	 ac_mode	 w_mode_bus	 6.55
                    path	 ac_mode	 data_out	 7.17
                    path	 addr	 w_mode_bus	 6.80
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 10.03
                    inport	 ac_mode	 11.09
                    inport	 addr	 9.43
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 7.24
                    internal	 8.58
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.00
                      
                      
                      
                      
                      inport	 data_in	 0.00
                      
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="16">
                      path	 addr	 w_mode_bus	 0.66
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 1.19
                      
                      
                      inport	 addr	 1.62
                      inport	 data_in	 0.00
                      
                      outport	 REG_DATA_OUT	 1.91
                      internal	 1.91
                    </data>
                    <data bit_width="64">
                      path	 ac_mode	 w_mode_bus	 4.57
                      path	 ac_mode	 data_out	 4.29
                      path	 addr	 w_mode_bus	 4.96
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 6.90
                      inport	 ac_mode	 7.21
                      inport	 addr	 7.80
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 5.49
                      internal	 5.52
                    </data>
                    <data bit_width="128">
                      path	 ac_mode	 w_mode_bus	 6.57
                      path	 ac_mode	 data_out	 7.06
                      path	 addr	 w_mode_bus	 7.66
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 9.45
                      inport	 ac_mode	 9.72
                      inport	 addr	 9.55
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 6.04
                      internal	 7.49
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.10
                      
                      
                      
                      
                      inport	 data_in	 0.10
                      
                      
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.11
                    </data>
                    <data bit_width="16">
                      path	 addr	 w_mode_bus	 0.44
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 1.11
                      
                      
                      inport	 addr	 1.23
                      inport	 data_in	 0.10
                      
                      outport	 REG_DATA_OUT	 1.83
                      internal	 1.80
                    </data>
                    <data bit_width="64">
                      path	 ac_mode	 w_mode_bus	 2.26
                      path	 ac_mode	 data_out	 2.79
                      path	 addr	 w_mode_bus	 2.67
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 3.95
                      inport	 ac_mode	 3.95
                      inport	 addr	 3.53
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 4.12
                      internal	 4.11
                    </data>
                    <data bit_width="128">
                      path	 ac_mode	 w_mode_bus	 3.27
                      path	 ac_mode	 data_out	 3.76
                      path	 addr	 w_mode_bus	 3.29
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 5.07
                      inport	 ac_mode	 5.05
                      inport	 addr	 4.15
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 5.10
                      internal	 5.07
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.00
                      
                      
                      
                      
                      inport	 data_in	 0.00
                      
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="16">
                      path	 addr	 w_mode_bus	 0.76
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 2.08
                      
                      
                      inport	 addr	 1.91
                      inport	 data_in	 0.00
                      
                      outport	 REG_DATA_OUT	 3.01
                      internal	 3.01
                    </data>
                    <data bit_width="64">
                      path	 ac_mode	 w_mode_bus	 3.74
                      path	 ac_mode	 data_out	 4.20
                      path	 addr	 w_mode_bus	 5.79
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 8.20
                      inport	 ac_mode	 7.34
                      inport	 addr	 7.60
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 5.01
                      internal	 5.39
                    </data>
                    <data bit_width="128">
                      path	 ac_mode	 w_mode_bus	 6.55
                      path	 ac_mode	 data_out	 7.17
                      path	 addr	 w_mode_bus	 6.80
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 10.03
                      inport	 ac_mode	 11.09
                      inport	 addr	 9.43
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 7.24
                      internal	 8.58
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,16">
                <max>
                  <data bit_width="8">
                    path	 addr	 addr_bus	 0.00
                    
                    
                    
                    
                    inport	 data_in	 0
                    
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="16">
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.08
                    
                    
                    inport	 data_in	 0
                    inport	 data_in	 0
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="64">
                    path	 ac_mode	 w_mode_bus	 1.98
                    path	 ac_mode	 data_out	 3.99
                    path	 addr	 w_mode_bus	 3.15
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 5.41
                    inport	 ac_mode	 5.23
                    inport	 addr	 4.50
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 4.71
                    internal	 4.71
                  </data>
                  <data bit_width="128">
                    path	 ac_mode	 w_mode_bus	 4.97
                    path	 ac_mode	 data_out	 5.97
                    path	 addr	 w_mode_bus	 5.12
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 7.51
                    inport	 ac_mode	 8.58
                    inport	 addr	 7.74
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 5.95
                    internal	 6.09
                  </data>
                </max>
                <min>
                  <data bit_width="8">
                    path	 addr	 addr_bus	 0.00
                    
                    
                    
                    
                    inport	 data_in	 0.00
                    
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="16">
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.08
                    
                    
                    inport	 data_in	 0.00
                    inport	 data_in	 0.00
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="64">
                    path	 ac_mode	 w_mode_bus	 1.98
                    path	 ac_mode	 data_out	 3.99
                    path	 addr	 w_mode_bus	 3.15
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 5.41
                    inport	 ac_mode	 5.23
                    inport	 addr	 4.50
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 4.71
                    internal	 4.71
                  </data>
                  <data bit_width="128">
                    path	 ac_mode	 w_mode_bus	 4.97
                    path	 ac_mode	 data_out	 5.97
                    path	 addr	 w_mode_bus	 5.12
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 7.51
                    inport	 ac_mode	 8.58
                    inport	 addr	 7.74
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 5.95
                    internal	 6.09
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.00
                      
                      
                      
                      
                      inport	 data_in	 0.00
                      
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 1.19
                      
                      
                      inport	 data_in	 0.00
                      inport	 data_in	 0.00
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="64">
                      path	 ac_mode	 w_mode_bus	 1.58
                      path	 ac_mode	 data_out	 2.95
                      path	 addr	 w_mode_bus	 3.11
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 4.26
                      inport	 ac_mode	 4.90
                      inport	 addr	 4.42
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 3.65
                      internal	 3.91
                    </data>
                    <data bit_width="128">
                      path	 ac_mode	 w_mode_bus	 4.82
                      path	 ac_mode	 data_out	 5.75
                      path	 addr	 w_mode_bus	 5.20
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 7.49
                      inport	 ac_mode	 8.30
                      inport	 addr	 7.64
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 5.81
                      internal	 5.81
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.10
                      
                      
                      
                      
                      inport	 data_in	 0.10
                      
                      
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.11
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 1.11
                      
                      
                      inport	 data_in	 0.10
                      inport	 data_in	 0.10
                      
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.11
                    </data>
                    <data bit_width="64">
                      path	 ac_mode	 w_mode_bus	 1.27
                      path	 ac_mode	 data_out	 1.78
                      path	 addr	 w_mode_bus	 1.34
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 2.73
                      inport	 ac_mode	 2.67
                      inport	 addr	 2.47
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 2.91
                      internal	 2.82
                    </data>
                    <data bit_width="128">
                      path	 ac_mode	 w_mode_bus	 2.50
                      path	 ac_mode	 data_out	 2.63
                      path	 addr	 w_mode_bus	 2.25
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 4.05
                      inport	 ac_mode	 3.96
                      inport	 addr	 3.74
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 4.07
                      internal	 4.03
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.00
                      
                      
                      
                      
                      inport	 data_in	 0.00
                      
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 2.08
                      
                      
                      inport	 data_in	 0.00
                      inport	 data_in	 0.00
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="64">
                      path	 ac_mode	 w_mode_bus	 1.98
                      path	 ac_mode	 data_out	 3.99
                      path	 addr	 w_mode_bus	 3.15
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 5.41
                      inport	 ac_mode	 5.23
                      inport	 addr	 4.50
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 4.71
                      internal	 4.71
                    </data>
                    <data bit_width="128">
                      path	 ac_mode	 w_mode_bus	 4.97
                      path	 ac_mode	 data_out	 5.97
                      path	 addr	 w_mode_bus	 5.12
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 7.51
                      inport	 ac_mode	 8.58
                      inport	 addr	 7.74
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 5.95
                      internal	 6.09
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,32">
                <max>
                  <data bit_width="8">
                    path	 addr	 addr_bus	 0.00
                    
                    
                    
                    
                    inport	 data_in	 0
                    
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="16">
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.08
                    
                    
                    inport	 data_in	 0
                    inport	 data_in	 0
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="64">
                    path	 addr	 w_mode_bus	 1.19
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.38
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 5.41
                    inport	 addr	 4.09
                    inport	 data_in	 0
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 3.33
                    internal	 3.33
                  </data>
                  <data bit_width="128">
                    path	 ac_mode	 w_mode_bus	 2.59
                    path	 ac_mode	 data_out	 4.66
                    path	 addr	 w_mode_bus	 4.68
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 6.45
                    inport	 ac_mode	 6.93
                    inport	 addr	 8.95
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 5.05
                    internal	 5.05
                  </data>
                </max>
                <min>
                  <data bit_width="8">
                    path	 addr	 addr_bus	 0.00
                    
                    
                    
                    
                    inport	 data_in	 0.00
                    
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="16">
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.08
                    
                    
                    inport	 data_in	 0.00
                    inport	 data_in	 0.00
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="64">
                    path	 addr	 w_mode_bus	 1.19
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.38
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 5.41
                    inport	 addr	 4.09
                    inport	 data_in	 0.00
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 3.33
                    internal	 3.33
                  </data>
                  <data bit_width="128">
                    path	 ac_mode	 w_mode_bus	 2.59
                    path	 ac_mode	 data_out	 4.66
                    path	 addr	 w_mode_bus	 4.68
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 6.45
                    inport	 ac_mode	 6.93
                    inport	 addr	 8.95
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 5.05
                    internal	 5.05
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.00
                      
                      
                      
                      
                      inport	 data_in	 0.00
                      
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 1.19
                      
                      
                      inport	 data_in	 0.00
                      inport	 data_in	 0.00
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="64">
                      path	 addr	 w_mode_bus	 0.66
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 1.93
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 4.26
                      inport	 addr	 4.23
                      inport	 data_in	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 2.39
                      internal	 2.39
                    </data>
                    <data bit_width="128">
                      path	 ac_mode	 w_mode_bus	 2.21
                      path	 ac_mode	 data_out	 5.76
                      path	 addr	 w_mode_bus	 3.79
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 5.20
                      inport	 ac_mode	 7.41
                      inport	 addr	 7.05
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 3.88
                      internal	 3.88
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.10
                      
                      
                      
                      
                      inport	 data_in	 0.10
                      
                      
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.11
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 1.11
                      
                      
                      inport	 data_in	 0.10
                      inport	 data_in	 0.10
                      
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.11
                    </data>
                    <data bit_width="64">
                      path	 addr	 w_mode_bus	 0.41
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 1.09
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 2.73
                      inport	 addr	 1.51
                      inport	 data_in	 0.10
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 2.00
                      internal	 2.00
                    </data>
                    <data bit_width="128">
                      path	 ac_mode	 w_mode_bus	 2.19
                      path	 ac_mode	 data_out	 1.70
                      path	 addr	 w_mode_bus	 1.74
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 2.83
                      inport	 ac_mode	 2.83
                      inport	 addr	 2.49
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 2.98
                      internal	 2.89
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.00
                      
                      
                      
                      
                      inport	 data_in	 0.00
                      
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 2.08
                      
                      
                      inport	 data_in	 0.00
                      inport	 data_in	 0.00
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="64">
                      path	 addr	 w_mode_bus	 1.19
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 2.38
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 5.41
                      inport	 addr	 4.09
                      inport	 data_in	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 3.33
                      internal	 3.33
                    </data>
                    <data bit_width="128">
                      path	 ac_mode	 w_mode_bus	 2.59
                      path	 ac_mode	 data_out	 4.66
                      path	 addr	 w_mode_bus	 4.68
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 6.45
                      inport	 ac_mode	 6.93
                      inport	 addr	 8.95
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 5.05
                      internal	 5.05
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,64">
                <max>
                  <data bit_width="8">
                    path	 addr	 addr_bus	 0.00
                    
                    
                    inport	 data_in	 0
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="16">
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.08
                    inport	 data_in	 0
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="64">
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.38
                    inport	 data_in	 0
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 0.72
                    internal	 1.11
                  </data>
                  <data bit_width="128">
                    path	 addr	 w_mode_bus	 2.05
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.59
                    inport	 addr	 4.13
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 3.54
                    internal	 3.54
                  </data>
                </max>
                <min>
                  <data bit_width="8">
                    path	 addr	 addr_bus	 0.00
                    
                    
                    inport	 data_in	 0.00
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="16">
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.08
                    inport	 data_in	 0.00
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="64">
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.38
                    inport	 data_in	 0.00
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 0.72
                    internal	 1.11
                  </data>
                  <data bit_width="128">
                    path	 addr	 w_mode_bus	 2.05
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.59
                    inport	 addr	 4.13
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 3.54
                    internal	 3.54
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.00
                      
                      
                      inport	 data_in	 0.00
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 1.19
                      inport	 data_in	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="64">
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 1.93
                      inport	 data_in	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.72
                      internal	 1.12
                    </data>
                    <data bit_width="128">
                      path	 addr	 w_mode_bus	 1.53
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 2.72
                      inport	 addr	 5.22
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 2.89
                      internal	 2.89
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.10
                      
                      
                      inport	 data_in	 0.10
                      
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.11
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 1.11
                      inport	 data_in	 0.10
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.11
                    </data>
                    <data bit_width="64">
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 1.09
                      inport	 data_in	 0.10
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.12
                    </data>
                    <data bit_width="128">
                      path	 addr	 w_mode_bus	 0.56
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 1.47
                      inport	 addr	 1.80
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 2.02
                      internal	 2.02
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.00
                      
                      
                      inport	 data_in	 0.00
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 2.08
                      inport	 data_in	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="64">
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 2.38
                      inport	 data_in	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.72
                      internal	 1.11
                    </data>
                    <data bit_width="128">
                      path	 addr	 w_mode_bus	 2.05
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 2.59
                      inport	 addr	 4.13
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 3.54
                      internal	 3.54
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,128">
                <max>
                  <data bit_width="8">
                    path	 addr	 addr_bus	 0.00
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="16">
                    path	 addr	 addr_bus	 0.00
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="64">
                    path	 addr	 addr_bus	 0.00
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 0.72
                    internal	 1.11
                  </data>
                  <data bit_width="128">
                    path	 addr	 addr_bus	 0.00
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 0.72
                    internal	 1.11
                  </data>
                </max>
                <min>
                  <data bit_width="8">
                    path	 addr	 addr_bus	 0.00
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="16">
                    path	 addr	 addr_bus	 0.00
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="64">
                    path	 addr	 addr_bus	 0.00
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 0.72
                    internal	 1.11
                  </data>
                  <data bit_width="128">
                    path	 addr	 addr_bus	 0.00
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 0.72
                    internal	 1.11
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="64">
                      path	 addr	 addr_bus	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.72
                      internal	 1.12
                    </data>
                    <data bit_width="128">
                      path	 addr	 addr_bus	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.72
                      internal	 1.12
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.10
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.11
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.10
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.11
                    </data>
                    <data bit_width="64">
                      path	 addr	 addr_bus	 0.10
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.12
                    </data>
                    <data bit_width="128">
                      path	 addr	 addr_bus	 0.10
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.12
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="64">
                      path	 addr	 addr_bus	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.72
                      internal	 1.11
                    </data>
                    <data bit_width="128">
                      path	 addr	 addr_bus	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.72
                      internal	 1.11
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,8">
                <max>
                  <data bit_width="8">
                    path	 addr	 addr_bus	 0.00
                    
                    
                    
                    
                    inport	 data_in	 0
                    
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="16">
                    path	 addr	 w_mode_bus	 0.76
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.08
                    
                    
                    inport	 addr	 1.91
                    inport	 data_in	 0
                    
                    outport	 REG_DATA_OUT	 3.01
                    internal	 3.01
                  </data>
                  <data bit_width="64">
                    path	 ac_mode	 w_mode_bus	 3.74
                    path	 ac_mode	 data_out	 4.05
                    path	 addr	 w_mode_bus	 5.79
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 8.20
                    inport	 ac_mode	 7.34
                    inport	 addr	 7.60
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 5.01
                    internal	 5.39
                  </data>
                  <data bit_width="128">
                    path	 ac_mode	 w_mode_bus	 6.55
                    path	 ac_mode	 data_out	 7.17
                    path	 addr	 w_mode_bus	 6.80
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 10.03
                    inport	 ac_mode	 11.09
                    inport	 addr	 9.44
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 7.24
                    internal	 8.58
                  </data>
                </max>
                <min>
                  <data bit_width="8">
                    path	 addr	 addr_bus	 0.00
                    
                    
                    
                    
                    inport	 data_in	 0.00
                    
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="16">
                    path	 addr	 w_mode_bus	 0.76
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.08
                    
                    
                    inport	 addr	 1.91
                    inport	 data_in	 0.00
                    
                    outport	 REG_DATA_OUT	 3.01
                    internal	 3.01
                  </data>
                  <data bit_width="64">
                    path	 ac_mode	 w_mode_bus	 3.74
                    path	 ac_mode	 data_out	 4.05
                    path	 addr	 w_mode_bus	 5.79
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 8.20
                    inport	 ac_mode	 7.34
                    inport	 addr	 7.60
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 5.01
                    internal	 5.39
                  </data>
                  <data bit_width="128">
                    path	 ac_mode	 w_mode_bus	 6.55
                    path	 ac_mode	 data_out	 7.17
                    path	 addr	 w_mode_bus	 6.80
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 10.03
                    inport	 ac_mode	 11.09
                    inport	 addr	 9.44
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 7.24
                    internal	 8.58
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.00
                      
                      
                      
                      
                      inport	 data_in	 0.00
                      
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="16">
                      path	 addr	 w_mode_bus	 0.66
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 1.19
                      
                      
                      inport	 addr	 1.62
                      inport	 data_in	 0.00
                      
                      outport	 REG_DATA_OUT	 1.91
                      internal	 1.91
                    </data>
                    <data bit_width="64">
                      path	 ac_mode	 w_mode_bus	 4.57
                      path	 ac_mode	 data_out	 4.29
                      path	 addr	 w_mode_bus	 4.96
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 6.90
                      inport	 ac_mode	 7.21
                      inport	 addr	 7.80
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 5.49
                      internal	 5.52
                    </data>
                    <data bit_width="128">
                      path	 ac_mode	 w_mode_bus	 6.57
                      path	 ac_mode	 data_out	 7.06
                      path	 addr	 w_mode_bus	 7.66
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 9.45
                      inport	 ac_mode	 9.72
                      inport	 addr	 9.55
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 6.04
                      internal	 7.49
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.10
                      
                      
                      
                      
                      inport	 data_in	 0.10
                      
                      
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.11
                    </data>
                    <data bit_width="16">
                      path	 addr	 w_mode_bus	 0.44
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 1.11
                      
                      
                      inport	 addr	 1.23
                      inport	 data_in	 0.10
                      
                      outport	 REG_DATA_OUT	 1.83
                      internal	 1.80
                    </data>
                    <data bit_width="64">
                      path	 ac_mode	 w_mode_bus	 2.26
                      path	 ac_mode	 data_out	 2.79
                      path	 addr	 w_mode_bus	 2.67
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 3.95
                      inport	 ac_mode	 3.95
                      inport	 addr	 3.53
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 4.12
                      internal	 4.11
                    </data>
                    <data bit_width="128">
                      path	 ac_mode	 w_mode_bus	 3.27
                      path	 ac_mode	 data_out	 3.76
                      path	 addr	 w_mode_bus	 3.29
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 5.07
                      inport	 ac_mode	 5.05
                      inport	 addr	 4.15
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 5.10
                      internal	 5.07
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.00
                      
                      
                      
                      
                      inport	 data_in	 0.00
                      
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="16">
                      path	 addr	 w_mode_bus	 0.76
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 2.08
                      
                      
                      inport	 addr	 1.91
                      inport	 data_in	 0.00
                      
                      outport	 REG_DATA_OUT	 3.01
                      internal	 3.01
                    </data>
                    <data bit_width="64">
                      path	 ac_mode	 w_mode_bus	 3.74
                      path	 ac_mode	 data_out	 4.05
                      path	 addr	 w_mode_bus	 5.79
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 8.20
                      inport	 ac_mode	 7.34
                      inport	 addr	 7.60
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 5.01
                      internal	 5.39
                    </data>
                    <data bit_width="128">
                      path	 ac_mode	 w_mode_bus	 6.55
                      path	 ac_mode	 data_out	 7.17
                      path	 addr	 w_mode_bus	 6.80
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 10.03
                      inport	 ac_mode	 11.09
                      inport	 addr	 9.44
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 7.24
                      internal	 8.58
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,16">
                <max>
                  <data bit_width="8">
                    path	 addr	 addr_bus	 0.00
                    
                    
                    
                    
                    inport	 data_in	 0
                    
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="16">
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.08
                    
                    
                    inport	 data_in	 0
                    inport	 data_in	 0
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="64">
                    path	 ac_mode	 w_mode_bus	 2.50
                    path	 ac_mode	 data_out	 3.38
                    path	 addr	 w_mode_bus	 3.15
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 5.43
                    inport	 ac_mode	 5.20
                    inport	 addr	 4.49
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 4.70
                    internal	 4.70
                  </data>
                  <data bit_width="128">
                    path	 ac_mode	 w_mode_bus	 5.01
                    path	 ac_mode	 data_out	 6.20
                    path	 addr	 w_mode_bus	 5.10
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 7.52
                    inport	 ac_mode	 8.81
                    inport	 addr	 7.74
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 5.96
                    internal	 6.09
                  </data>
                </max>
                <min>
                  <data bit_width="8">
                    path	 addr	 addr_bus	 0.00
                    
                    
                    
                    
                    inport	 data_in	 0.00
                    
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="16">
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.08
                    
                    
                    inport	 data_in	 0.00
                    inport	 data_in	 0.00
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="64">
                    path	 ac_mode	 w_mode_bus	 2.50
                    path	 ac_mode	 data_out	 3.38
                    path	 addr	 w_mode_bus	 3.15
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 5.43
                    inport	 ac_mode	 5.20
                    inport	 addr	 4.49
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 4.70
                    internal	 4.70
                  </data>
                  <data bit_width="128">
                    path	 ac_mode	 w_mode_bus	 5.01
                    path	 ac_mode	 data_out	 6.20
                    path	 addr	 w_mode_bus	 5.10
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 7.52
                    inport	 ac_mode	 8.81
                    inport	 addr	 7.74
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 5.96
                    internal	 6.09
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.00
                      
                      
                      
                      
                      inport	 data_in	 0.00
                      
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 1.19
                      
                      
                      inport	 data_in	 0.00
                      inport	 data_in	 0.00
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="64">
                      path	 ac_mode	 w_mode_bus	 1.58
                      path	 ac_mode	 data_out	 2.95
                      path	 addr	 w_mode_bus	 3.11
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 4.26
                      inport	 ac_mode	 4.90
                      inport	 addr	 4.42
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 3.65
                      internal	 3.91
                    </data>
                    <data bit_width="128">
                      path	 ac_mode	 w_mode_bus	 4.82
                      path	 ac_mode	 data_out	 5.75
                      path	 addr	 w_mode_bus	 5.20
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 7.49
                      inport	 ac_mode	 8.30
                      inport	 addr	 7.64
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 5.81
                      internal	 5.81
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.10
                      
                      
                      
                      
                      inport	 data_in	 0.10
                      
                      
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.11
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 1.11
                      
                      
                      inport	 data_in	 0.10
                      inport	 data_in	 0.10
                      
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.11
                    </data>
                    <data bit_width="64">
                      path	 ac_mode	 w_mode_bus	 1.27
                      path	 ac_mode	 data_out	 1.78
                      path	 addr	 w_mode_bus	 1.34
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 2.73
                      inport	 ac_mode	 2.67
                      inport	 addr	 2.47
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 2.91
                      internal	 2.82
                    </data>
                    <data bit_width="128">
                      path	 ac_mode	 w_mode_bus	 2.50
                      path	 ac_mode	 data_out	 2.63
                      path	 addr	 w_mode_bus	 2.25
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 4.05
                      inport	 ac_mode	 3.96
                      inport	 addr	 3.74
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 4.07
                      internal	 4.03
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.00
                      
                      
                      
                      
                      inport	 data_in	 0.00
                      
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 2.08
                      
                      
                      inport	 data_in	 0.00
                      inport	 data_in	 0.00
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="64">
                      path	 ac_mode	 w_mode_bus	 2.50
                      path	 ac_mode	 data_out	 3.38
                      path	 addr	 w_mode_bus	 3.15
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 5.43
                      inport	 ac_mode	 5.20
                      inport	 addr	 4.49
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 4.70
                      internal	 4.70
                    </data>
                    <data bit_width="128">
                      path	 ac_mode	 w_mode_bus	 5.01
                      path	 ac_mode	 data_out	 6.20
                      path	 addr	 w_mode_bus	 5.10
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 7.52
                      inport	 ac_mode	 8.81
                      inport	 addr	 7.74
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 5.96
                      internal	 6.09
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,32">
                <max>
                  <data bit_width="8">
                    path	 addr	 addr_bus	 0.00
                    
                    
                    
                    
                    inport	 data_in	 0
                    
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="16">
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.08
                    
                    
                    inport	 data_in	 0
                    inport	 data_in	 0
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="64">
                    path	 addr	 w_mode_bus	 1.18
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.38
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 5.43
                    inport	 addr	 3.60
                    inport	 data_in	 0
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 3.33
                    internal	 3.33
                  </data>
                  <data bit_width="128">
                    path	 ac_mode	 w_mode_bus	 2.59
                    path	 ac_mode	 data_out	 4.66
                    path	 addr	 w_mode_bus	 4.68
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 6.45
                    inport	 ac_mode	 6.93
                    inport	 addr	 8.95
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 5.05
                    internal	 5.05
                  </data>
                </max>
                <min>
                  <data bit_width="8">
                    path	 addr	 addr_bus	 0.00
                    
                    
                    
                    
                    inport	 data_in	 0.00
                    
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="16">
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.08
                    
                    
                    inport	 data_in	 0.00
                    inport	 data_in	 0.00
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="64">
                    path	 addr	 w_mode_bus	 1.18
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.38
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 5.43
                    inport	 addr	 3.60
                    inport	 data_in	 0.00
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 3.33
                    internal	 3.33
                  </data>
                  <data bit_width="128">
                    path	 ac_mode	 w_mode_bus	 2.59
                    path	 ac_mode	 data_out	 4.66
                    path	 addr	 w_mode_bus	 4.68
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 6.45
                    inport	 ac_mode	 6.93
                    inport	 addr	 8.95
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 5.05
                    internal	 5.05
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.00
                      
                      
                      
                      
                      inport	 data_in	 0.00
                      
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 1.19
                      
                      
                      inport	 data_in	 0.00
                      inport	 data_in	 0.00
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="64">
                      path	 addr	 w_mode_bus	 0.66
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 1.93
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 4.26
                      inport	 addr	 4.23
                      inport	 data_in	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 2.39
                      internal	 2.39
                    </data>
                    <data bit_width="128">
                      path	 ac_mode	 w_mode_bus	 2.21
                      path	 ac_mode	 data_out	 5.76
                      path	 addr	 w_mode_bus	 3.79
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 5.20
                      inport	 ac_mode	 7.41
                      inport	 addr	 7.05
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 3.88
                      internal	 3.88
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.10
                      
                      
                      
                      
                      inport	 data_in	 0.10
                      
                      
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.11
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 1.11
                      
                      
                      inport	 data_in	 0.10
                      inport	 data_in	 0.10
                      
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.11
                    </data>
                    <data bit_width="64">
                      path	 addr	 w_mode_bus	 0.41
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 1.09
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 2.73
                      inport	 addr	 1.51
                      inport	 data_in	 0.10
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 2.00
                      internal	 2.00
                    </data>
                    <data bit_width="128">
                      path	 ac_mode	 w_mode_bus	 2.19
                      path	 ac_mode	 data_out	 1.70
                      path	 addr	 w_mode_bus	 1.74
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 2.83
                      inport	 ac_mode	 2.83
                      inport	 addr	 2.49
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 2.98
                      internal	 2.89
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.00
                      
                      
                      
                      
                      inport	 data_in	 0.00
                      
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 2.08
                      
                      
                      inport	 data_in	 0.00
                      inport	 data_in	 0.00
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="64">
                      path	 addr	 w_mode_bus	 1.18
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 2.38
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 5.43
                      inport	 addr	 3.60
                      inport	 data_in	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 3.33
                      internal	 3.33
                    </data>
                    <data bit_width="128">
                      path	 ac_mode	 w_mode_bus	 2.59
                      path	 ac_mode	 data_out	 4.66
                      path	 addr	 w_mode_bus	 4.68
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 6.45
                      inport	 ac_mode	 6.93
                      inport	 addr	 8.95
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 5.05
                      internal	 5.05
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,64">
                <max>
                  <data bit_width="8">
                    path	 addr	 addr_bus	 0.00
                    
                    
                    inport	 data_in	 0
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="16">
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.08
                    inport	 data_in	 0
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="64">
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.38
                    inport	 data_in	 0
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 0.72
                    internal	 1.11
                  </data>
                  <data bit_width="128">
                    path	 addr	 w_mode_bus	 1.10
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.53
                    inport	 addr	 4.13
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 3.48
                    internal	 3.48
                  </data>
                </max>
                <min>
                  <data bit_width="8">
                    path	 addr	 addr_bus	 0.00
                    
                    
                    inport	 data_in	 0.00
                    
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="16">
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.08
                    inport	 data_in	 0.00
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="64">
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.38
                    inport	 data_in	 0.00
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 0.72
                    internal	 1.11
                  </data>
                  <data bit_width="128">
                    path	 addr	 w_mode_bus	 1.10
                    path	 addr	 addr_bus	 0.00
                    path	 addr	 data_out	 2.53
                    inport	 addr	 4.13
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 3.48
                    internal	 3.48
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.00
                      
                      
                      inport	 data_in	 0.00
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 1.19
                      inport	 data_in	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="64">
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 1.93
                      inport	 data_in	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.72
                      internal	 1.12
                    </data>
                    <data bit_width="128">
                      path	 addr	 w_mode_bus	 1.53
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 2.72
                      inport	 addr	 5.22
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 2.89
                      internal	 2.89
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.10
                      
                      
                      inport	 data_in	 0.10
                      
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.11
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 1.11
                      inport	 data_in	 0.10
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.11
                    </data>
                    <data bit_width="64">
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 1.09
                      inport	 data_in	 0.10
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.12
                    </data>
                    <data bit_width="128">
                      path	 addr	 w_mode_bus	 0.56
                      path	 addr	 addr_bus	 0.10
                      path	 addr	 data_out	 1.47
                      inport	 addr	 1.80
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 2.02
                      internal	 2.02
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.00
                      
                      
                      inport	 data_in	 0.00
                      
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 2.08
                      inport	 data_in	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="64">
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 2.38
                      inport	 data_in	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.72
                      internal	 1.11
                    </data>
                    <data bit_width="128">
                      path	 addr	 w_mode_bus	 1.10
                      path	 addr	 addr_bus	 0.00
                      path	 addr	 data_out	 2.53
                      inport	 addr	 4.13
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 3.48
                      internal	 3.48
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,128">
                <max>
                  <data bit_width="8">
                    path	 addr	 addr_bus	 0.00
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="16">
                    path	 addr	 addr_bus	 0.00
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="64">
                    path	 addr	 addr_bus	 0.00
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 0.72
                    internal	 1.11
                  </data>
                  <data bit_width="128">
                    path	 addr	 addr_bus	 0.00
                    inport	 data_in	 0
                    outport	 REG_DATA_OUT	 0.72
                    internal	 1.11
                  </data>
                </max>
                <min>
                  <data bit_width="8">
                    path	 addr	 addr_bus	 0.00
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="16">
                    path	 addr	 addr_bus	 0.00
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 0.71
                    internal	 1.10
                  </data>
                  <data bit_width="64">
                    path	 addr	 addr_bus	 0.00
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 0.72
                    internal	 1.11
                  </data>
                  <data bit_width="128">
                    path	 addr	 addr_bus	 0.00
                    inport	 data_in	 0.00
                    outport	 REG_DATA_OUT	 0.72
                    internal	 1.11
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="64">
                      path	 addr	 addr_bus	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.72
                      internal	 1.12
                    </data>
                    <data bit_width="128">
                      path	 addr	 addr_bus	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.72
                      internal	 1.12
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.10
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.11
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.10
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.11
                    </data>
                    <data bit_width="64">
                      path	 addr	 addr_bus	 0.10
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.12
                    </data>
                    <data bit_width="128">
                      path	 addr	 addr_bus	 0.10
                      inport	 data_in	 0.10
                      outport	 REG_DATA_OUT	 0.77
                      internal	 1.12
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8">
                      path	 addr	 addr_bus	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="16">
                      path	 addr	 addr_bus	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.71
                      internal	 1.10
                    </data>
                    <data bit_width="64">
                      path	 addr	 addr_bus	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.72
                      internal	 1.11
                    </data>
                    <data bit_width="128">
                      path	 addr	 addr_bus	 0.00
                      inport	 data_in	 0.00
                      outport	 REG_DATA_OUT	 0.72
                      internal	 1.11
                    </data>
                  </priority>
                </typ>
              </parameters>

            </est_index>
          </est_type>

          <est_type name="power">
            <est_index name="static_power">
              <unit> mW </unit>
              <parameters name="16,8">
                <max>
                  <data bit_width="8"> 9.7059 </data>
                  <data bit_width="16"> 38.2709 </data>
                  <data bit_width="32"> 131.8512 </data>
                  <data bit_width="64"> 379.1205 </data>
                  <data bit_width="128"> 925.8934 </data>
                </max>
                <min>
                  <data bit_width="8"> 7.6890 </data>
                  <data bit_width="16"> 26.8109 </data>
                  <data bit_width="32"> 88.7195 </data>
                  <data bit_width="64"> 242.9874 </data>
                  <data bit_width="128"> 675.2848 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 8.6937 </data>
                    <data bit_width="16"> 30.9092 </data>
                    <data bit_width="32"> 112.0353 </data>
                    <data bit_width="64"> 291.2534 </data>
                    <data bit_width="128"> 776.5723 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 9.7059 </data>
                    <data bit_width="16"> 38.2709 </data>
                    <data bit_width="32"> 131.8512 </data>
                    <data bit_width="64"> 379.1205 </data>
                    <data bit_width="128"> 925.8934 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 7.6890 </data>
                    <data bit_width="16"> 26.8109 </data>
                    <data bit_width="32"> 88.7195 </data>
                    <data bit_width="64"> 242.9874 </data>
                    <data bit_width="128"> 675.2848 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,16">
                <max>
                  <data bit_width="16"> 16.3745 </data>
                  <data bit_width="32"> 70.9144 </data>
                  <data bit_width="64"> 267.0685 </data>
                  <data bit_width="128"> 717.6888 </data>
                </max>
                <min>
                  <data bit_width="16"> 14.1729 </data>
                  <data bit_width="32"> 53.7902 </data>
                  <data bit_width="64"> 181.4695 </data>
                  <data bit_width="128"> 535.0379 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 16.2562 </data>
                    <data bit_width="32"> 58.5368 </data>
                    <data bit_width="64"> 226.9377 </data>
                    <data bit_width="128"> 619.7018 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 16.3745 </data>
                    <data bit_width="32"> 70.9144 </data>
                    <data bit_width="64"> 267.0685 </data>
                    <data bit_width="128"> 717.6888 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 14.1729 </data>
                    <data bit_width="32"> 53.7902 </data>
                    <data bit_width="64"> 181.4695 </data>
                    <data bit_width="128"> 535.0379 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,32">
                <max>
                  <data bit_width="32"> 30.8916 </data>
                  <data bit_width="64"> 138.8173 </data>
                  <data bit_width="128"> 518.9013 </data>
                </max>
                <min>
                  <data bit_width="32"> 27.5147 </data>
                  <data bit_width="64"> 104.2332 </data>
                  <data bit_width="128"> 386.3272 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="32"> 30.7092 </data>
                    <data bit_width="64"> 117.6191 </data>
                    <data bit_width="128"> 477.1381 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="32"> 30.8916 </data>
                    <data bit_width="64"> 138.8173 </data>
                    <data bit_width="128"> 518.9013 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="32"> 27.5147 </data>
                    <data bit_width="64"> 104.2332 </data>
                    <data bit_width="128"> 386.3272 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,64">
                <max>
                  <data bit_width="64"> 61.7459 </data>
                  <data bit_width="128"> 266.2877 </data>
                </max>
                <min>
                  <data bit_width="64"> 56.7440 </data>
                  <data bit_width="128"> 225.7758 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="64"> 61.7459 </data>
                    <data bit_width="128"> 242.8607 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="64"> 59.7873 </data>
                    <data bit_width="128"> 266.2877 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="64"> 56.7440 </data>
                    <data bit_width="128"> 225.7758 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="16,128">
                <max>
                  <data bit_width="128"> 124.6186 </data>
                </max>
                <min>
                  <data bit_width="128"> 115.9140 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="128"> 121.9134 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="128"> 124.6186 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="128"> 115.9140 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,8">
                <max>
                  <data bit_width="8"> 10.0460 </data>
                  <data bit_width="16"> 38.6110 </data>
                  <data bit_width="32"> 132.3105 </data>
                  <data bit_width="64"> 381.6944 </data>
                  <data bit_width="128"> 924.7305 </data>
                </max>
                <min>
                  <data bit_width="8"> 8.0291 </data>
                  <data bit_width="16"> 27.1511 </data>
                  <data bit_width="32"> 89.1315 </data>
                  <data bit_width="64"> 243.4437 </data>
                  <data bit_width="128"> 675.6988 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 9.0338 </data>
                    <data bit_width="16"> 31.2493 </data>
                    <data bit_width="32"> 112.4472 </data>
                    <data bit_width="64"> 291.7097 </data>
                    <data bit_width="128"> 777.0349 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 10.0460 </data>
                    <data bit_width="16"> 38.6110 </data>
                    <data bit_width="32"> 132.3105 </data>
                    <data bit_width="64"> 381.6944 </data>
                    <data bit_width="128"> 924.7305 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 8.0291 </data>
                    <data bit_width="16"> 27.1511 </data>
                    <data bit_width="32"> 89.1315 </data>
                    <data bit_width="64"> 243.4437 </data>
                    <data bit_width="128"> 675.6988 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,16">
                <max>
                  <data bit_width="16"> 16.7146 </data>
                  <data bit_width="32"> 71.3264 </data>
                  <data bit_width="64"> 268.2347 </data>
                  <data bit_width="128"> 717.9545 </data>
                </max>
                <min>
                  <data bit_width="16"> 14.5124 </data>
                  <data bit_width="32"> 54.2184 </data>
                  <data bit_width="64"> 181.9258 </data>
                  <data bit_width="128"> 535.5337 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 16.5963 </data>
                    <data bit_width="32"> 58.8154 </data>
                    <data bit_width="64"> 227.5727 </data>
                    <data bit_width="128"> 620.2240 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 16.7146 </data>
                    <data bit_width="32"> 71.3264 </data>
                    <data bit_width="64"> 268.2347 </data>
                    <data bit_width="128"> 717.9545 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 14.5124 </data>
                    <data bit_width="32"> 54.2184 </data>
                    <data bit_width="64"> 181.9258 </data>
                    <data bit_width="128"> 535.5337 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,32">
                <max>
                  <data bit_width="32"> 31.2317 </data>
                  <data bit_width="64"> 139.2380 </data>
                  <data bit_width="128"> 519.9050 </data>
                </max>
                <min>
                  <data bit_width="32"> 27.8549 </data>
                  <data bit_width="64"> 104.7993 </data>
                  <data bit_width="128"> 386.8490 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="32"> 31.0500 </data>
                    <data bit_width="64"> 118.0957 </data>
                    <data bit_width="128"> 477.6496 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="32"> 31.2317 </data>
                    <data bit_width="64"> 139.2380 </data>
                    <data bit_width="128"> 519.9050 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="32"> 27.8549 </data>
                    <data bit_width="64"> 104.7993 </data>
                    <data bit_width="128"> 386.8490 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,64">
                <max>
                  <data bit_width="64"> 62.1187 </data>
                  <data bit_width="128"> 266.4648 </data>
                </max>
                <min>
                  <data bit_width="64"> 57.1560 </data>
                  <data bit_width="128"> 226.0893 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="64"> 62.1187 </data>
                    <data bit_width="128"> 243.3289 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="64"> 60.1993 </data>
                    <data bit_width="128"> 266.4648 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="64"> 57.1560 </data>
                    <data bit_width="128"> 226.0893 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="32,128">
                <max>
                  <data bit_width="128"> 125.0750 </data>
                </max>
                <min>
                  <data bit_width="128"> 116.3703 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="128"> 122.3272 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="128"> 125.0750 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="128"> 116.3703 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,8">
                <max>
                  <data bit_width="8"> 10.7263 </data>
                  <data bit_width="16"> 39.2913 </data>
                  <data bit_width="32"> 133.1610 </data>
                  <data bit_width="64"> 382.3527 </data>
                  <data bit_width="128"> 927.2910 </data>
                </max>
                <min>
                  <data bit_width="8"> 8.7094 </data>
                  <data bit_width="16"> 27.8313 </data>
                  <data bit_width="32"> 89.9552 </data>
                  <data bit_width="64"> 244.3810 </data>
                  <data bit_width="128"> 676.8214 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 9.7141 </data>
                    <data bit_width="16"> 31.9295 </data>
                    <data bit_width="32"> 113.2712 </data>
                    <data bit_width="64"> 292.6223 </data>
                    <data bit_width="128"> 778.0301 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 10.7263 </data>
                    <data bit_width="16"> 39.2913 </data>
                    <data bit_width="32"> 133.1610 </data>
                    <data bit_width="64"> 382.3527 </data>
                    <data bit_width="128"> 927.2910 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 8.7094 </data>
                    <data bit_width="16"> 27.8313 </data>
                    <data bit_width="32"> 89.9552 </data>
                    <data bit_width="64"> 244.3810 </data>
                    <data bit_width="128"> 676.8214 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,16">
                <max>
                  <data bit_width="16"> 17.3949 </data>
                  <data bit_width="32"> 72.2338 </data>
                  <data bit_width="64"> 269.2593 </data>
                  <data bit_width="128"> 719.2770 </data>
                </max>
                <min>
                  <data bit_width="16"> 15.1931 </data>
                  <data bit_width="32"> 55.0423 </data>
                  <data bit_width="64"> 182.8384 </data>
                  <data bit_width="128"> 536.5009 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 17.2766 </data>
                    <data bit_width="32"> 59.4957 </data>
                    <data bit_width="64"> 228.5377 </data>
                    <data bit_width="128"> 621.2673 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 17.3949 </data>
                    <data bit_width="32"> 72.2338 </data>
                    <data bit_width="64"> 269.2593 </data>
                    <data bit_width="128"> 719.2770 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 15.1931 </data>
                    <data bit_width="32"> 55.0423 </data>
                    <data bit_width="64"> 182.8384 </data>
                    <data bit_width="128"> 536.5009 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,32">
                <max>
                  <data bit_width="32"> 31.9120 </data>
                  <data bit_width="64"> 139.9771 </data>
                  <data bit_width="128"> 519.0173 </data>
                </max>
                <min>
                  <data bit_width="32"> 28.5352 </data>
                  <data bit_width="64"> 105.6233 </data>
                  <data bit_width="128"> 387.7830 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="32"> 31.7272 </data>
                    <data bit_width="64"> 118.9810 </data>
                    <data bit_width="128"> 478.6823 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="32"> 31.9120 </data>
                    <data bit_width="64"> 139.9771 </data>
                    <data bit_width="128"> 519.0173 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="32"> 28.5352 </data>
                    <data bit_width="64"> 105.6233 </data>
                    <data bit_width="128"> 387.7830 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,64">
                <max>
                  <data bit_width="64"> 62.9403 </data>
                  <data bit_width="128"> 267.3982 </data>
                </max>
                <min>
                  <data bit_width="64"> 57.9799 </data>
                  <data bit_width="128"> 227.1391 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="64"> 62.9403 </data>
                    <data bit_width="128"> 244.1557 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="64"> 61.0232 </data>
                    <data bit_width="128"> 267.3982 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="64"> 57.9799 </data>
                    <data bit_width="128"> 227.1391 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="64,128">
                <max>
                  <data bit_width="128"> 125.9875 </data>
                </max>
                <min>
                  <data bit_width="128"> 117.2814 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="128"> 123.1586 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="128"> 125.9875 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="128"> 117.2814 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,8">
                <max>
                  <data bit_width="8"> 12.0869 </data>
                  <data bit_width="16"> 40.6251 </data>
                  <data bit_width="32"> 134.2491 </data>
                  <data bit_width="64"> 383.1406 </data>
                  <data bit_width="128"> 931.3599 </data>
                </max>
                <min>
                  <data bit_width="8"> 10.0539 </data>
                  <data bit_width="16"> 29.2300 </data>
                  <data bit_width="32"> 91.6415 </data>
                  <data bit_width="64"> 246.1905 </data>
                  <data bit_width="128"> 679.0334 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="8"> 11.0746 </data>
                    <data bit_width="16"> 33.3492 </data>
                    <data bit_width="32"> 114.9701 </data>
                    <data bit_width="64"> 294.4477 </data>
                    <data bit_width="128"> 780.2841 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="8"> 12.0869 </data>
                    <data bit_width="16"> 40.6251 </data>
                    <data bit_width="32"> 134.2491 </data>
                    <data bit_width="64"> 383.1406 </data>
                    <data bit_width="128"> 931.3599 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="8"> 10.0539 </data>
                    <data bit_width="16"> 29.2300 </data>
                    <data bit_width="32"> 91.6415 </data>
                    <data bit_width="64"> 246.1905 </data>
                    <data bit_width="128"> 679.0334 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,16">
                <max>
                  <data bit_width="16"> 18.7554 </data>
                  <data bit_width="32"> 73.6428 </data>
                  <data bit_width="64"> 270.5666 </data>
                  <data bit_width="128"> 722.0201 </data>
                </max>
                <min>
                  <data bit_width="16"> 16.5530 </data>
                  <data bit_width="32"> 56.6383 </data>
                  <data bit_width="64"> 184.5386 </data>
                  <data bit_width="128"> 537.8710 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="16"> 18.6371 </data>
                    <data bit_width="32"> 60.8442 </data>
                    <data bit_width="64"> 230.1477 </data>
                    <data bit_width="128"> 623.3547 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="16"> 18.7554 </data>
                    <data bit_width="32"> 73.6428 </data>
                    <data bit_width="64"> 270.5666 </data>
                    <data bit_width="128"> 722.0201 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="16"> 16.5530 </data>
                    <data bit_width="32"> 56.6383 </data>
                    <data bit_width="64"> 184.5386 </data>
                    <data bit_width="128"> 537.8710 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,32">
                <max>
                  <data bit_width="32"> 33.2727 </data>
                  <data bit_width="64"> 141.4080 </data>
                  <data bit_width="128"> 523.0338 </data>
                </max>
                <min>
                  <data bit_width="32"> 29.8959 </data>
                  <data bit_width="64"> 107.4075 </data>
                  <data bit_width="128"> 389.7528 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="32"> 33.0892 </data>
                    <data bit_width="64"> 120.7265 </data>
                    <data bit_width="128"> 481.9712 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="32"> 33.2727 </data>
                    <data bit_width="64"> 141.4080 </data>
                    <data bit_width="128"> 523.0338 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="32"> 29.8959 </data>
                    <data bit_width="64"> 107.4075 </data>
                    <data bit_width="128"> 389.7528 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,64">
                <max>
                  <data bit_width="64"> 64.6288 </data>
                  <data bit_width="128"> 268.9437 </data>
                </max>
                <min>
                  <data bit_width="64"> 59.6278 </data>
                  <data bit_width="128"> 229.1398 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="64"> 64.6288 </data>
                    <data bit_width="128"> 246.1786 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="64"> 62.6612 </data>
                    <data bit_width="128"> 268.9437 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="64"> 59.6278 </data>
                    <data bit_width="128"> 229.1398 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="128,128">
                <max>
                  <data bit_width="128"> 127.8129 </data>
                </max>
                <min>
                  <data bit_width="128"> 119.1067 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="128"> 124.7137 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="128"> 127.8129 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="128"> 119.1067 </data>
                  </priority>
                </typ>
              </parameters>
            </est_index>
          </est_type>

          <est_type name="function_cycle">
            <unit> cycle </unit>

            <est_index name="cycle">
              <parameters name="16,8">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="16,16">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="16,32">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="16,64">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="16,128">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="32,8">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="32,16">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="32,32">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="32,64">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="32,128">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="64,8">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="64,16">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="64,32">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="64,64">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="64,128">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="128,8">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="128,16">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="128,32">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="128,64">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="128,128">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
            </est_index>

            <est_index name="latency">
              <parameters name="16,8">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="16,16">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="16,32">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="16,64">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="16,128">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="32,8">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="32,16">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="32,32">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="32,64">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="32,128">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="64,8">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="64,16">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="64,32">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="64,64">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="64,128">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="128,8">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="128,16">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="128,32">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="128,64">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="128,128">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
            </est_index>

            <est_index name="throughput">
              <parameters name="16,8">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="16,16">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="16,32">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="16,64">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="16,128">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="32,8">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="32,16">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="32,32">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="32,64">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="32,128">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="64,8">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="64,16">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="64,32">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="64,64">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="64,128">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="128,8">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="128,16">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="128,32">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="128,64">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
              <parameters name="128,128">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="nop">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="load">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="store">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_8">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lhu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="lbu">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sh">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="sb">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_16">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_24">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_32">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_56">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_48">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_40">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ld_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="ldu_64">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_128">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_120">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_112">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_104">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_96">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_88">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_80">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="s_72">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
            </est_index>

          </est_type>

          <est_type name="function_power">
            <!-- Dummy yet -->
          </est_type>
        </library>
      </estimation_data>

      <estimation_method>
         
        <est_type name="shape">

          <est_index name="area">

            <parameters name="16,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(16,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(16,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(16,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(16,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(16,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(32,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(32,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(32,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(32,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(32,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(64,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(64,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(64,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(64,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(64,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(128,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(128,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(128,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(128,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for dmau_2(128,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

          </est_index>

           <est_index name="aspect_ratio">

             <!-- Dummy yet -->

           </est_index>
		
           <est_index name="height">

             <!-- Dummy yet -->

           </est_index>
		
           <est_index name="width">

             <!-- Dummy yet -->

           </est_index>
		
        </est_type>

        <est_type name="timing">

          <est_index name="delay">

            <parameters name="16,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(16,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(16,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(16,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(16,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(16,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(32,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(32,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(32,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(32,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(32,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(64,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(64,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(64,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(64,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(64,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(128,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(128,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(128,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(128,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for dmau_2(128,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

          </est_index>

          <est_index name="delay_fullpath">

            <parameters name="16,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(16,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="16,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(16,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="16,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(16,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="16,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(16,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="16,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(16,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="32,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(32,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="32,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(32,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="32,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(32,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="32,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(32,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="32,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(32,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="64,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(64,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="64,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(64,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="64,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(64,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="64,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(64,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="64,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(64,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="128,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(128,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="128,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(128,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="128,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(128,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="128,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(128,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="128,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for dmau_2(128,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

          </est_index>

        </est_type>

        <est_type name="power">

          <est_index name="static_power">

            <parameters name="16,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(16,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(16,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(16,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(16,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="16,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(16,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(32,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(32,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(32,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(32,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="32,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(32,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(64,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(64,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(64,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(64,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="64,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(64,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(128,8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,16">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(128,16) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,32">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(128,32) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,64">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(128,64) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="128,128">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for dmau_2(128,128) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

          </est_index>

        </est_type>

        <est_type name="function_cycle">
          <est_index name="cycle">
            <parameters name="16,8">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="16,16">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="16,32">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="16,64">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="16,128">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,8">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,16">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,32">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,64">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,128">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="64,8">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="64,16">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="64,32">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="64,64">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="64,128">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="128,8">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="128,16">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="128,32">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="128,64">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="128,128">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>
          </est_index>

          <est_index name="latency">
            <parameters name="16,8">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="16,16">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="16,32">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="16,64">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="16,128">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,8">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,16">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,32">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,64">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,128">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="64,8">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="64,16">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="64,32">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="64,64">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="64,128">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="128,8">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="128,16">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="128,32">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="128,64">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="128,128">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>
          </est_index>

          <est_index name="throughput">
            <parameters name="16,8">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="16,16">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="16,32">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="16,64">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="16,128">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,8">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,16">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,32">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,64">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="32,128">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="64,8">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="64,16">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="64,32">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="64,64">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="64,128">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="128,8">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="128,16">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="128,32">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="128,64">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="128,128">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;

if ($tmp == 0){
   print "0";
}
else{
   print "1";
}
exit(0);
                ]]>
              </script>
            </parameters>
          </est_index>

        </est_type>

        <est_type name="function_power">

        </est_type>

    
      </estimation_method>

    </estimation>

  </model>
</FHM>
