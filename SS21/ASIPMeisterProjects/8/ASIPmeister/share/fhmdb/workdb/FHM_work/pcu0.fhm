<?xml version="1.0" encoding="UTF-8" ?>
<FHM>
  <model_name> pcu </model_name>

  <model>
    <design_level> behavior </design_level>
    <version> 1.0 </version>
    <author> <![CDATA[ Kyoko UEDA ]]> </author>
    <affiliation> <![CDATA[ Osaka Univ. ]]> </affiliation>
    <model_info> <![CDATA[
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                %
%                 Copyright 2002 PEAS Project                    %
%                                                                %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
]]> </model_info>
    
    <parameter>
      <parameter_value key="bit_width">
        <value> 4 </value>
        <value> 8 </value>
        <value> 16 </value>
        <value> 32 </value>
        <value> 64 </value>
        <value> 128 </value>
      </parameter_value>
      <parameter_value key="increment_step">
        <value> 1 </value>
        <value> 2 </value>
        <value> 4 </value>
        <value> 8 </value>
      </parameter_value>
    </parameter>

    <function_description>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates function definition for pcu in behavior level
# parameter : bit_width increment_step

if ($#ARGV != 1){
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width increment_step\n";
    exit (100);
}

$bit_width     = $ARGV[0];
$inc_step      = $ARGV[1];

@bit_widths = (4, 8, 16, 32, 64, 128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

@inc_steps = (1, 2, 4, 8, 16, 32, 64, 128);
if (! grep($_ eq $inc_step, @inc_steps)){
    print "increment_step $inc_step is not supported.\n";
    exit (100);
}

$w_1 = $bit_width - 1;
{
    print <<FHM_DL_FUNCTION
/** no operation */
function nop{
  input{
  }

  output{
  }

  control{
    in bit load;
    in bit reset;
    in bit hold;
  }

  protocol{
    single_cycle_protocol{
      load  = '0';
      reset = '0';
      hold  = '1';
    }
  }
}

/** reset */
function reset{
  input{
  }

  output{
  }

  control{
    in bit reset;
  }

  protocol{
    single_cycle_protocol{
      reset = '1';
    }
  }
}

/** increment */
function inc{
  input{
  }

  output{
  }

  control{
    in bit hold;
  }

  protocol{
    single_cycle_protocol{
      hold = '0';
    }
  }
}

/** write : set program counter value */
function write{
  input{
    bit [$w_1:0] data_in;
  }

  output{
  }

  control{
    in bit load;
  }

  protocol{
    single_cycle_protocol{
      load = '1';
    }
  }
}

/** read : read program counter value */
function read{
  input{
  }

  output{
    bit [$w_1:0] data_out;
  }

  control{
  }

  protocol{
  }
}
FHM_DL_FUNCTION
}
exit (0);
        ]]>
      </script>
    </function_description>

    <function_conv>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates function definition for pcu in behavior level
# parameter : bit_width increment_step

if ($#ARGV != 1){
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width increment_step\n";
    exit (100);
}

$bit_width     = $ARGV[0];
$inc_step      = $ARGV[1];

@bit_widths = (4, 8, 16, 32, 64, 128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

@inc_steps = (1, 2, 4, 8, 16, 32, 64, 128);
if (! grep($_ eq $inc_step, @inc_steps)){
    print "increment_step $inc_step is not supported.\n";
    exit (100);
}

$w_1 = $bit_width - 1;
{
    print <<FHM_DL_FUNCTION
/** no operation */
function nop{
  input{
  }

  output{
  }

  control{
    in bit load;
    in bit reset;
    in bit hold;
  }

  protocol{
    single_cycle_protocol{
      load  = '0';
      reset = '0';
      hold  = '1';
    }
  }
}

/** reset */
function reset{
  input{
  }

  output{
  }

  control{
    in bit reset;
  }

  protocol{
    single_cycle_protocol{
      reset = '1';
    }
  }
}

/** increment */
function inc{
  input{
  }

  output{
  }

  control{
    in bit hold;
  }

  protocol{
    single_cycle_protocol{
      hold = '0';
    }
  }
}

/** write : set program counter value */
function write{
  input{
    bit [$w_1:0] data_in;
  }

  output{
  }

  control{
    in bit load;
  }

  protocol{
    single_cycle_protocol{
      load = '1';
    }
  }
}

/** read : read program counter value */
function read{
  input{
  }

  output{
    bit [$w_1:0] data_out;
  }

  control{
  }

  protocol{
  }
}
FHM_DL_FUNCTION
}
exit (0);
        ]]>
      </script>
    </function_conv>

    <function_port>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates port information for pcu in behavior level
# parameter : bit_width increment_step

if ($#ARGV != 1){
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name bit_width increment_step\n";
    exit (100);
}

$bit_width     = $ARGV[0];
$inc_step      = $ARGV[1];

@bit_widths = (4, 8, 16, 32, 64, 128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

@inc_steps = (1, 2, 4, 8, 16, 32, 64, 128);
if (! grep($_ eq $inc_step, @inc_steps)){
    print "increment_step $inc_step is not supported.\n";
    exit (100);
}

$w_1 = $bit_width - 1;
{
    print <<FHM_DL_PORT
clock	in	bit		clock
load	in	bit		ctrl
reset	in	bit		reset
hold	in	bit		ctrl
data_in	in	bit_vector   $w_1   0	data
data_out	out	bit_vector   $w_1   0	data
FHM_DL_PORT
}
exit (0);
        ]]>
      </script>
    </function_port>

    <design>
      <design_lang> vhdl </design_lang>

      <instance>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates instance for pcu in behavior level
# parameter : instance_name bit_width increment_step

if ($#ARGV != 2){
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name bit_width increment_step\n";
    exit (100);
}

$instance_name = $ARGV[0];
$bit_width     = $ARGV[1];
$inc_step      = $ARGV[2];

@bit_widths = (4, 8, 16, 32, 64, 128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

@inc_steps = (1, 2, 4, 8, 16, 32, 64, 128);
if (! grep($_ eq $inc_step, @inc_steps)){
    print "increment_step $inc_step is not supported.\n";
    exit (100);
}

$w_1 = $bit_width - 1;
$zs = '0' x $bit_width;
{
    print <<FHM_DL_INSTANCE
-- Module	: $bit_width-bit program counter unit
--                $inc_step increment step
-- Refereces	:
-- Author	: Designed by M. Itoh (c)1998
-- Version	: 1.0 :
-- VHDL         : 87

-- Functionality : behavior level
-- port
--  clock    : clock 
--  load     : '1' then set counter value
--  reset    : '1' then reset counter
--  hold     : '1' then hold counter value
--  data_in  : data to register
--  data_out : registered data

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.std_logic_signed.all;

entity $instance_name is
  port (
    clock    : in  std_logic;
    load     : in  std_logic;
    reset    : in  std_logic;
    hold     : in  std_logic;
    data_in  : in  std_logic_vector($w_1 downto 0);
    data_out : out std_logic_vector($w_1 downto 0));
end $instance_name;

architecture behavior of $instance_name is
begin
  
  process(reset, clock)
    variable count : std_logic_vector($w_1 downto 0);
  begin
    if(reset = '1') then
      count := "$zs";
    elsif(clock'event and clock='1') then
      if (load = '1') then
        count := data_in;
      elsif (hold = '0') then 
        count := count + $inc_step;
      end if;
    end if;
    data_out <= count;
  end process;
end behavior;
FHM_DL_INSTANCE
}
exit (0);
          ]]>
        </script>
      </instance>

      <entity>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates entity for pcu in behavior level
# parameter : instance_name bit_width increment_step

if ($#ARGV != 2){
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name bit_width increment_step\n";
    exit (100);
}

$instance_name = $ARGV[0];
$bit_width     = $ARGV[1];
$inc_step      = $ARGV[2];

@bit_widths = (4, 8, 16, 32, 64, 128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

@inc_steps = (1, 2, 4, 8, 16, 32, 64, 128);
if (! grep($_ eq $inc_step, @inc_steps)){
    print "increment_step $inc_step is not supported.\n";
    exit (100);
}

$w_1 = $bit_width - 1;
{
    print <<FHM_DL_ENTITY
entity $instance_name is
  port (
    clock    : in  std_logic;
    load     : in  std_logic;
    reset    : in  std_logic;
    hold     : in  std_logic;
    data_in  : in  std_logic_vector($w_1 downto 0);
    data_out : out std_logic_vector($w_1 downto 0));
end $instance_name;
FHM_DL_ENTITY
}
exit (0);
          ]]>
        </script>
      </entity>

      <testvector>
        <testvector_script>
          <![CDATA[ ]]>
        </testvector_script>
      </testvector>

      <synthesis>
        <parameter></parameter>
        <synthesis_script>
          <script>
            <![CDATA[
#!/usr/bin/perl
# this script generates synthesis script for pcu in behavior level
# parameter : instance_name priority bit_width increment_step

if ($#ARGV != 3){
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name priority bit_width increment_step\n";
    exit (100);
}

$instance_name = $ARGV[0];
$priority      = $ARGV[1];
$bit_width     = $ARGV[2];
$inc_step      = $ARGV[3];

if ($priority eq "area"){
    $priority_const = "set_max_area 0";
}
elsif ($priority eq "performance"){
    $priority_const = "set_max_delay -from all_inputs() -to all_outputs() 0";
}
elsif ($priority eq "power"){
    $priority_const = "";
}
elsif ($priority eq "none"){
    $priority_const = "";
}
else{
    print "priority $priority is not supported.\n";
    exit (100);
}

@bit_widths = (4, 8, 16, 32, 64, 128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

@inc_steps = (1, 2, 4, 8, 16, 32, 64, 128);
if (! grep($_ eq $inc_step, @inc_steps)){
    print "increment_step $inc_step is not supported.\n";
    exit (100);
}

{
print <<FHM_DL_SCRIPT
hdlin_auto_save_templates = TRUE

analyze -f vhdl $instance_name.vhd

elaborate $instance_name
uniquify

$priority_const

create_clock -period 10 -waveform{0 5} clock

compile 

write -hierarchy -output $instance_name.db

report_area
report_timing

quit
FHM_DL_SCRIPT
}
exit (0);
            ]]>
          </script>
        </synthesis_script>
      </synthesis>
    </design>

    <estimation>
      <estimation_data>
        <library name="OSAKA">

          <est_type name="shape">
            <est_index name="area">
              <unit> mm2 </unit>
              <translate>
                <translate_value key="gate"> 4201.68 </translate_value>
                <translate_value key="mm2">  1 </translate_value>
              </translate>

              <parameters name="1,">
                <max>
                  <data bit_width="4"> 0.0264570167171227 </data>
                  <data bit_width="8"> 0.0626743407398945 </data>
                  <data bit_width="16"> 0.148724225071876 </data>
                  <data bit_width="32"> 0.274233306915329 </data>
                  <data bit_width="64"> 0.523131114458978 </data>
                  <data bit_width="128"> 1.11258463495554 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.0176998383979741 </data>
                  <data bit_width="8"> 0.0361308759829402 </data>
                  <data bit_width="16"> 0.0909358720797395 </data>
                  <data bit_width="32"> 0.185179093362655 </data>
                  <data bit_width="64"> 0.399241461272634 </data>
                  <data bit_width="128"> 0.804788703566192 </data>
                </min>
                <typ>
                </typ>
              </parameters>

              <parameters name="2,">
                <max>
                  <data bit_width="4"> 0.0233704608632737 </data>
                  <data bit_width="8"> 0.05958824993812 </data>
                  <data bit_width="16"> 0.149624177233868 </data>
                  <data bit_width="32"> 0.301589743626359 </data>
                  <data bit_width="64"> 0.537905768644923 </data>
                  <data bit_width="128"> 1.12397051964928 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.0162885743321719 </data>
                  <data bit_width="8"> 0.0345155473524876 </data>
                  <data bit_width="16"> 0.0889124069419851 </data>
                  <data bit_width="32"> 0.18265406170865 </data>
                  <data bit_width="64"> 0.396816429142629 </data>
                  <data bit_width="128"> 0.801536423763828 </data>
                </min>
                <typ>
                </typ>
              </parameters>

              <parameters name="4,">
                <max>
                  <data bit_width="4"> 0.0182102349536376 </data>
                  <data bit_width="8"> 0.0513326381352221 </data>
                  <data bit_width="16"> 0.139310701671712 </data>
                  <data bit_width="32"> 0.233134663039546 </data>
                  <data bit_width="64"> 0.525098856409817 </data>
                  <data bit_width="128"> 1.19025492469679 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.0152003767540603 </data>
                  <data bit_width="8"> 0.0330192151710744 </data>
                  <data bit_width="16"> 0.0865147424363588 </data>
                  <data bit_width="32"> 0.180910912063746 </data>
                  <data bit_width="64"> 0.395120010805202 </data>
                  <data bit_width="128"> 0.80082550313208 </data>
                </min>
                <typ>
                </typ>
              </parameters>

              <parameters name="8,">
                <max>
                  <data bit_width="4"> 0.0158804432988709 </data>
                  <data bit_width="8"> 0.0495811101749776 </data>
                  <data bit_width="16"> 0.128963307296129 </data>
                  <data bit_width="32"> 0.33660962472154 </data>
                  <data bit_width="64"> 0.552461655813865 </data>
                  <data bit_width="128"> 1.10547473248796 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.0137040471906476 </data>
                  <data bit_width="8"> 0.0316079527712724 </data>
                  <data bit_width="16"> 0.0698473532015765 </data>
                  <data bit_width="32"> 0.177654680984749 </data>
                  <data bit_width="64"> 0.392483213143314 </data>
                  <data bit_width="128"> 0.792857963719274 </data>
                </min>
                <typ>
                </typ>
              </parameters>
            </est_index>

            <est_index name="aspect_ratio">
              <!-- Dummy yet -->
            </est_index>

            <est_index name="height">
              <!-- Dummy yet -->
            </est_index>

            <est_index name="width">
              <!-- Dummy yet -->
            </est_index>
          </est_type>

          <est_type name="timing">
            <est_index name="delay">
              <unit> ns </unit>

              <parameters name="1,">
                <max>
                  <data bit_width="4"> 0.81 </data>
                  <data bit_width="8"> 0.87 </data>
                  <data bit_width="16"> 0.94 </data>
                  <data bit_width="32"> 0.94 </data>
                  <data bit_width="64"> 0.98 </data>
                  <data bit_width="128"> 1.02 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.72 </data>
                  <data bit_width="8"> 0.72 </data>
                  <data bit_width="16"> 0.78 </data>
                  <data bit_width="32"> 0.72 </data>
                  <data bit_width="64"> 0.77 </data>
                  <data bit_width="128"> 0.40 </data>
                </min>
                <typ>
                </typ>
              </parameters>

              <parameters name="2,">
                <max>
                  <data bit_width="4"> 0.83 </data>
                  <data bit_width="8"> 0.87 </data>
                  <data bit_width="16"> 0.94 </data>
                  <data bit_width="32"> 0.94 </data>
                  <data bit_width="64"> 0.93 </data>
                  <data bit_width="128"> 0.97 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.72 </data>
                  <data bit_width="8"> 0.72 </data>
                  <data bit_width="16"> 0.72 </data>
                  <data bit_width="32"> 0.72 </data>
                  <data bit_width="64"> 0.72 </data>
                  <data bit_width="128"> 0.72 </data>
                </min>
                <typ>
                </typ>
              </parameters>

              <parameters name="4,">
                <max>
                  <data bit_width="4"> 0.83 </data>
                  <data bit_width="8"> 0.86 </data>
                  <data bit_width="16"> 0.94 </data>
                  <data bit_width="32"> 0.94 </data>
                  <data bit_width="64"> 0.95 </data>
                  <data bit_width="128"> 0.99 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.72 </data>
                  <data bit_width="8"> 0.72 </data>
                  <data bit_width="16"> 0.72 </data>
                  <data bit_width="32"> 0.72 </data>
                  <data bit_width="64"> 0.72 </data>
                  <data bit_width="128"> 0.75 </data>
                </min>
                <typ>
                </typ>
              </parameters>

              <parameters name="8,">
                <max>
                  <data bit_width="4"> 0.80 </data>
                  <data bit_width="8"> 0.85 </data>
                  <data bit_width="16"> 0.94 </data>
                  <data bit_width="32"> 0.94 </data>
                  <data bit_width="64"> 0.96 </data>
                  <data bit_width="128"> 0.99 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.72 </data>
                  <data bit_width="8"> 0.72 </data>
                  <data bit_width="16"> 0.79 </data>
                  <data bit_width="32"> 0.72 </data>
                  <data bit_width="64"> 0.72 </data>
                  <data bit_width="128"> 0.72 </data>
                </min>
                <typ>
                </typ>
              </parameters>
            </est_index>

            <est_index name="delay_fullpath">
            <!-- Dummy yet -->
            </est_index>
          </est_type>

          <est_type name="power">
            <est_index name="static_power">
              <unit> mW </unit>
              <parameters name="1,">
                <max>
                  <data bit_width="4"> 6.5419 </data>
                  <data bit_width="8"> 12.0029 </data>
                  <data bit_width="16"> 21.8806 </data>
                  <data bit_width="32"> 42.9463 </data>
                  <data bit_width="64"> 93.4415 </data>
                  <data bit_width="128"> 183.8124 </data>
                </max>
                <min>
                  <data bit_width="4"> 2.6264 </data>
                  <data bit_width="8"> 4.8604 </data>
                  <data bit_width="16"> 14.7441 </data>
                  <data bit_width="32"> 26.4587 </data>
                  <data bit_width="64"> 55.4941 </data>
                  <data bit_width="128"> 115.6972 </data>
                </min>
                <typ>
                </typ>
              </parameters>

              <parameters name="2,">
                <max>
                  <data bit_width="4"> 5.6400 </data>
                  <data bit_width="8"> 12.2234 </data>
                  <data bit_width="16"> 25.7595 </data>
                  <data bit_width="32"> 38.7740 </data>
                  <data bit_width="64"> 87.4109 </data>
                  <data bit_width="128"> 175.8871 </data>
                </max>
                <min>
                  <data bit_width="4"> 2.6054 </data>
                  <data bit_width="8"> 4.8513 </data>
                  <data bit_width="16"> 14.6249 </data>
                  <data bit_width="32"> 26.1478 </data>
                  <data bit_width="64"> 55.1800 </data>
                  <data bit_width="128"> 115.3530 </data>
                </min>
                <typ>
                </typ>
              </parameters>

              <parameters name="4,">
                <max>
                  <data bit_width="4"> 3.3533 </data>
                  <data bit_width="8"> 11.5582 </data>
                  <data bit_width="16"> 23.6486 </data>
                  <data bit_width="32"> 40.1529 </data>
                  <data bit_width="64"> 85.1035 </data>
                  <data bit_width="128"> 193.9539 </data>
                </max>
                <min>
                  <data bit_width="4"> 2.5691 </data>
                  <data bit_width="8"> 4.7957 </data>
                  <data bit_width="16"> 14.4818 </data>
                  <data bit_width="32"> 26.3631 </data>
                  <data bit_width="64"> 55.4004 </data>
                  <data bit_width="128"> 115.5681 </data>
                </min>
                <typ>
                </typ>
              </parameters>

              <parameters name="8,">
                <max>
                  <data bit_width="4"> 2.4957 </data>
                  <data bit_width="8"> 10.4327 </data>
                  <data bit_width="16"> 21.9373 </data>
                  <data bit_width="32"> 43.1621 </data>
                  <data bit_width="64"> 83.5071 </data>
                  <data bit_width="128"> 183.6311 </data>
                </max>
                <min>
                  <data bit_width="4"> 2.3136 </data>
                  <data bit_width="8"> 4.7784 </data>
                  <data bit_width="16"> 9.1780 </data>
                  <data bit_width="32"> 25.9870 </data>
                  <data bit_width="64"> 55.0099 </data>
                  <data bit_width="128"> 115.0796 </data>
                </min>
                <typ>
                </typ>
              </parameters>
            </est_index>
          </est_type>

          <est_type name="function_cycle">
            <!-- Dummy yet -->
          </est_type>

          <est_type name="function_power">
            <!-- Dummy yet -->
          </est_type>
        </library>
      </estimation_data>

      <estimation_method>
         
        <est_type name="shape">

          <est_index name="area">

            <parameters name="1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for pcu(1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for pcu(2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for pcu(4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for pcu(8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

          </est_index>

           <est_index name="aspect_ratio">

             <!-- Dummy yet -->

           </est_index>
		
           <est_index name="height">

             <!-- Dummy yet -->

           </est_index>
		
           <est_index name="width">

             <!-- Dummy yet -->

           </est_index>
		
        </est_type>

        <est_type name="timing">

          <est_index name="delay">

            <parameters name="1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for pcu(1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for pcu(2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for pcu(4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for pcu(8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

          </est_index>

          <est_index name="delay_fullpath">

            <parameters name="1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for pcu(1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for pcu(2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for pcu(4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for pcu(8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

          </est_index>

        </est_type>

        <est_type name="power">

          <est_index name="static_power">

            <parameters name="1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for pcu(1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for pcu(2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for pcu(4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for pcu(8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

          </est_index>

        </est_type>

        <est_type name="function_cycle">

        </est_type>

        <est_type name="function_power">

        </est_type>

    
      </estimation_method>

    </estimation>

  </model>

  <model>
    <design_level> rt </design_level>
    <version> 1.0 </version>
    <author> <![CDATA[ Kyoko UEDA ]]> </author>
    <affiliation> <![CDATA[ Osaka Univ. ]]> </affiliation>
    <model_info> <![CDATA[ (c)2001,PEAS3-Lite Project ]]> </model_info>

    <parameter>
      <parameter_value key="bit_width">
        <value> 4 </value>
        <value> 8 </value>
        <value> 16 </value>
        <value> 32 </value>
        <value> 64 </value>
        <value> 128 </value>
      </parameter_value>
      <parameter_value key="increment_step">
        <value> 1 </value>
        <value> 2 </value>
        <value> 4 </value>
        <value> 8 </value>
      </parameter_value>
    </parameter>

    <function_description>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates function definition for pcu in behavior level
# parameter : bit_width increment_step

if ($#ARGV != 1){
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width increment_step\n";
    exit (100);
}

$bit_width     = $ARGV[0];
$inc_step      = $ARGV[1];

@bit_widths = (4, 8, 16, 32, 64, 128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

@inc_steps = (1, 2, 4, 8, 16, 32, 64, 128);
if (! grep($_ eq $inc_step, @inc_steps)){
    print "increment_step $inc_step is not supported.\n";
    exit (100);
}

$w_1 = $bit_width - 1;
{
    print <<FHM_DL_FUNCTION
/** no operation */
function nop{
  input{
  }

  output{
  }

  control{
    in bit load;
    in bit reset;
    in bit hold;
  }

  protocol{
    single_cycle_protocol{
      load  = '0';
      reset = '0';
      hold  = '1';
    }
  }
}

/** reset */
function reset{
  input{
  }

  output{
  }

  control{
    in bit reset;
  }

  protocol{
    single_cycle_protocol{
      reset = '1';
    }
  }
}

/** increment */
function inc{
  input{
  }

  output{
  }

  control{
    in bit hold;
  }

  protocol{
    single_cycle_protocol{
      hold = '0';
    }
  }
}

/** write : set program counter value */
function write{
  input{
    bit [$w_1:0] data_in;
  }

  output{
  }

  control{
    in bit load;
  }

  protocol{
    single_cycle_protocol{
      load = '1';
    }
  }
}

/** read : read program counter value */
function read{
  input{
  }

  output{
    bit [$w_1:0] data_out;
  }

  control{
  }

  protocol{
  }
}
FHM_DL_FUNCTION
}
exit (0);
        ]]>
      </script>
    </function_description>

    <function_conv>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates function definition for pcu in behavior level
# parameter : bit_width increment_step

if ($#ARGV != 1){
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width increment_step\n";
    exit (100);
}

$bit_width     = $ARGV[0];
$inc_step      = $ARGV[1];

@bit_widths = (4, 8, 16, 32, 64, 128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

@inc_steps = (1, 2, 4, 8, 16, 32, 64, 128);
if (! grep($_ eq $inc_step, @inc_steps)){
    print "increment_step $inc_step is not supported.\n";
    exit (100);
}

$w_1 = $bit_width - 1;
{
    print <<FHM_DL_FUNCTION
/** no operation */
function nop{
  input{
  }

  output{
  }

  control{
    in bit load;
    in bit reset;
    in bit hold;
  }

  protocol{
    single_cycle_protocol{
      load  = '0';
      reset = '0';
      hold  = '1';
    }
  }
}

/** reset */
function reset{
  input{
  }

  output{
  }

  control{
    in bit reset;
  }

  protocol{
    single_cycle_protocol{
      reset = '1';
    }
  }
}

/** increment */
function inc{
  input{
  }

  output{
  }

  control{
    in bit hold;
  }

  protocol{
    single_cycle_protocol{
      hold = '0';
    }
  }
}

/** write : set program counter value */
function write{
  input{
    bit [$w_1:0] data_in;
  }

  output{
  }

  control{
    in bit load;
  }

  protocol{
    single_cycle_protocol{
      load = '1';
    }
  }
}

/** read : read program counter value */
function read{
  input{
  }

  output{
    bit [$w_1:0] data_out;
  }

  control{
  }

  protocol{
  }
}
FHM_DL_FUNCTION
}
exit (0);
        ]]>
      </script>
    </function_conv>

    <function_port>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates port information for pcu in behavior level
# parameter : bit_width increment_step

if ($#ARGV != 1){
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name bit_width increment_step\n";
    exit (100);
}

$bit_width     = $ARGV[0];
$inc_step      = $ARGV[1];

@bit_widths = (4, 8, 16, 32, 64, 128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

@inc_steps = (1, 2, 4, 8, 16, 32, 64, 128);
if (! grep($_ eq $inc_step, @inc_steps)){
    print "increment_step $inc_step is not supported.\n";
    exit (100);
}

$w_1 = $bit_width - 1;
{
    print <<FHM_DL_PORT
clock	in	bit		clock
load	in	bit		ctrl
reset	in	bit		reset
hold	in	bit		ctrl
data_in	in	bit_vector   $w_1   0	data
data_out	out	bit_vector   $w_1   0	data
FHM_DL_PORT
}
exit (0);
        ]]>
      </script>
    </function_port>

    <design>
      <design_lang> vhdl </design_lang>

      <instance>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates instance for pcu in behavior level
# parameter : instance_name bit_width increment_step

if ($#ARGV != 2){
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name bit_width increment_step\n";
    exit (100);
}

$instance_name = $ARGV[0];
$bit_width     = $ARGV[1];
$inc_step      = $ARGV[2];

@bit_widths = (4, 8, 16, 32, 64, 128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

@inc_steps = (1, 2, 4, 8, 16, 32, 64, 128);
if (! grep($_ eq $inc_step, @inc_steps)){
    print "increment_step $inc_step is not supported.\n";
    exit (100);
}

$w_1 = $bit_width - 1;
$zs = '0' x $bit_width;
{
    print <<FHM_DL_INSTANCE
-- Module	: $bit_width-bit program counter unit
--                $inc_step increment step
-- Refereces	:
-- Author	: Designed by M. Itoh (c)1998
-- Version	: 1.0 :
-- VHDL         : 87

-- Functionality : behavior level
-- port
--  clock    : clock 
--  load     : '1' then set counter value
--  reset    : '1' then reset counter
--  hold     : '1' then hold counter value
--  data_in  : data to register
--  data_out : registered data

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.std_logic_signed.all;

entity $instance_name is
  port (
    clock    : in  std_logic;
    load     : in  std_logic;
    reset    : in  std_logic;
    hold     : in  std_logic;
    data_in  : in  std_logic_vector($w_1 downto 0);
    data_out : out std_logic_vector($w_1 downto 0));
end $instance_name;

architecture behavior of $instance_name is
begin
  
  process(reset, clock)
    variable count : std_logic_vector($w_1 downto 0);
  begin
    if(reset = '1') then
      count := "$zs";
    elsif(clock'event and clock='1') then
      if (load = '1') then
        count := data_in;
      elsif (hold = '0') then 
        count := count + $inc_step;
      end if;
    end if;
    data_out <= count;
  end process;
end behavior;
FHM_DL_INSTANCE
}
exit (0);
          ]]>
        </script>
      </instance>

      <entity>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates entity for pcu in behavior level
# parameter : instance_name bit_width increment_step

if ($#ARGV != 2){
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name bit_width increment_step\n";
    exit (100);
}

$instance_name = $ARGV[0];
$bit_width     = $ARGV[1];
$inc_step      = $ARGV[2];

@bit_widths = (4, 8, 16, 32, 64, 128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

@inc_steps = (1, 2, 4, 8, 16, 32, 64, 128);
if (! grep($_ eq $inc_step, @inc_steps)){
    print "increment_step $inc_step is not supported.\n";
    exit (100);
}

$w_1 = $bit_width - 1;
{
    print <<FHM_DL_ENTITY
entity $instance_name is
  port (
    clock    : in  std_logic;
    load     : in  std_logic;
    reset    : in  std_logic;
    hold     : in  std_logic;
    data_in  : in  std_logic_vector($w_1 downto 0);
    data_out : out std_logic_vector($w_1 downto 0));
end $instance_name;
FHM_DL_ENTITY
}
exit (0);
          ]]>
        </script>
      </entity>

      <testvector>
        <testvector_script>
          <![CDATA[ ]]>
        </testvector_script>
      </testvector>

      <synthesis>
        <parameter></parameter>
        <synthesis_script>
          <script>
            <![CDATA[
#!/usr/bin/perl
# this script generates synthesis script for pcu in behavior level
# parameter : instance_name priority bit_width increment_step

if ($#ARGV != 3){
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name priority bit_width increment_step\n";
    exit (100);
}

$instance_name = $ARGV[0];
$priority      = $ARGV[1];
$bit_width     = $ARGV[2];
$inc_step      = $ARGV[3];

if ($priority eq "area"){
    $priority_const = "set_max_area 0";
}
elsif ($priority eq "performance"){
    $priority_const = "set_max_delay -from all_inputs() -to all_outputs() 0";
}
elsif ($priority eq "power"){
    $priority_const = "";
}
elsif ($priority eq "none"){
    $priority_const = "";
}
else{
    print "priority $priority is not supported.\n";
    exit (100);
}

@bit_widths = (4, 8, 16, 32, 64, 128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

@inc_steps = (1, 2, 4, 8, 16, 32, 64, 128);
if (! grep($_ eq $inc_step, @inc_steps)){
    print "increment_step $inc_step is not supported.\n";
    exit (100);
}

{
print <<FHM_DL_SCRIPT
hdlin_auto_save_templates = TRUE

analyze -f vhdl $instance_name.vhd

elaborate $instance_name
uniquify

$priority_const

create_clock -period 10 -waveform{0 5} clock

compile 

write -hierarchy -output $instance_name.db

report_area
report_timing

quit
FHM_DL_SCRIPT
}
exit (0);
            ]]>
          </script>
        </synthesis_script>
      </synthesis>
    </design>

    <estimation>
      <estimation_data>
        <library name="OSAKA">

          <est_type name="shape">
            <est_index name="area">
              <unit> mm2 </unit>
              <translate>
                <translate_value key="gate"> 4201.68 </translate_value>
                <translate_value key="mm2">  1 </translate_value>
              </translate>

              <parameters name="1,">
                <max>
                  <data bit_width="4"> 0.0264570167171227 </data>
                  <data bit_width="8"> 0.0626743407398945 </data>
                  <data bit_width="16"> 0.148724225071876 </data>
                  <data bit_width="32"> 0.274233306915329 </data>
                  <data bit_width="64"> 0.523131114458978 </data>
                  <data bit_width="128"> 1.11258463495554 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.0176998383979741 </data>
                  <data bit_width="8"> 0.0361308759829402 </data>
                  <data bit_width="16"> 0.0909358720797395 </data>
                  <data bit_width="32"> 0.185179093362655 </data>
                  <data bit_width="64"> 0.399241461272634 </data>
                  <data bit_width="128"> 0.804788703566192 </data>
                </min>
                <typ>
                </typ>
              </parameters>

              <parameters name="2,">
                <max>
                  <data bit_width="4"> 0.0233704608632737 </data>
                  <data bit_width="8"> 0.05958824993812 </data>
                  <data bit_width="16"> 0.149624177233868 </data>
                  <data bit_width="32"> 0.301589743626359 </data>
                  <data bit_width="64"> 0.537905768644923 </data>
                  <data bit_width="128"> 1.12397051964928 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.0162885743321719 </data>
                  <data bit_width="8"> 0.0345155473524876 </data>
                  <data bit_width="16"> 0.0889124069419851 </data>
                  <data bit_width="32"> 0.18265406170865 </data>
                  <data bit_width="64"> 0.396816429142629 </data>
                  <data bit_width="128"> 0.801536423763828 </data>
                </min>
                <typ>
                </typ>
              </parameters>

              <parameters name="4,">
                <max>
                  <data bit_width="4"> 0.0182102349536376 </data>
                  <data bit_width="8"> 0.0513326381352221 </data>
                  <data bit_width="16"> 0.139310701671712 </data>
                  <data bit_width="32"> 0.233134663039546 </data>
                  <data bit_width="64"> 0.525098856409817 </data>
                  <data bit_width="128"> 1.19025492469679 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.0152003767540603 </data>
                  <data bit_width="8"> 0.0330192151710744 </data>
                  <data bit_width="16"> 0.0865147424363588 </data>
                  <data bit_width="32"> 0.180910912063746 </data>
                  <data bit_width="64"> 0.395120010805202 </data>
                  <data bit_width="128"> 0.80082550313208 </data>
                </min>
                <typ>
                </typ>
              </parameters>

              <parameters name="8,">
                <max>
                  <data bit_width="4"> 0.0158804432988709 </data>
                  <data bit_width="8"> 0.0495811101749776 </data>
                  <data bit_width="16"> 0.128963307296129 </data>
                  <data bit_width="32"> 0.33660962472154 </data>
                  <data bit_width="64"> 0.552461655813865 </data>
                  <data bit_width="128"> 1.10547473248796 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.0137040471906476 </data>
                  <data bit_width="8"> 0.0316079527712724 </data>
                  <data bit_width="16"> 0.0698473532015765 </data>
                  <data bit_width="32"> 0.177654680984749 </data>
                  <data bit_width="64"> 0.392483213143314 </data>
                  <data bit_width="128"> 0.792857963719274 </data>
                </min>
                <typ>
                </typ>
              </parameters>
            </est_index>

            <est_index name="aspect_ratio">
              <!-- Dummy yet -->
            </est_index>

            <est_index name="height">
              <!-- Dummy yet -->
            </est_index>

            <est_index name="width">
              <!-- Dummy yet -->
            </est_index>
          </est_type>

          <est_type name="timing">
            <est_index name="delay">
              <unit> ns </unit>

              <parameters name="1,">
                <max>
                  <data bit_width="4"> 0.81 </data>
                  <data bit_width="8"> 0.87 </data>
                  <data bit_width="16"> 0.94 </data>
                  <data bit_width="32"> 0.94 </data>
                  <data bit_width="64"> 0.98 </data>
                  <data bit_width="128"> 1.02 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.72 </data>
                  <data bit_width="8"> 0.72 </data>
                  <data bit_width="16"> 0.78 </data>
                  <data bit_width="32"> 0.72 </data>
                  <data bit_width="64"> 0.77 </data>
                  <data bit_width="128"> 0.40 </data>
                </min>
                <typ>
                </typ>
              </parameters>

              <parameters name="2,">
                <max>
                  <data bit_width="4"> 0.83 </data>
                  <data bit_width="8"> 0.87 </data>
                  <data bit_width="16"> 0.94 </data>
                  <data bit_width="32"> 0.94 </data>
                  <data bit_width="64"> 0.93 </data>
                  <data bit_width="128"> 0.97 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.72 </data>
                  <data bit_width="8"> 0.72 </data>
                  <data bit_width="16"> 0.72 </data>
                  <data bit_width="32"> 0.72 </data>
                  <data bit_width="64"> 0.72 </data>
                  <data bit_width="128"> 0.72 </data>
                </min>
                <typ>
                </typ>
              </parameters>

              <parameters name="4,">
                <max>
                  <data bit_width="4"> 0.83 </data>
                  <data bit_width="8"> 0.86 </data>
                  <data bit_width="16"> 0.94 </data>
                  <data bit_width="32"> 0.94 </data>
                  <data bit_width="64"> 0.95 </data>
                  <data bit_width="128"> 0.99 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.72 </data>
                  <data bit_width="8"> 0.72 </data>
                  <data bit_width="16"> 0.72 </data>
                  <data bit_width="32"> 0.72 </data>
                  <data bit_width="64"> 0.72 </data>
                  <data bit_width="128"> 0.75 </data>
                </min>
                <typ>
                </typ>
              </parameters>

              <parameters name="8,">
                <max>
                  <data bit_width="4"> 0.80 </data>
                  <data bit_width="8"> 0.85 </data>
                  <data bit_width="16"> 0.94 </data>
                  <data bit_width="32"> 0.94 </data>
                  <data bit_width="64"> 0.96 </data>
                  <data bit_width="128"> 0.99 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.72 </data>
                  <data bit_width="8"> 0.72 </data>
                  <data bit_width="16"> 0.79 </data>
                  <data bit_width="32"> 0.72 </data>
                  <data bit_width="64"> 0.72 </data>
                  <data bit_width="128"> 0.72 </data>
                </min>
                <typ>
                </typ>
              </parameters>
            </est_index>

            <est_index name="delay_fullpath">
            <!-- Dummy yet -->
            </est_index>
          </est_type>

          <est_type name="power">
            <est_index name="static_power">
              <unit> mW </unit>
              <parameters name="1,">
                <max>
                  <data bit_width="4"> 6.5419 </data>
                  <data bit_width="8"> 12.0029 </data>
                  <data bit_width="16"> 21.8806 </data>
                  <data bit_width="32"> 42.9463 </data>
                  <data bit_width="64"> 93.4415 </data>
                  <data bit_width="128"> 183.8124 </data>
                </max>
                <min>
                  <data bit_width="4"> 2.6264 </data>
                  <data bit_width="8"> 4.8604 </data>
                  <data bit_width="16"> 14.7441 </data>
                  <data bit_width="32"> 26.4587 </data>
                  <data bit_width="64"> 55.4941 </data>
                  <data bit_width="128"> 115.6972 </data>
                </min>
                <typ>
                </typ>
              </parameters>

              <parameters name="2,">
                <max>
                  <data bit_width="4"> 5.6400 </data>
                  <data bit_width="8"> 12.2234 </data>
                  <data bit_width="16"> 25.7595 </data>
                  <data bit_width="32"> 38.7740 </data>
                  <data bit_width="64"> 87.4109 </data>
                  <data bit_width="128"> 175.8871 </data>
                </max>
                <min>
                  <data bit_width="4"> 2.6054 </data>
                  <data bit_width="8"> 4.8513 </data>
                  <data bit_width="16"> 14.6249 </data>
                  <data bit_width="32"> 26.1478 </data>
                  <data bit_width="64"> 55.1800 </data>
                  <data bit_width="128"> 115.3530 </data>
                </min>
                <typ>
                </typ>
              </parameters>

              <parameters name="4,">
                <max>
                  <data bit_width="4"> 3.3533 </data>
                  <data bit_width="8"> 11.5582 </data>
                  <data bit_width="16"> 23.6486 </data>
                  <data bit_width="32"> 40.1529 </data>
                  <data bit_width="64"> 85.1035 </data>
                  <data bit_width="128"> 193.9539 </data>
                </max>
                <min>
                  <data bit_width="4"> 2.5691 </data>
                  <data bit_width="8"> 4.7957 </data>
                  <data bit_width="16"> 14.4818 </data>
                  <data bit_width="32"> 26.3631 </data>
                  <data bit_width="64"> 55.4004 </data>
                  <data bit_width="128"> 115.5681 </data>
                </min>
                <typ>
                </typ>
              </parameters>

              <parameters name="8,">
                <max>
                  <data bit_width="4"> 2.4957 </data>
                  <data bit_width="8"> 10.4327 </data>
                  <data bit_width="16"> 21.9373 </data>
                  <data bit_width="32"> 43.1621 </data>
                  <data bit_width="64"> 83.5071 </data>
                  <data bit_width="128"> 183.6311 </data>
                </max>
                <min>
                  <data bit_width="4"> 2.3136 </data>
                  <data bit_width="8"> 4.7784 </data>
                  <data bit_width="16"> 9.1780 </data>
                  <data bit_width="32"> 25.9870 </data>
                  <data bit_width="64"> 55.0099 </data>
                  <data bit_width="128"> 115.0796 </data>
                </min>
                <typ>
                </typ>
              </parameters>
            </est_index>
          </est_type>

          <est_type name="function_cycle">
            <!-- Dummy yet -->
          </est_type>

          <est_type name="function_power">
            <!-- Dummy yet -->
          </est_type>
        </library>
      </estimation_data>

      <estimation_method>
         
        <est_type name="shape">

          <est_index name="area">

            <parameters name="1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for pcu(1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for pcu(2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for pcu(4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for pcu(8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

          </est_index>

           <est_index name="aspect_ratio">

             <!-- Dummy yet -->

           </est_index>
		
           <est_index name="height">

             <!-- Dummy yet -->

           </est_index>
		
           <est_index name="width">

             <!-- Dummy yet -->

           </est_index>
		
        </est_type>

        <est_type name="timing">

          <est_index name="delay">

            <parameters name="1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for pcu(1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for pcu(2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for pcu(4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for pcu(8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

          </est_index>

          <est_index name="delay_fullpath">

            <parameters name="1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for pcu(1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for pcu(2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for pcu(4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for pcu(8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

          </est_index>

        </est_type>

        <est_type name="power">

          <est_index name="static_power">

            <parameters name="1">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for pcu(1) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="2">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for pcu(2) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for pcu(4) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="8">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for pcu(8) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

          </est_index>

        </est_type>

        <est_type name="function_cycle">

        </est_type>

        <est_type name="function_power">

        </est_type>
    
      </estimation_method>

    </estimation>

  </model>

  <model>
    <design_level> synthesis </design_level>
    <version> 1.0 </version>
    <author> <![CDATA[ Kyoko UEDA ]]> </author>
    <affiliation> <![CDATA[ Osaka Univ. ]]> </affiliation>
    <model_info> <![CDATA[ (c)2001,PEAS3-Lite Project ]]> </model_info>

    <parameter>
      <parameter_value key="bit_width">
        <value> 4 </value>
        <value> 8 </value>
        <value> 16 </value>
        <value> 32 </value>
        <value> 64 </value>
        <value> 128 </value>
      </parameter_value>
      <parameter_value key="increment_step">
        <value> 1 </value>
        <value> 2 </value>
        <value> 4 </value>
        <value> 8 </value>
      </parameter_value>
      <parameter_value key="adder_algorithm">
        <value> cla </value>
        <value> rca </value>
      </parameter_value>
    </parameter>

    <function_description>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates function definition for pcu in synthesis level
# parameter : bit_width increment_step adder_algorithm

if ($#ARGV != 2){
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width increment_step adder_algorithm\n";
    exit (100);
}

$bit_width = $ARGV[0];
$inc_step  = $ARGV[1];
$add_algo  = $ARGV[2];

@bit_widths = (4, 8, 16, 32, 64, 128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

@inc_steps = (1, 2, 4, 8, 16, 32, 64, 128);
if (! grep($_ eq $inc_step, @inc_steps)){
    print "increment_step $inc_step is not supported.\n";
    exit (100);
}

@add_algos = ("rca", "cla");
if (! grep($_ eq $add_algo, @add_algos)){
    print "adder_algorithm $add_algo is not supported.\n";
    exit (100);
}

$w_1 = $bit_width - 1;
{
    print <<FHM_DL_FUNCTION
unsigned add(unsigned a, unsigned b);

model pcu${bit_width}{
  port{
    clock clock;
    in load, reset, hold, data_in[$w_1:0];
    out data_out[$w_1:0];
  }
  storage{
    register reg[$w_1:0];
  }
  default_control{
    load  = '0';
    reset = '0';
    hold  = '1';
  }

  /** no operation*/
  function nop : idle{
    control{
      in load, reset, hold;
    }
    protocol{
      [load == 0 && reset == 0 && hold == 1]{
      }
    }
  }

  /** reset */
  function reset : reset{
    assignment{
      reg = 0;
    }
    control{
      in reset;
    }
    protocol{
      [reset == 1]{
	store reg;
      }
    }
  }

  /** increment */
  function inc{
    assignment{
      reg = add(reg, $inc_step);
    }
  }

  /** write : set program counter value */
  function write{
    input{
      bit_vector data_in;
    }
    assignment{
      reg = data_in;
    }
    control{
      in bit load;
    }
    protocol{
      [load = '1' && hold data_in]{
	store reg;
      }
    }
  }

  /** read : read program counter value */
  function read{
    output{
      bit_vector data_out;
    }
  }

  priority{ ( reset > ( inc | write ) ), read}
}
FHM_DL_FUNCTION
}
exit (0);
        ]]>
      </script>
    </function_description>

    <function_conv>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates function definition for pcu in synthesis level
# parameter : bit_width increment_step adder_algorithm

if ($#ARGV != 2){
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width increment_step adder_algorithm\n";
    exit (100);
}

$bit_width = $ARGV[0];
$inc_step  = $ARGV[1];
$add_algo  = $ARGV[2];

@bit_widths = (4, 8, 16, 32, 64, 128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

@inc_steps = (1, 2, 4, 8, 16, 32, 64, 128);
if (! grep($_ eq $inc_step, @inc_steps)){
    print "increment_step $inc_step is not supported.\n";
    exit (100);
}

@add_algos = ("rca", "cla");
if (! grep($_ eq $add_algo, @add_algos)){
    print "adder_algorithm $add_algo is not supported.\n";
    exit (100);
}

$w_1 = $bit_width - 1;
{
    print <<FHM_DL_FUNCTION
/** no operation */
function nop{
  input{
  }

  output{
  }

  control{
    in bit load;
    in bit reset;
    in bit hold;
  }

  protocol{
    single_cycle_protocol{
      load  = '0';
      reset = '0';
      hold  = '1';
    }
  }
}

/** reset */
function reset{
  input{
  }

  output{
  }

  control{
    in bit reset;
  }

  protocol{
    single_cycle_protocol{
      reset = '1';
    }
  }
}

/** increment */
function inc{
  input{
  }

  output{
  }

  control{
    in bit hold;
  }

  protocol{
    single_cycle_protocol{
      hold = '0';
    }
  }
}

/** write : set program counter value */
function write{
  input{
    bit [$w_1:0] data_in;
  }

  output{
  }

  control{
    in bit load;
  }

  protocol{
    single_cycle_protocol{
      load = '1';
    }
  }
}

/** read : read program counter value */
function read{
  input{
  }

  output{
    bit [$w_1:0] data_out;
  }

  control{
  }

  protocol{
  }
}
FHM_DL_FUNCTION
}
exit (0);
        ]]>
      </script>
    </function_conv>

    <function_port>
      <script>
        <![CDATA[
#!/usr/bin/perl
# this script generates port information for pcu in synthesis level
# parameter : bit_width increment_step adder_algorithm

if ($#ARGV != 2){
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width increment_step adder_algorithm\n";
    exit (100);
}

$bit_width     = $ARGV[0];
$inc_step      = $ARGV[1];
$add_algo      = $ARGV[2];

@bit_widths = (4, 8, 16, 32, 64, 128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

@inc_steps = (1, 2, 4, 8, 16, 32, 64, 128);
if (! grep($_ eq $inc_step, @inc_steps)){
    print "increment_step $inc_step is not supported.\n";
    exit (100);
}

@add_algos = ("rca", "cla");
if (! grep($_ eq $add_algo, @add_algos)){
    print "adder_algorithm $add_algo is not supported.\n";
    exit (100);
}

$w_1 = $bit_width - 1;

print <<FHM_DL_PCU
clock	in	bit		clock
load	in	bit		ctrl
reset	in	bit		reset
hold	in	bit		ctrl
data_in	in	bit_vector   $w_1   0	data
data_out	out	bit_vector   $w_1   0	data
FHM_DL_PCU
        ]]>
      </script>
    </function_port>

    <design>
      <design_lang> vhdl </design_lang>

      <instance>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates instance for pcu in synthesis level
# parameter : instance_name bit_width increment_step adder_algorithm

if ($#ARGV != 3){
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name bit_width increment_step adder_algorithm\n";
    exit (100);
}

$instance_name = $ARGV[0];
$bit_width     = $ARGV[1];
$inc_step      = $ARGV[2];
$add_algo      = $ARGV[3];

@bit_widths = (4, 8, 16, 32, 64, 128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

@inc_steps = (1, 2, 4, 8, 16, 32, 64, 128);
if (! grep($_ eq $inc_step, @inc_steps)){
    print "increment_step $inc_step is not supported.\n";
    exit (100);
}

$w_1 = $bit_width - 1;

$instance_name_add = $instance_name."_add$bit_width";

if ("$add_algo" eq "rca"){
    {
	print <<FHM_DL_RCA
-- Module     : 1-bit full adder
-- References :
-- Author     : Designed by T.Morifuji (c)1996.
-- Version    : 1.0  :
-- VHDL       : 87

-- Functionality : synthesis level
--  port
--   a, b   : add datas
--   cin    : carry in
--   result : result of a + b + c
--   cout   : carry of a + b + c

library IEEE;
  use IEEE.std_logic_1164.all;
  use IEEE.std_logic_unsigned.all;

entity ${instance_name_add}_fa is
    port (a:    in  std_logic;
          b:    in  std_logic;
          cin:  in  std_logic;
          s:    out std_logic;
          cout: out std_logic );
end ${instance_name_add}_fa;

architecture synthesis of ${instance_name_add}_fa is
begin

   s <= (not a and b and not cin) or
	(a and not b and not cin) or
        (not a and not b and cin) or 
	(a and b and cin);

   cout <= (a and b and not cin) or 
           (not a and b and cin) or 
           (a and not b and cin) or 
           (a and b and cin);

end synthesis;

--%%

-- Module     : $bit_width-bit ripple carry adder
-- References :
-- Author     : Designed by T.Morifuji (c)1996.
-- Version    : 1.0
-- VHDL       : 87

-- Functionality : synthesis level
--  port
--   a, b   : add datas
--   cin    : carry in
--   result : result of a + b + c
--   cout   : '1' when result > 2^$bit_width-1 else '0'

library IEEE;
  use IEEE.std_logic_1164.all;
  use IEEE.std_logic_unsigned.all;

entity $instance_name_add is
    port (a, b   : in  std_logic_vector($w_1 downto 0);
          cin    : in  std_logic;
          result : out std_logic_vector($w_1 downto 0);
          cout   : out std_logic);
end $instance_name_add;

architecture synthesis of $instance_name_add is

   component ${instance_name_add}_fa
      port (a:    in  std_logic;
            b:    in  std_logic;
            cin:  in  std_logic;
            s:    out std_logic;
            cout: out std_logic);
   end component;

   signal  ctmp :  std_logic_vector($bit_width downto 0);

begin

   ctmp(0) <= cin;

   full_adder: for i in $w_1 downto 0 generate
   fan: ${instance_name_add}_fa 
      port map (a    => a(i),
                b    => b(i),
                cin  => ctmp(i),
                s    => result(i),
                cout => ctmp(i+1));
   end generate full_adder;

   cout <= ctmp($bit_width);

end synthesis;

FHM_DL_RCA
    }
}
elsif ("$add_algo" eq "cla"){
    $rem64   = $bit_width % 64;
    $count64 = ($bit_width - $rem64) / 64;
    $rem16   = $rem64 % 16;
    $count16 = ($rem64 - $rem16) / 16;
    $count1  = $rem16 % 4;
    $count4  = ($rem16 - $count1) / 4;

    $req64 = $count64;
    $req16 = $req64 + $count16;
    $req4  = $req16 + $count4;

    if ($req4 != 0){
	print <<FHM_DL_CLA4
-- Module     : Basic 4bit carry look ahead adder
-- References : John L. Hennessy, David A. Patterson,
--              "Computer Architecture : A Quantitative Approach,"
--              Second Edition, Morgan Kaufmann, 1996
-- Author     : Designed by T.Morifuji (c)1996,1997.
-- Version    : 1.0  :
-- VHDL       : 87

-- Functionality : synthesis level
--  port
--   a, b   : add datas
--   cin    : carry in
--   result : result of a + b + c
--   cout   : '1' when result > 2^4-1 else '0'

library IEEE;
  use IEEE.std_logic_1164.all;
  use IEEE.std_logic_unsigned.all;

entity ${instance_name_add}_cla4 is
  port (a, b       : in  std_logic_vector(3 downto 0);
        cin        : in  std_logic;
        result     : out std_logic_vector(3 downto 0);
        pout, gout : out std_logic);
end ${instance_name_add}_cla4;

architecture synthesis of ${instance_name_add}_cla4 is

  signal p, g  : std_logic_vector(3 downto 0);
  signal carry : std_logic_vector(2 downto 0);

begin  --  synthesis

  --  make carry generate
  g(0) <= a(0) and b(0);
  g(1) <= a(1) and b(1);
  g(2) <= a(2) and b(2);
  g(3) <= a(3) and b(3);

  --  make carry propagate
  p(0) <= a(0) xor b(0);
  p(1) <= a(1) xor b(1);
  p(2) <= a(2) xor b(2);
  p(3) <= a(3) xor b(3);
  
  --   make internal carry and external carry
  carry(0) <= g(0) or (p(0) and cin);
  carry(1) <= g(1) or (p(1) and g(0)) or (p(1) and p(0) and cin);
  carry(2) <= g(2) or (p(2) and g(1)) or (p(2) and p(1) and g(0))
            or (p(2) and p(1) and p(0) and cin);
  pout  <= p(3) and p(2) and p(1) and p(0);
  gout  <= g(3) or (p(3) and g(2)) or (p(3) and p(2) and g(1))
            or (p(3) and p(2) and p(1) and g(0));

  --  make sum.
  result(0) <= p(0) xor cin;
  result(1) <= p(1) xor carry(0);
  result(2) <= p(2) xor carry(1);
  result(3) <= p(3) xor carry(2);

end synthesis;

--%%

FHM_DL_CLA4
    }
    if ($req16 != 0){
	print <<FHM_DL_CLA16
-- Module     : Basic 16bit carry look ahead adder
-- References : John L. Hennessy, David A. Patterson,
--              "Computer Architecture : A Quantitative Approach,"
--              Second Edition, Morgan Kaufmann, 1996
-- Author     : Designed by T.Morifuji (c)1996,1997.
-- Version    : 1.0  :
-- VHDL       : 87

-- Functionality : synthesis level
--  port
--   a, b   : add datas
--   cin    : carry in
--   result : result of a + b + c
--   cout   : '1' when result > 2^16-1 else '0'

library IEEE;
  use IEEE.std_logic_1164.all;
  use IEEE.std_logic_unsigned.all;

entity ${instance_name_add}_cla16 is
  port (a, b       : in std_logic_vector(15 downto 0);
        cin        : in std_logic;
        result     : out std_logic_vector(15 downto 0);
        pout, gout : out std_logic);
end ${instance_name_add}_cla16;

architecture synthesis of ${instance_name_add}_cla16 is

  component ${instance_name_add}_cla4
    port (a, b       : in  std_logic_vector(3 downto 0);
          cin        : in  std_logic;
          result     : out std_logic_vector(3 downto 0);
          pout, gout : out std_logic);
  end component;

  signal p, g  : std_logic_vector(3 downto 0);
  signal carry : std_logic_vector(2 downto 0);

begin  --  synthesis

  -- make internal carry and carry propagate/generate
  carry(0) <= g(0) or (p(0) and cin);
  carry(1) <= g(1) or (p(1) and g(0)) or (p(1) and p(0) and cin);
  carry(2) <= g(2) or (p(2) and g(1)) or (p(2) and p(1) and g(0))
            or (p(2) and p(1) and p(0) and cin);
  pout <= p(3) and p(2) and p(1) and p(0);
  gout <= g(3) or (p(3) and g(2)) or (p(3) and p(2) and g(1))
          or (p(3) and p(2) and p(1) and g(0));
  
  -- work adder
  u0 : ${instance_name_add}_cla4
    port map (
      a      => a(3 downto 0),
      b      => b(3 downto 0),
      cin    => cin,
      result => result(3 downto 0),
      pout   => p(0),
      gout   => g(0));
  
  u1 : ${instance_name_add}_cla4
    port map (
      a      => a(7 downto 4),
      b      => b(7 downto 4),
      cin    => carry(0),
      result => result(7 downto 4),
      pout   => p(1),
      gout   => g(1));

  u2 : ${instance_name_add}_cla4
    port map (
      a      => a(11 downto 8),
      b      => b(11 downto 8),
      cin    => carry(1),
      result => result(11 downto 8),
      pout   => p(2),
      gout   => g(2));

  u3 : ${instance_name_add}_cla4
    port map (
      a      => a(15 downto 12),
      b      => b(15 downto 12),
      cin    => carry(2),
      result => result(15 downto 12),
      pout   => p(3),
      gout   => g(3));

end synthesis;

--%%

FHM_DL_CLA16
    }
    if ($req64 != 0){
	print <<FHM_DL_CLA64
-- Module     : Basic 64bit carry look ahead adder
-- References : John L. Hennessy, David A. Patterson,
--              "Computer Architecture : A Quantitative Approach,"
--              Second Edition, Morgan Kaufmann, 1996
-- Author     : Designed by T.Morifuji (c)1996,1997.
-- Version    : 1.0  :
-- VHDL       : 87

-- Functionality : synthesis level
--  port
--   a, b   : add datas
--   cin    : carry in
--   result : result of a + b + c
--   cout   : '1' when result > 2^64-1 else '0'

library IEEE;
  use IEEE.std_logic_1164.all;
  use IEEE.std_logic_unsigned.all;

entity ${instance_name_add}_cla64 is
  port (a, b       : in std_logic_vector(63 downto 0);
        cin        : in std_logic;
        result     : out std_logic_vector(63 downto 0);
        pout, gout : out std_logic);
end ${instance_name_add}_cla64;

architecture synthesis of ${instance_name_add}_cla64 is

  component ${instance_name_add}_cla16
    port (a, b       : in std_logic_vector(15 downto 0);
          cin        : in std_logic;
          result     : out std_logic_vector(15 downto 0);
          pout, gout : out std_logic);
  end component;

  signal        p, g             : std_logic_vector(3 downto 0);
  signal        carry            : std_logic_vector(2 downto 0);

begin  --  synthesis 

  -- make internal carry and carry propagate/generate
  carry(0) <= g(0) or (p(0) and cin);
  carry(1) <= g(1) or (p(1) and g(0)) or (p(1) and p(0) and cin);
  carry(2) <= g(2) or (p(2) and g(1)) or (p(2) and p(1) and g(0))
            or (p(2) and p(1) and p(0) and cin);
  pout <= p(3) and p(2) and p(1) and p(0);
  gout <= g(3) or (p(3) and g(2)) or (p(3) and p(2) and g(1))
          or (p(3) and p(2) and p(1) and g(0));
  
  -- work adder
  u0 : ${instance_name_add}_cla16
    port map (
      a      => a(15 downto 0),
      b      => b(15 downto 0),
      cin    => cin,
      result => result(15 downto 0),
      pout   => p(0),
      gout   => g(0));

  u1 : ${instance_name_add}_cla16
    port map (
      a      => a(31 downto 16),
      b      => b(31 downto 16),
      cin    => carry(0),
      result => result(31 downto 16),
      pout   => p(1),
      gout   => g(1));

  u2 : ${instance_name_add}_cla16
    port map (
      a      => a(47 downto 32),
      b      => b(47 downto 32),
      cin    => carry(1),
      result => result(47 downto 32),
      pout   => p(2),
      gout   => g(2));

  u3 : ${instance_name_add}_cla16
    port map (
      a      => a(63 downto 48),
      b      => b(63 downto 48),
      cin    => carry(2),
      result => result(63 downto 48),
      pout   => p(3),
      gout   => g(3));

end synthesis;

--%%

FHM_DL_CLA64
    }
    {
	print <<FHM_DL_CLA_BEGIN
-- Module     : $bit_width-bit carry look ahead adder
-- References : John L. Hennessy, David A. Patterson,
--              "Computer Architecture : A Quantitative Approach,"
--              Second Edition, Morgan Kaufmann, 1996
-- Author     : Designed by T.Morifuji (c)1996,1997.
-- Version    : 1.0  :
-- VHDL       : 87

-- Functionality : synthesis level
--  port
--   a, b   : add datas
--   cin    : carry in
--   result : result of a + b + c
--   cout   : '1' when result > 2^64-1 else '0'

library IEEE;
  use IEEE.std_logic_1164.all;
  use IEEE.std_logic_unsigned.all;

entity $instance_name_add is
  port (a, b   : in  std_logic_vector($w_1 downto 0);
        cin    : in  std_logic;
        result : out std_logic_vector($w_1 downto 0);
        cout   : out std_logic);
end $instance_name_add;

architecture synthesis of $instance_name_add is

FHM_DL_CLA_BEGIN
    }
    if ($req64 != 0){
	print <<FHM_DL_CLA_COMP64
  component ${instance_name_add}_cla64
    port (a, b       : in std_logic_vector(63 downto 0);
          cin        : in std_logic;
          result     : out std_logic_vector(63 downto 0);
          pout, gout : out std_logic);
  end component;
FHM_DL_CLA_COMP64
    }
    if ($req16 != 0){
	print <<FHM_DL_CLA_COMP16
  component ${instance_name_add}_cla16
    port (a, b       : in std_logic_vector(15 downto 0);
          cin        : in std_logic;
          result     : out std_logic_vector(15 downto 0);
          pout, gout : out std_logic);
  end component;
FHM_DL_CLA_COMP16
    }
    if ($req4 != 0){
	print <<FHM_DL_CLA_COMP4
  component ${instance_name_add}_cla4
    port (a, b       : in std_logic_vector(3 downto 0);
          cin        : in std_logic;
          result     : out std_logic_vector(3 downto 0);
          pout, gout : out std_logic);
  end component;
FHM_DL_CLA_COMP4
    }
    if ($req4 >= 1){
	$tmp = $req4 - 1;
	print "  signal p, g      : std_logic_vector($tmp downto 0);\n";
	print "  signal carry     : std_logic_vector($tmp downto 0);\n";
    }
    if ($count1 != 0){
	$tmp = $count1 - 1;
	print "  signal gres,pres : std_logic_vector($tmp downto 0);\n";
    }
    if ($count1 > 1){
	$tmp = $count1 - 2;
	print "  signal carry_res : std_logic_vector($tmp downto 0);\n\n";
    }
    print "begin\n";
    for ($carry=0; $carry<$req4; $carry++){
	print "  carry($carry) <= g($carry) or\n";
	$tmp = $carry;

	for ($g=$carry; $g>=0; $g--){
	    print "              (";

	    for ($p=$carry; $p>=$tmp; $p--){
		print "p($p) and ";
	    }
	    $tmp--;

	    if ($g == 0){
		print "cin);\n";
	    }
	    else{
		print "g($p)) or\n";
	    }
	}
    }

    print "\n";

    $bit_tmp = 0;
    $p = 0;
    $g = 0;

    for ($loop=0,$bit_tmp_63=$bit_tmp+63; $loop<=$count64-1;
	 $loop++,$bit_tmp+=64,$bit_tmp_63+=64,$p++,$g++){
	print "  u64_$loop : ${instance_name_add}_cla64\n";
        print "    port map (\n";
        print "      a      => a($bit_tmp_63 downto $bit_tmp),\n";
        print "      b      => b($bit_tmp_63 downto $bit_tmp),\n";

	if ($bit_tmp == 0){
            print "      cin    => cin,\n";
	}
	else{
	    $tmp = $p - 1;
            print "      cin    => carry($tmp),\n";
	}

        print "      result => result($bit_tmp_63 downto $bit_tmp),\n";
        print "      pout   => p($p),\n";
        print "      gout   => g($g));\n";
    }

    for ($loop=0,$bit_tmp_15=$bit_tmp+15; $loop<=$count16-1;
	 $loop++,$bit_tmp+=16,$bit_tmp_15+=16,$p++,$g++){
	print "  u16_$loop : ${instance_name_add}_cla16\n";
        print "    port map (\n";
        print "      a      => a($bit_tmp_15 downto $bit_tmp),\n";
        print "      b      => b($bit_tmp_15 downto $bit_tmp),\n";

	if ($bit_tmp == 0){
            print "      cin    => cin,\n";
	}
	else{
	    $tmp = $p - 1;
            print "      cin    => carry($tmp),\n";
	}

        print "      result => result($bit_tmp_15 downto $bit_tmp),\n";
        print "      pout   => p($p),\n";
        print "      gout   => g($g));\n";
    }

        for ($loop=0,$bit_tmp_3=$bit_tmp+3; $loop<=$count4-1;
	     $loop++,$bit_tmp+=4,$bit_tmp_3+=4,$p++,$g++){
	print "  u4_$loop : ${instance_name_add}_cla4\n";
        print "    port map (\n";
        print "      a      => a($bit_tmp_3 downto $bit_tmp),\n";
        print "      b      => b($bit_tmp_3 downto $bit_tmp),\n";

	if ($bit_tmp == 0){
            print "      cin    => cin,\n";
	}
	else{
	    $tmp = $p - 1;
            print "      cin    => carry($tmp),\n";
	}

        print "      result => result($bit_tmp_3 downto $bit_tmp),\n";
        print "      pout   => p($p),\n";
        print "      gout   => g($g));\n";
    }

    for ($loop=0,$tmp=bit_tmp; $loop<=count1-1; $loop++,$tmp++){
	print "  gres($loop) <= a($tmp) and b($tmp);\n";
    }
    print "\n";
    for ($loop=0,$tmp=bit_tmp; $loop<=count1-1; $loop++,$tmp++){
	print "  pres($loop) <= a($tmp) xor b($tmp);\n";
    }
    print "\n";
    if (count1 == 0){
	$tmp = $req4 - 1;
	print "  cout <= carry($tmp);\n";
    }

    for ($carry=0; $carry<$count1; $carry++){
	if ($carry == $count1 - 1){
	    print "  cout <= gres($carry) or\n";
	}
	else{
	    print "  carry_res($carry) <= gres($carry) or\n";
	}
	$tmp = $carry;

	for ($g=$carry; $g>=0; $g--){
	    print "              (";
	    
	    for ($p=$carry; $p>=$tmp; $p--){
		print "pres($p) and ";
	    }
	    $tmp--;

	    if ($g == 0){
		if ($req4 == 0){
		    print "cin);\n";
		}
		else{
		    $tmp2 = $req4 - 1;
		    print "carry($tmp2));\n";
		}
	    }
	    else{
		print "gres($p)) or\n";
	    }
	}
    }
    print "\n";
    for ($loop=0,$tmp=$bit_width; $loop<=count1-1; $loop++,$tmp++){
	if ($req4 == 0){
	    if ($loop == 0){
		print "  result($tmp) <= pres($loop) xor cin;\n";
	    }
	    else{
		$tmp2 = $loop - 1;
		print "  result($tmp) <= pres($loop) xor carry_res($tmp2);\n";
	    }            
	}
	else{
	    if ($loop == 0){
		$tmp2 = $req4 - 1;
		print "  result($tmp) <= pres($loop) xor carry($tmp2);\n";
	    }
	    else{
		$tmp2 = $loop - 1;
		print "  result($tmp) <= pres($loop) xor carry_res($tmp2);\n";
	    }
	}
    }
    print "\n";
    print "end synthesis;\n";
}
else{
    print "adder_algorithm $add_algo is not supported.\n";
    exit (100);
}

print "\n--%%\n\n";

{
    $zeros = 0 x $bit_width;
    print <<FHM_DL_REG
-- Module     : $bit_width-bit positive edge trigger register
-- References :
-- Author     : Designed by T.Morifuji (c)1997.
-- Version    : 1.0  :
-- VHDL       : 87

-- Functionality : synthesis level
--  port
--   clock    : clock
--   reset    : reset
--   enb      : '1' then register data
--   data_in  : data to register
--   data_out : registered data

library IEEE;
  use IEEE.std_logic_1164.all;
  use IEEE.std_logic_unsigned.all;

entity ${instance_name}_reg$bit_width is
  port (clock    : in  std_logic;
        reset    : in  std_logic;
        enb      : in  std_logic;
        data_in  : in  std_logic_vector($w_1 downto 0);
        data_out : out std_logic_vector($w_1 downto 0) );
end ${instance_name}_reg$bit_width;

architecture synthesis of ${instance_name}_reg$bit_width is
begin

  process (clock, reset, enb)
  begin
    if (reset = '1') then
      data_out <= "$zeros";
    elsif (clock'event and clock = '1') then
      if (enb = '1') then
        data_out <= data_in;
      end if;
    end if;
  end process;

end synthesis;

--%%
FHM_DL_REG
}
($step, $dummy) = &print_2_comp($inc_step, $bit_width);
{
print <<FHM_DL_PCU
-- Module	: $bit_width-bit program counter unit
--                $inc_step increment step and
--                using $add_algo for adder algorithm
-- Refereces	:
-- Author	: Designed by M. Itoh (c)1998
-- Version	: 1.0 :

-- Functionality : synthesis level
-- port
--  clock      	: clock
--  load	: '1' then set counter value
--  reset	: '1' then reset counter
--  hold	: '1' then hold counter value
--  data_in	: data to register
--  data_out	: registered data

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.std_logic_signed.all;

entity $instance_name is
  port(
    clock    : in  std_logic;
    load     : in  std_logic;
    reset    : in  std_logic;
    hold     : in  std_logic;
    data_in  : in  std_logic_vector($w_1 downto 0);
    data_out : out std_logic_vector($w_1 downto 0));
end $instance_name;

architecture synthesis of $instance_name is
component $instance_name_add
  port (
    a, b   : in  std_logic_vector($w_1 downto 0);
    cin    : in  std_logic;
    result : out std_logic_vector($w_1 downto 0);
    cout   : out std_logic );
end component;

component ${instance_name}_reg$bit_width
  port (
    clock    : in  std_logic;
    reset    : in  std_logic;
    enb	     : in  std_logic;
    data_in  : in  std_logic_vector($w_1 downto 0);
    data_out : out std_logic_vector($w_1 downto 0)
  );
end component;

signal zero, one	: std_logic;
signal pc, next_pc, inc_pc	: std_logic_vector($w_1 downto 0);
signal step	: std_logic_vector($w_1 downto 0);

signal	cout	: std_logic;

begin
  zero <= '0';
  one  <= '1';
  step <= "$step";
  
  next_pc <= data_in when load = '1' else
             pc when hold = '1' else
             inc_pc;
  
  add1 : $instance_name_add
  port map(
    a	   => pc,
    b	   => step,
    cin	   => zero,
    result => inc_pc,
    cout   => open);

  reg1 : ${instance_name}_reg$bit_width
  port map (
    clock    => clock,
    reset    => reset,
    enb      => one,
    data_in  => next_pc,
    data_out => pc);

  data_out <= pc;
end synthesis;
FHM_DL_PCU
}

sub print_2_comp{
  my (@buf) = ();
  my ($num) = $_[0];
  my ($bit_width) = $_[1];
  my ($over) = 0;

  for ($i=1; $i<$bit_width; $i++){
    $buf[$i] = $num % 2;
    $num = ($num - $buf[$i]) / 2;
  }
  $buf[$i] = $num % 2;
  if (($num / 2) >= 1){
      $over = 1;
  }
  return (join("", reverse(@buf)), $over);
}
          ]]>
        </script>
      </instance>

      <entity>
        <script>
          <![CDATA[
#!/usr/bin/perl
# this script generates entity for pcu in synthesis level
# parameter : instance_name bit_width increment_step adder_algorithm

if ($#ARGV != 3){
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name bit_width increment_step adder_algorithm\n";
    exit (100);
}

$instance_name = $ARGV[0];
$bit_width     = $ARGV[1];
$inc_step      = $ARGV[2];
$add_algo      = $ARGV[3];

@bit_widths = (4, 8, 16, 32, 64, 128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

@inc_steps = (1, 2, 4, 8, 16, 32, 64, 128);
if (! grep($_ eq $inc_step, @inc_steps)){
    print "increment_step $inc_step is not supported.\n";
    exit (100);
}

@add_algos = ("rca", "cla");
if (! grep($_ eq $add_algo, @add_algos)){
    print "adder_algorithm $add_algo is not supported.\n";
    exit (100);
}

$w_1 = $bit_width - 1;

print <<FHM_DL_PCU
entity $instance_name is
  port(
    clock    : in  std_logic;
    load     : in  std_logic;
    reset    : in  std_logic;
    hold     : in  std_logic;
    data_in  : in  std_logic_vector($w_1 downto 0);
    data_out : out std_logic_vector($w_1 downto 0));
end $instance_name;
FHM_DL_PCU
          ]]>
        </script>
      </entity>

      <testvector>
        <testvector_script>
          <![CDATA[ ]]>
        </testvector_script>
      </testvector>

      <synthesis>
        <parameter></parameter>
        <synthesis_script>
          <script>
            <![CDATA[
#!/usr/bin/perl
# this script generates synthesis script for pcu in synthesis level
# parameter : instance_name priority bit_width increment_step adder_algorithm

if ($#ARGV != 4){
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name priority bit_width increment_step adder_algorithm\n";
    exit (100);
}

$instance_name = $ARGV[0];
$priority      = $ARGV[1];
$bit_width     = $ARGV[2];
$inc_step      = $ARGV[3];
$add_algo      = $ARGV[4];

if ($priority eq "area"){
    $priority_const = "set_max_area 0";
}
elsif ($priority eq "performance"){
    $priority_const = "set_max_delay -from all_inputs() -to all_outputs() 0";
}
elsif ($priority eq "power"){
    $priority_const = "";
}
elsif ($priority eq "none"){
    $priority_const = "";
}
else{
    print "priority $priority is not supported.\n";
    exit (100);
}

@bit_widths = (4, 8, 16, 32, 64, 128);
if (! grep($_ eq $bit_width, @bit_widths)){
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

@inc_steps = (1, 2, 4, 8, 16, 32, 64, 128);
if (! grep($_ eq $inc_step, @inc_steps)){
    print "increment_step $inc_step is not supported.\n";
    exit (100);
}

@add_algos = ("rca", "cla");
if (! grep($_ eq $add_algo, @add_algos)){
    print "adder_algorithm $add_algo is not supported.\n";
    exit (100);
}

{
print <<FHM_DL_SCRIPT
hdlin_auto_save_templates = TRUE

analyze -f vhdl $instance_name.vhd

elaborate $instance_name
uniquify

$priority_const

create_clock -period 10 -waveform{0 5} clock

compile 

write -hierarchy -output $instance_name.db

report_area
report_timing

quit
FHM_DL_SCRIPT
}
exit (0);
            ]]>
          </script>
        </synthesis_script>
      </synthesis>
    </design>

    <estimation>
      <estimation_data>
        <library name="OSAKA">

          <est_type name="shape">
            <est_index name="area">
              <unit> mm2 </unit>
              <translate>
                <translate_value key="gate"> 4201.68 </translate_value>
                <translate_value key="mm2">  1 </translate_value>
              </translate>

              <parameters name="1,cla">
                <max>
                  <data bit_width="4"> 0.0264570167171227 </data>
                  <data bit_width="8"> 0.0626743407398945 </data>
                  <data bit_width="16"> 0.140313369890139 </data>
                  <data bit_width="32"> 0.274233306915329 </data>
                  <data bit_width="64"> 0.520276334228213 </data>
                  <data bit_width="128"> 1.11258463495554 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.0176998383979741 </data>
                  <data bit_width="8"> 0.0361308759829402 </data>
                  <data bit_width="16"> 0.0909358720797395 </data>
                  <data bit_width="32"> 0.185179093362655 </data>
                  <data bit_width="64"> 0.399241461272634 </data>
                  <data bit_width="128"> 0.804788703566192 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.0176998383979741 </data>
                    <data bit_width="8"> 0.0361308759829402 </data>
                    <data bit_width="16"> 0.0909358720797395 </data>
                    <data bit_width="32"> 0.185179093362655 </data>
                    <data bit_width="64"> 0.399241461272634 </data>
                    <data bit_width="128"> 0.804788703566192 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.0264570167171227 </data>
                    <data bit_width="8"> 0.0626743407398945 </data>
                    <data bit_width="16"> 0.140313369890139 </data>
                    <data bit_width="32"> 0.274233306915329 </data>
                    <data bit_width="64"> 0.520276334228213 </data>
                    <data bit_width="128"> 1.0652412211306 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.0190088386074142 </data>
                    <data bit_width="8"> 0.0395395758363321 </data>
                    <data bit_width="16"> 0.110758664867386 </data>
                    <data bit_width="32"> 0.225479644094743 </data>
                    <data bit_width="64"> 0.490380949524952 </data>
                    <data bit_width="128"> 1.11258463495554 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="1,rca">
                <max>
                  <data bit_width="4"> 0.0264570167171227 </data>
                  <data bit_width="8"> 0.0626743407398945 </data>
                  <data bit_width="16"> 0.148724225071876 </data>
                  <data bit_width="32"> 0.263377808876449 </data>
                  <data bit_width="64"> 0.523131114458978 </data>
                  <data bit_width="128"> 1.061912474534 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.0176998383979741 </data>
                  <data bit_width="8"> 0.0368281380305021 </data>
                  <data bit_width="16"> 0.0922030290264846 </data>
                  <data bit_width="32"> 0.185494707831153 </data>
                  <data bit_width="64"> 0.401874046333847 </data>
                  <data bit_width="128"> 0.805457730003237 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.0176998383979741 </data>
                    <data bit_width="8"> 0.0368281380305021 </data>
                    <data bit_width="16"> 0.0922030290264846 </data>
                    <data bit_width="32"> 0.185494707831153 </data>
                    <data bit_width="64"> 0.401874046333847 </data>
                    <data bit_width="128"> 0.805457730003237 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.0264570167171227 </data>
                    <data bit_width="8"> 0.0626743407398945 </data>
                    <data bit_width="16"> 0.148724225071876 </data>
                    <data bit_width="32"> 0.263377808876449 </data>
                    <data bit_width="64"> 0.523131114458978 </data>
                    <data bit_width="128"> 1.061912474534 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.0190088386074142 </data>
                    <data bit_width="8"> 0.0414184709449553 </data>
                    <data bit_width="16"> 0.113930286932846 </data>
                    <data bit_width="32"> 0.212106116124979 </data>
                    <data bit_width="64"> 0.448654766664763 </data>
                    <data bit_width="128"> 1.02674076393252 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="2,cla">
                <max>
                  <data bit_width="4"> 0.0233704608632737 </data>
                  <data bit_width="8"> 0.05958824993812 </data>
                  <data bit_width="16"> 0.149114243350279 </data>
                  <data bit_width="32"> 0.301589743626359 </data>
                  <data bit_width="64"> 0.537905768644923 </data>
                  <data bit_width="128"> 1.11057790431446 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.0162885743321719 </data>
                  <data bit_width="8"> 0.0345155473524876 </data>
                  <data bit_width="16"> 0.0889124069419851 </data>
                  <data bit_width="32"> 0.18265406170865 </data>
                  <data bit_width="64"> 0.396816429142629 </data>
                  <data bit_width="128"> 0.801536423763828 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.0162885743321719 </data>
                    <data bit_width="8"> 0.0345155473524876 </data>
                    <data bit_width="16"> 0.0889124069419851 </data>
                    <data bit_width="32"> 0.18265406170865 </data>
                    <data bit_width="64"> 0.396816429142629 </data>
                    <data bit_width="128"> 0.801536423763828 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.0233704608632737 </data>
                    <data bit_width="8"> 0.05958824993812 </data>
                    <data bit_width="16"> 0.149114243350279 </data>
                    <data bit_width="32"> 0.301589743626359 </data>
                    <data bit_width="64"> 0.537905768644923 </data>
                    <data bit_width="128"> 1.10241803564289 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.0173595745035319 </data>
                    <data bit_width="8"> 0.0376606769197083 </data>
                    <data bit_width="16"> 0.108709633289541 </data>
                    <data bit_width="32"> 0.22434031173245 </data>
                    <data bit_width="64"> 0.488939817406371 </data>
                    <data bit_width="128"> 1.11057790431446 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="2,rca">
                <max>
                  <data bit_width="4"> 0.0233704608632737 </data>
                  <data bit_width="8"> 0.05958824993812 </data>
                  <data bit_width="16"> 0.149624177233868 </data>
                  <data bit_width="32"> 0.240456853925097 </data>
                  <data bit_width="64"> 0.516447880371661 </data>
                  <data bit_width="128"> 1.12397051964928 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.0162885743321719 </data>
                  <data bit_width="8"> 0.0356548759067801 </data>
                  <data bit_width="16"> 0.0899243719178995 </data>
                  <data bit_width="32"> 0.183913323718132 </data>
                  <data bit_width="64"> 0.400042619618819 </data>
                  <data bit_width="128"> 0.804352040850327 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.0162885743321719 </data>
                    <data bit_width="8"> 0.0356548759067801 </data>
                    <data bit_width="16"> 0.0899243719178995 </data>
                    <data bit_width="32"> 0.183913323718132 </data>
                    <data bit_width="64"> 0.400042619618819 </data>
                    <data bit_width="128"> 0.804352040850327 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.0233704608632737 </data>
                    <data bit_width="8"> 0.05958824993812 </data>
                    <data bit_width="16"> 0.149624177233868 </data>
                    <data bit_width="32"> 0.240456853925097 </data>
                    <data bit_width="64"> 0.516447880371661 </data>
                    <data bit_width="128"> 1.12397051964928 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.0173595745035319 </data>
                    <data bit_width="8"> 0.0394205758172921 </data>
                    <data bit_width="16"> 0.11111612259858 </data>
                    <data bit_width="32"> 0.209053951752632 </data>
                    <data bit_width="64"> 0.445031076616972 </data>
                    <data bit_width="128"> 1.02309615582338 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,cla">
                <max>
                  <data bit_width="4"> 0.0182102349536376 </data>
                  <data bit_width="8"> 0.0513326381352221 </data>
                  <data bit_width="16"> 0.138919768045163 </data>
                  <data bit_width="32"> 0.230220092201215 </data>
                  <data bit_width="64"> 0.525098856409817 </data>
                  <data bit_width="128"> 1.19025492469679 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.0152003767540603 </data>
                  <data bit_width="8"> 0.0330192151710744 </data>
                  <data bit_width="16"> 0.0865147424363588 </data>
                  <data bit_width="32"> 0.180910912063746 </data>
                  <data bit_width="64"> 0.395120010805202 </data>
                  <data bit_width="128"> 0.80082550313208 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.0152003767540603 </data>
                    <data bit_width="8"> 0.0330192151710744 </data>
                    <data bit_width="16"> 0.0865147424363588 </data>
                    <data bit_width="32"> 0.180910912063746 </data>
                    <data bit_width="64"> 0.395120010805202 </data>
                    <data bit_width="128"> 0.80082550313208 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.0182102349536376 </data>
                    <data bit_width="8"> 0.0513326381352221 </data>
                    <data bit_width="16"> 0.138919768045163 </data>
                    <data bit_width="32"> 0.230220092201215 </data>
                    <data bit_width="64"> 0.525098856409817 </data>
                    <data bit_width="128"> 1.19025492469679 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.0160333768873403 </data>
                    <data bit_width="8"> 0.0355777155804345 </data>
                    <data bit_width="16"> 0.107077109156337 </data>
                    <data bit_width="32"> 0.224595046267207 </data>
                    <data bit_width="64"> 0.48862918570667 </data>
                    <data bit_width="128"> 1.10798093810095 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,rca">
                <max>
                  <data bit_width="4"> 0.0182102349536376 </data>
                  <data bit_width="8"> 0.0513326381352221 </data>
                  <data bit_width="16"> 0.139310701671712 </data>
                  <data bit_width="32"> 0.233134663039546 </data>
                  <data bit_width="64"> 0.520884408141505 </data>
                  <data bit_width="128"> 1.10281896360503 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.0152003767540603 </data>
                  <data bit_width="8"> 0.0335124143199863 </data>
                  <data bit_width="16"> 0.0868378089240494 </data>
                  <data bit_width="32"> 0.181081960073114 </data>
                  <data bit_width="64"> 0.396797632137621 </data>
                  <data bit_width="128"> 0.803652218398355 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.0152003767540603 </data>
                    <data bit_width="8"> 0.0335124143199863 </data>
                    <data bit_width="16"> 0.0868378089240494 </data>
                    <data bit_width="32"> 0.181081960073114 </data>
                    <data bit_width="64"> 0.396797632137621 </data>
                    <data bit_width="128"> 0.803652218398355 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.0182102349536376 </data>
                    <data bit_width="8"> 0.0513326381352221 </data>
                    <data bit_width="16"> 0.139310701671712 </data>
                    <data bit_width="32"> 0.233134663039546 </data>
                    <data bit_width="64"> 0.520884408141505 </data>
                    <data bit_width="128"> 1.10281896360503 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.0158293104186897 </data>
                    <data bit_width="8"> 0.036036981159917 </data>
                    <data bit_width="16"> 0.10633800003808 </data>
                    <data bit_width="32"> 0.20826325231812 </data>
                    <data bit_width="64"> 0.444171899811504 </data>
                    <data bit_width="128"> 1.02069756168961 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,cla">
                <max>
                  <data bit_width="4"> 0.0158804432988709 </data>
                  <data bit_width="8"> 0.0495811101749776 </data>
                  <data bit_width="16"> 0.128963307296129 </data>
                  <data bit_width="32"> 0.248317363054778 </data>
                  <data bit_width="64"> 0.552461655813865 </data>
                  <data bit_width="128"> 1.10366428214429 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.0137040471906476 </data>
                  <data bit_width="8"> 0.0316079527712724 </data>
                  <data bit_width="16"> 0.0698473532015765 </data>
                  <data bit_width="32"> 0.177654680984749 </data>
                  <data bit_width="64"> 0.392483213143314 </data>
                  <data bit_width="128"> 0.792857963719274 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.0137040471906476 </data>
                    <data bit_width="8"> 0.0316079527712724 </data>
                    <data bit_width="16"> 0.0698473532015765 </data>
                    <data bit_width="32"> 0.177654680984749 </data>
                    <data bit_width="64"> 0.392483213143314 </data>
                    <data bit_width="128"> 0.792857963719274 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.0158804432988709 </data>
                    <data bit_width="8"> 0.0495811101749776 </data>
                    <data bit_width="16"> 0.128963307296129 </data>
                    <data bit_width="32"> 0.248317363054778 </data>
                    <data bit_width="64"> 0.552461655813865 </data>
                    <data bit_width="128"> 1.07252346466175 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.0142395472763276 </data>
                    <data bit_width="8"> 0.0339284531425525 </data>
                    <data bit_width="16"> 0.0777957105253137 </data>
                    <data bit_width="32"> 0.220905130328821 </data>
                    <data bit_width="64"> 0.484240711334514 </data>
                    <data bit_width="128"> 1.10366428214429 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,rca">
                <max>
                  <data bit_width="4"> 0.0158804432988709 </data>
                  <data bit_width="8"> 0.0495811101749776 </data>
                  <data bit_width="16"> 0.128852674406428 </data>
                  <data bit_width="32"> 0.33660962472154 </data>
                  <data bit_width="64"> 0.52801325303212 </data>
                  <data bit_width="128"> 1.10547473248796 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.0137040471906476 </data>
                  <data bit_width="8"> 0.0324581486453038 </data>
                  <data bit_width="16"> 0.0847376518440243 </data>
                  <data bit_width="32"> 0.178998994925839 </data>
                  <data bit_width="64"> 0.394652755564441 </data>
                  <data bit_width="128"> 0.80148418680147 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.0137040471906476 </data>
                    <data bit_width="8"> 0.0324581486453038 </data>
                    <data bit_width="16"> 0.0847376518440243 </data>
                    <data bit_width="32"> 0.178998994925839 </data>
                    <data bit_width="64"> 0.394652755564441 </data>
                    <data bit_width="128"> 0.80148418680147 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.0158804432988709 </data>
                    <data bit_width="8"> 0.0495811101749776 </data>
                    <data bit_width="16"> 0.128852674406428 </data>
                    <data bit_width="32"> 0.33660962472154 </data>
                    <data bit_width="64"> 0.52801325303212 </data>
                    <data bit_width="128"> 1.10547473248796 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.0142395472763276 </data>
                    <data bit_width="8"> 0.0347447154471545 </data>
                    <data bit_width="16"> 0.103081776337084 </data>
                    <data bit_width="32"> 0.204683954751433 </data>
                    <data bit_width="64"> 0.440715117762419 </data>
                    <data bit_width="128"> 1.01619113330858 </data>
                  </priority>
                </typ>
              </parameters>
            </est_index>

            <est_index name="aspect_ratio">
              <!-- Dummy yet -->
            </est_index>

            <est_index name="height">
              <!-- Dummy yet -->
            </est_index>

            <est_index name="width">
              <!-- Dummy yet -->
            </est_index>
          </est_type>

          <est_type name="timing">
            <est_index name="delay">
              <unit> ns </unit>

              <parameters name="1,cla">
                <max>
                  <data bit_width="4"> 0.81 </data>
                  <data bit_width="8"> 0.85 </data>
                  <data bit_width="16"> 0.94 </data>
                  <data bit_width="32"> 0.94 </data>
                  <data bit_width="64"> 0.98 </data>
                  <data bit_width="128"> 1.02 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.72 </data>
                  <data bit_width="8"> 0.72 </data>
                  <data bit_width="16"> 0.83 </data>
                  <data bit_width="32"> 0.72 </data>
                  <data bit_width="64"> 0.77 </data>
                  <data bit_width="128"> 0.40 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.79 </data>
                    <data bit_width="8"> 0.84 </data>
                    <data bit_width="16"> 0.94 </data>
                    <data bit_width="32"> 0.94 </data>
                    <data bit_width="64"> 0.95 </data>
                    <data bit_width="128"> 0.96 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.72 </data>
                    <data bit_width="8"> 0.72 </data>
                    <data bit_width="16"> 0.83 </data>
                    <data bit_width="32"> 0.72 </data>
                    <data bit_width="64"> 0.77 </data>
                    <data bit_width="128"> 0.40 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.81 </data>
                    <data bit_width="8"> 0.85 </data>
                    <data bit_width="16"> 0.94 </data>
                    <data bit_width="32"> 0.94 </data>
                    <data bit_width="64"> 0.98 </data>
                    <data bit_width="128"> 1.02 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="1,rca">
                <max>
                  <data bit_width="4"> 0.81 </data>
                  <data bit_width="8"> 0.87 </data>
                  <data bit_width="16"> 0.94 </data>
                  <data bit_width="32"> 0.89 </data>
                  <data bit_width="64"> 0.90 </data>
                  <data bit_width="128"> 0.92 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.72 </data>
                  <data bit_width="8"> 0.72 </data>
                  <data bit_width="16"> 0.78 </data>
                  <data bit_width="32"> 0.77 </data>
                  <data bit_width="64"> 0.83 </data>
                  <data bit_width="128"> 0.83 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.79 </data>
                    <data bit_width="8"> 0.87 </data>
                    <data bit_width="16"> 0.94 </data>
                    <data bit_width="32"> 0.89 </data>
                    <data bit_width="64"> 0.90 </data>
                    <data bit_width="128"> 0.90 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.72 </data>
                    <data bit_width="8"> 0.72 </data>
                    <data bit_width="16"> 0.78 </data>
                    <data bit_width="32"> 0.77 </data>
                    <data bit_width="64"> 0.83 </data>
                    <data bit_width="128"> 0.83 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.81 </data>
                    <data bit_width="8"> 0.85 </data>
                    <data bit_width="16"> 0.89 </data>
                    <data bit_width="32"> 0.88 </data>
                    <data bit_width="64"> 0.90 </data>
                    <data bit_width="128"> 0.92 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="2,cla">
                <max>
                  <data bit_width="4"> 0.83 </data>
                  <data bit_width="8"> 0.85 </data>
                  <data bit_width="16"> 0.92 </data>
                  <data bit_width="32"> 0.94 </data>
                  <data bit_width="64"> 0.93 </data>
                  <data bit_width="128"> 0.97 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.72 </data>
                  <data bit_width="8"> 0.72 </data>
                  <data bit_width="16"> 0.72 </data>
                  <data bit_width="32"> 0.72 </data>
                  <data bit_width="64"> 0.72 </data>
                  <data bit_width="128"> 0.72 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.79 </data>
                    <data bit_width="8"> 0.83 </data>
                    <data bit_width="16"> 0.90 </data>
                    <data bit_width="32"> 0.94 </data>
                    <data bit_width="64"> 0.92 </data>
                    <data bit_width="128"> 0.96 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.72 </data>
                    <data bit_width="8"> 0.72 </data>
                    <data bit_width="16"> 0.72 </data>
                    <data bit_width="32"> 0.72 </data>
                    <data bit_width="64"> 0.72 </data>
                    <data bit_width="128"> 0.72 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.83 </data>
                    <data bit_width="8"> 0.85 </data>
                    <data bit_width="16"> 0.92 </data>
                    <data bit_width="32"> 0.92 </data>
                    <data bit_width="64"> 0.93 </data>
                    <data bit_width="128"> 0.97 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="2,rca">
                <max>
                  <data bit_width="4"> 0.83 </data>
                  <data bit_width="8"> 0.87 </data>
                  <data bit_width="16"> 0.94 </data>
                  <data bit_width="32"> 0.88 </data>
                  <data bit_width="64"> 0.90 </data>
                  <data bit_width="128"> 0.92 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.72 </data>
                  <data bit_width="8"> 0.72 </data>
                  <data bit_width="16"> 0.72 </data>
                  <data bit_width="32"> 0.72 </data>
                  <data bit_width="64"> 0.72 </data>
                  <data bit_width="128"> 0.72 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.79 </data>
                    <data bit_width="8"> 0.87 </data>
                    <data bit_width="16"> 0.94 </data>
                    <data bit_width="32"> 0.88 </data>
                    <data bit_width="64"> 0.89 </data>
                    <data bit_width="128"> 0.89 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.72 </data>
                    <data bit_width="8"> 0.72 </data>
                    <data bit_width="16"> 0.72 </data>
                    <data bit_width="32"> 0.72 </data>
                    <data bit_width="64"> 0.72 </data>
                    <data bit_width="128"> 0.72 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.83 </data>
                    <data bit_width="8"> 0.85 </data>
                    <data bit_width="16"> 0.89 </data>
                    <data bit_width="32"> 0.88 </data>
                    <data bit_width="64"> 0.90 </data>
                    <data bit_width="128"> 0.92 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,cla">
                <max>
                  <data bit_width="4"> 0.83 </data>
                  <data bit_width="8"> 0.81 </data>
                  <data bit_width="16"> 0.92 </data>
                  <data bit_width="32"> 0.94 </data>
                  <data bit_width="64"> 0.95 </data>
                  <data bit_width="128"> 0.99 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.72 </data>
                  <data bit_width="8"> 0.72 </data>
                  <data bit_width="16"> 0.72 </data>
                  <data bit_width="32"> 0.72 </data>
                  <data bit_width="64"> 0.72 </data>
                  <data bit_width="128"> 0.78 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.81 </data>
                    <data bit_width="8"> 0.79 </data>
                    <data bit_width="16"> 0.90 </data>
                    <data bit_width="32"> 0.94 </data>
                    <data bit_width="64"> 0.95 </data>
                    <data bit_width="128"> 0.96 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.72 </data>
                    <data bit_width="8"> 0.72 </data>
                    <data bit_width="16"> 0.72 </data>
                    <data bit_width="32"> 0.72 </data>
                    <data bit_width="64"> 0.72 </data>
                    <data bit_width="128"> 0.78 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.83 </data>
                    <data bit_width="8"> 0.81 </data>
                    <data bit_width="16"> 0.92 </data>
                    <data bit_width="32"> 0.92 </data>
                    <data bit_width="64"> 0.93 </data>
                    <data bit_width="128"> 0.99 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,rca">
                <max>
                  <data bit_width="4"> 0.83 </data>
                  <data bit_width="8"> 0.86 </data>
                  <data bit_width="16"> 0.94 </data>
                  <data bit_width="32"> 0.89 </data>
                  <data bit_width="64"> 0.90 </data>
                  <data bit_width="128"> 0.92 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.72 </data>
                  <data bit_width="8"> 0.72 </data>
                  <data bit_width="16"> 0.72 </data>
                  <data bit_width="32"> 0.72 </data>
                  <data bit_width="64"> 0.72 </data>
                  <data bit_width="128"> 0.75 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.79 </data>
                    <data bit_width="8"> 0.84 </data>
                    <data bit_width="16"> 0.94 </data>
                    <data bit_width="32"> 0.89 </data>
                    <data bit_width="64"> 0.89 </data>
                    <data bit_width="128"> 0.89 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.72 </data>
                    <data bit_width="8"> 0.72 </data>
                    <data bit_width="16"> 0.72 </data>
                    <data bit_width="32"> 0.72 </data>
                    <data bit_width="64"> 0.72 </data>
                    <data bit_width="128"> 0.75 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.83 </data>
                    <data bit_width="8"> 0.86 </data>
                    <data bit_width="16"> 0.89 </data>
                    <data bit_width="32"> 0.88 </data>
                    <data bit_width="64"> 0.90 </data>
                    <data bit_width="128"> 0.92 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,cla">
                <max>
                  <data bit_width="4"> 0.80 </data>
                  <data bit_width="8"> 0.83 </data>
                  <data bit_width="16"> 0.85 </data>
                  <data bit_width="32"> 0.94 </data>
                  <data bit_width="64"> 0.96 </data>
                  <data bit_width="128"> 0.99 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.72 </data>
                  <data bit_width="8"> 0.72 </data>
                  <data bit_width="16"> 0.81 </data>
                  <data bit_width="32"> 0.72 </data>
                  <data bit_width="64"> 0.72 </data>
                  <data bit_width="128"> 0.72 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.75 </data>
                    <data bit_width="8"> 0.79 </data>
                    <data bit_width="16"> 0.84 </data>
                    <data bit_width="32"> 0.94 </data>
                    <data bit_width="64"> 0.96 </data>
                    <data bit_width="128"> 0.93 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.72 </data>
                    <data bit_width="8"> 0.72 </data>
                    <data bit_width="16"> 0.81 </data>
                    <data bit_width="32"> 0.72 </data>
                    <data bit_width="64"> 0.72 </data>
                    <data bit_width="128"> 0.72 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.80 </data>
                    <data bit_width="8"> 0.83 </data>
                    <data bit_width="16"> 0.85 </data>
                    <data bit_width="32"> 0.94 </data>
                    <data bit_width="64"> 0.95 </data>
                    <data bit_width="128"> 0.99 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,rca">
                <max>
                  <data bit_width="4"> 0.80 </data>
                  <data bit_width="8"> 0.85 </data>
                  <data bit_width="16"> 0.94 </data>
                  <data bit_width="32"> 0.88 </data>
                  <data bit_width="64"> 0.90 </data>
                  <data bit_width="128"> 0.98 </data>
                </max>
                <min>
                  <data bit_width="4"> 0.72 </data>
                  <data bit_width="8"> 0.72 </data>
                  <data bit_width="16"> 0.79 </data>
                  <data bit_width="32"> 0.86 </data>
                  <data bit_width="64"> 0.72 </data>
                  <data bit_width="128"> 0.89 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 0.75 </data>
                    <data bit_width="8"> 0.84 </data>
                    <data bit_width="16"> 0.94 </data>
                    <data bit_width="32"> 0.88 </data>
                    <data bit_width="64"> 0.89 </data>
                    <data bit_width="128"> 0.89 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 0.72 </data>
                    <data bit_width="8"> 0.72 </data>
                    <data bit_width="16"> 0.79 </data>
                    <data bit_width="32"> 0.86 </data>
                    <data bit_width="64"> 0.72 </data>
                    <data bit_width="128"> 0.98 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 0.80 </data>
                    <data bit_width="8"> 0.85 </data>
                    <data bit_width="16"> 0.89 </data>
                    <data bit_width="32"> 0.88 </data>
                    <data bit_width="64"> 0.90 </data>
                    <data bit_width="128"> 0.92 </data>
                  </priority>
                </typ>
              </parameters>
            </est_index>

            <est_index name="delay_fullpath">
              <unit> ns </unit>

              <parameters name="1,cla">
                <max>
                  <data bit_width="4">
                    inport	 data_in	 0
                    outport	 reg1	 0.62
                    internal	 1.65
                  </data>
                  <data bit_width="8">
                    inport	 data_in	 0
                    outport	 reg1	 0.62
                    internal	 2.35
                  </data>
                  <data bit_width="16">
                    inport	 data_in	 0.67
                    outport	 reg1	 0.70
                    internal	 3.49
                  </data>
                  <data bit_width="32">
                    inport	 data_in	 0.62
                    outport	 reg1	 0.65
                    internal	 3.94
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    inport	 data_in	 0.00
                    outport	 reg1	 0.62
                    internal	 1.65
                  </data>
                  <data bit_width="8">
                    inport	 data_in	 0.00
                    outport	 reg1	 0.62
                    internal	 2.35
                  </data>
                  <data bit_width="16">
                    inport	 data_in	 0.67
                    outport	 reg1	 0.70
                    internal	 3.49
                  </data>
                  <data bit_width="32">
                    inport	 data_in	 0.62
                    outport	 reg1	 0.65
                    internal	 3.94
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      inport	 data_in	 0.24
                      outport	 reg1	 0.51
                      internal	 1.68
                    </data>
                    <data bit_width="8">
                      inport	 data_in	 0.24
                      outport	 reg1	 0.53
                      internal	 2.23
                    </data>
                    <data bit_width="16">
                      inport	 data_in	 0.31
                      outport	 reg1	 0.59
                      internal	 2.51
                    </data>
                    <data bit_width="32">
                      inport	 data_in	 0.31
                      outport	 reg1	 0.56
                      internal	 3.18
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      inport	 data_in	 0.39
                      outport	 reg1	 0.59
                      internal	 0.96
                    </data>
                    <data bit_width="8">
                      inport	 data_in	 0.64
                      outport	 reg1	 0.76
                      internal	 1.14
                    </data>
                    <data bit_width="16">
                      inport	 data_in	 0.67
                      outport	 reg1	 0.69
                      internal	 1.27
                    </data>
                    <data bit_width="32">
                      inport	 data_in	 0.58
                      outport	 reg1	 0.80
                      internal	 1.49
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      inport	 data_in	 0.00
                      outport	 reg1	 0.62
                      internal	 1.65
                    </data>
                    <data bit_width="8">
                      inport	 data_in	 0.00
                      outport	 reg1	 0.62
                      internal	 2.35
                    </data>
                    <data bit_width="16">
                      inport	 data_in	 0.67
                      outport	 reg1	 0.70
                      internal	 3.49
                    </data>
                    <data bit_width="32">
                      inport	 data_in	 0.62
                      outport	 reg1	 0.65
                      internal	 3.94
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="1,rca">
                <max>
                  <data bit_width="4">
                    inport	 data_in	 0
                    outport	 reg1	 0.62
                    internal	 1.65
                  </data>
                  <data bit_width="8">
                    inport	 data_in	 0
                    outport	 reg1	 0.62
                    internal	 1.72
                  </data>
                  <data bit_width="16">
                    inport	 data_in	 0.46
                    outport	 reg1	 0.63
                    internal	 3.96
                  </data>
                  <data bit_width="32">
                    inport	 data_in	 0.67
                    outport	 reg1	 0.62
                    internal	 6.05
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    inport	 data_in	 0.00
                    outport	 reg1	 0.62
                    internal	 1.65
                  </data>
                  <data bit_width="8">
                    inport	 data_in	 0.00
                    outport	 reg1	 0.62
                    internal	 1.72
                  </data>
                  <data bit_width="16">
                    inport	 data_in	 0.46
                    outport	 reg1	 0.63
                    internal	 3.96
                  </data>
                  <data bit_width="32">
                    inport	 data_in	 0.67
                    outport	 reg1	 0.62
                    internal	 6.05
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      inport	 data_in	 0.24
                      outport	 reg1	 0.50
                      internal	 1.68
                    </data>
                    <data bit_width="8">
                      inport	 data_in	 0.24
                      outport	 reg1	 0.53
                      internal	 1.90
                    </data>
                    <data bit_width="16">
                      inport	 data_in	 0.31
                      outport	 reg1	 0.59
                      internal	 3.25
                    </data>
                    <data bit_width="32">
                      inport	 data_in	 0.45
                      outport	 reg1	 0.59
                      internal	 4.87
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      inport	 data_in	 0.39
                      outport	 reg1	 0.59
                      internal	 0.96
                    </data>
                    <data bit_width="8">
                      inport	 data_in	 0.64
                      outport	 reg1	 0.76
                      internal	 1.14
                    </data>
                    <data bit_width="16">
                      inport	 data_in	 0.61
                      outport	 reg1	 0.82
                      internal	 1.33
                    </data>
                    <data bit_width="32">
                      inport	 data_in	 0.49
                      outport	 reg1	 0.78
                      internal	 1.61
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      inport	 data_in	 0.00
                      outport	 reg1	 0.62
                      internal	 1.65
                    </data>
                    <data bit_width="8">
                      inport	 data_in	 0.00
                      outport	 reg1	 0.62
                      internal	 1.72
                    </data>
                    <data bit_width="16">
                      inport	 data_in	 0.46
                      outport	 reg1	 0.63
                      internal	 3.96
                    </data>
                    <data bit_width="32">
                      inport	 data_in	 0.67
                      outport	 reg1	 0.62
                      internal	 6.05
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="2,cla">
                <max>
                  <data bit_width="4">
                    inport	 data_in	 0.25
                    outport	 reg1	 0.61
                    internal	 1.29
                  </data>
                  <data bit_width="8">
                    inport	 data_in	 0.25
                    outport	 reg1	 0.70
                    internal	 2.20
                  </data>
                  <data bit_width="16">
                    inport	 data_in	 0.53
                    outport	 reg1	 0.63
                    internal	 3.42
                  </data>
                  <data bit_width="32">
                    inport	 data_in	 0.60
                    outport	 reg1	 0.65
                    internal	 4.21
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    inport	 data_in	 0.25
                    outport	 reg1	 0.61
                    internal	 1.29
                  </data>
                  <data bit_width="8">
                    inport	 data_in	 0.25
                    outport	 reg1	 0.70
                    internal	 2.20
                  </data>
                  <data bit_width="16">
                    inport	 data_in	 0.53
                    outport	 reg1	 0.63
                    internal	 3.42
                  </data>
                  <data bit_width="32">
                    inport	 data_in	 0.60
                    outport	 reg1	 0.65
                    internal	 4.21
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      inport	 data_in	 0.24
                      outport	 reg1	 0.51
                      internal	 1.33
                    </data>
                    <data bit_width="8">
                      inport	 data_in	 0.24
                      outport	 reg1	 0.53
                      internal	 2.14
                    </data>
                    <data bit_width="16">
                      inport	 data_in	 0.31
                      outport	 reg1	 0.57
                      internal	 2.40
                    </data>
                    <data bit_width="32">
                      inport	 data_in	 0.31
                      outport	 reg1	 0.56
                      internal	 3.00
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      inport	 data_in	 0.48
                      outport	 reg1	 0.74
                      internal	 0.96
                    </data>
                    <data bit_width="8">
                      inport	 data_in	 0.64
                      outport	 reg1	 0.78
                      internal	 1.16
                    </data>
                    <data bit_width="16">
                      inport	 data_in	 0.40
                      outport	 reg1	 0.68
                      internal	 1.29
                    </data>
                    <data bit_width="32">
                      inport	 data_in	 0.65
                      outport	 reg1	 0.73
                      internal	 1.45
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      inport	 data_in	 0.25
                      outport	 reg1	 0.61
                      internal	 1.29
                    </data>
                    <data bit_width="8">
                      inport	 data_in	 0.25
                      outport	 reg1	 0.70
                      internal	 2.20
                    </data>
                    <data bit_width="16">
                      inport	 data_in	 0.53
                      outport	 reg1	 0.63
                      internal	 3.42
                    </data>
                    <data bit_width="32">
                      inport	 data_in	 0.60
                      outport	 reg1	 0.65
                      internal	 4.21
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="2,rca">
                <max>
                  <data bit_width="4">
                    inport	 data_in	 0.25
                    outport	 reg1	 0.61
                    internal	 1.29
                  </data>
                  <data bit_width="8">
                    inport	 data_in	 0.25
                    outport	 reg1	 0.62
                    internal	 1.64
                  </data>
                  <data bit_width="16">
                    inport	 data_in	 0.46
                    outport	 reg1	 0.63
                    internal	 3.31
                  </data>
                  <data bit_width="32">
                    inport	 data_in	 0.67
                    outport	 reg1	 0.63
                    internal	 5.32
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    inport	 data_in	 0.25
                    outport	 reg1	 0.61
                    internal	 1.29
                  </data>
                  <data bit_width="8">
                    inport	 data_in	 0.25
                    outport	 reg1	 0.62
                    internal	 1.64
                  </data>
                  <data bit_width="16">
                    inport	 data_in	 0.46
                    outport	 reg1	 0.63
                    internal	 3.31
                  </data>
                  <data bit_width="32">
                    inport	 data_in	 0.67
                    outport	 reg1	 0.63
                    internal	 5.32
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      inport	 data_in	 0.24
                      outport	 reg1	 0.50
                      internal	 1.32
                    </data>
                    <data bit_width="8">
                      inport	 data_in	 0.24
                      outport	 reg1	 0.53
                      internal	 1.70
                    </data>
                    <data bit_width="16">
                      inport	 data_in	 0.31
                      outport	 reg1	 0.59
                      internal	 3.17
                    </data>
                    <data bit_width="32">
                      inport	 data_in	 0.45
                      outport	 reg1	 0.59
                      internal	 4.95
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      inport	 data_in	 0.48
                      outport	 reg1	 0.74
                      internal	 0.96
                    </data>
                    <data bit_width="8">
                      inport	 data_in	 0.64
                      outport	 reg1	 0.78
                      internal	 1.16
                    </data>
                    <data bit_width="16">
                      inport	 data_in	 0.61
                      outport	 reg1	 0.73
                      internal	 1.23
                    </data>
                    <data bit_width="32">
                      inport	 data_in	 0.65
                      outport	 reg1	 0.65
                      internal	 1.54
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      inport	 data_in	 0.25
                      outport	 reg1	 0.61
                      internal	 1.29
                    </data>
                    <data bit_width="8">
                      inport	 data_in	 0.25
                      outport	 reg1	 0.62
                      internal	 1.64
                    </data>
                    <data bit_width="16">
                      inport	 data_in	 0.46
                      outport	 reg1	 0.63
                      internal	 3.31
                    </data>
                    <data bit_width="32">
                      inport	 data_in	 0.67
                      outport	 reg1	 0.63
                      internal	 5.32
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,cla">
                <max>
                  <data bit_width="4">
                    inport	 data_in	 0.25
                    outport	 reg1	 0.54
                    internal	 1.15
                  </data>
                  <data bit_width="8">
                    inport	 data_in	 0.25
                    outport	 reg1	 0.62
                    internal	 2.22
                  </data>
                  <data bit_width="16">
                    inport	 data_in	 0.67
                    outport	 reg1	 0.63
                    internal	 3.42
                  </data>
                  <data bit_width="32">
                    inport	 data_in	 0.62
                    outport	 reg1	 0.65
                    internal	 4.00
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    inport	 data_in	 0.25
                    outport	 reg1	 0.54
                    internal	 1.15
                  </data>
                  <data bit_width="8">
                    inport	 data_in	 0.25
                    outport	 reg1	 0.62
                    internal	 2.22
                  </data>
                  <data bit_width="16">
                    inport	 data_in	 0.67
                    outport	 reg1	 0.63
                    internal	 3.42
                  </data>
                  <data bit_width="32">
                    inport	 data_in	 0.62
                    outport	 reg1	 0.65
                    internal	 4.00
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      inport	 data_in	 0.24
                      outport	 reg1	 0.51
                      internal	 1.32
                    </data>
                    <data bit_width="8">
                      inport	 data_in	 0.24
                      outport	 reg1	 0.51
                      internal	 2.05
                    </data>
                    <data bit_width="16">
                      inport	 data_in	 0.31
                      outport	 reg1	 0.58
                      internal	 2.37
                    </data>
                    <data bit_width="32">
                      inport	 data_in	 0.35
                      outport	 reg1	 0.58
                      internal	 3.12
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      inport	 data_in	 0.50
                      outport	 reg1	 0.48
                      internal	 0.81
                    </data>
                    <data bit_width="8">
                      inport	 data_in	 0.40
                      outport	 reg1	 0.64
                      internal	 1.15
                    </data>
                    <data bit_width="16">
                      inport	 data_in	 0.52
                      outport	 reg1	 0.72
                      internal	 1.29
                    </data>
                    <data bit_width="32">
                      inport	 data_in	 0.52
                      outport	 reg1	 0.71
                      internal	 1.51
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      inport	 data_in	 0.25
                      outport	 reg1	 0.54
                      internal	 1.15
                    </data>
                    <data bit_width="8">
                      inport	 data_in	 0.25
                      outport	 reg1	 0.62
                      internal	 2.22
                    </data>
                    <data bit_width="16">
                      inport	 data_in	 0.67
                      outport	 reg1	 0.63
                      internal	 3.42
                    </data>
                    <data bit_width="32">
                      inport	 data_in	 0.62
                      outport	 reg1	 0.65
                      internal	 4.00
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,rca">
                <max>
                  <data bit_width="4">
                    inport	 data_in	 0.25
                    outport	 reg1	 0.54
                    internal	 1.15
                  </data>
                  <data bit_width="8">
                    inport	 data_in	 0.25
                    outport	 reg1	 0.62
                    internal	 1.70
                  </data>
                  <data bit_width="16">
                    inport	 data_in	 0.53
                    outport	 reg1	 0.63
                    internal	 3.28
                  </data>
                  <data bit_width="32">
                    inport	 data_in	 0.67
                    outport	 reg1	 0.62
                    internal	 6.01
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    inport	 data_in	 0.25
                    outport	 reg1	 0.54
                    internal	 1.15
                  </data>
                  <data bit_width="8">
                    inport	 data_in	 0.25
                    outport	 reg1	 0.62
                    internal	 1.70
                  </data>
                  <data bit_width="16">
                    inport	 data_in	 0.53
                    outport	 reg1	 0.63
                    internal	 3.28
                  </data>
                  <data bit_width="32">
                    inport	 data_in	 0.67
                    outport	 reg1	 0.62
                    internal	 6.01
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      inport	 data_in	 0.24
                      outport	 reg1	 0.50
                      internal	 1.31
                    </data>
                    <data bit_width="8">
                      inport	 data_in	 0.24
                      outport	 reg1	 0.53
                      internal	 1.73
                    </data>
                    <data bit_width="16">
                      inport	 data_in	 0.31
                      outport	 reg1	 0.59
                      internal	 2.77
                    </data>
                    <data bit_width="32">
                      inport	 data_in	 0.45
                      outport	 reg1	 0.59
                      internal	 4.79
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      inport	 data_in	 0.50
                      outport	 reg1	 0.48
                      internal	 0.81
                    </data>
                    <data bit_width="8">
                      inport	 data_in	 0.40
                      outport	 reg1	 0.64
                      internal	 1.15
                    </data>
                    <data bit_width="16">
                      inport	 data_in	 0.63
                      outport	 reg1	 0.68
                      internal	 1.24
                    </data>
                    <data bit_width="32">
                      inport	 data_in	 0.40
                      outport	 reg1	 0.79
                      internal	 1.52
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      inport	 data_in	 0.25
                      outport	 reg1	 0.54
                      internal	 1.15
                    </data>
                    <data bit_width="8">
                      inport	 data_in	 0.25
                      outport	 reg1	 0.62
                      internal	 1.70
                    </data>
                    <data bit_width="16">
                      inport	 data_in	 0.53
                      outport	 reg1	 0.63
                      internal	 3.28
                    </data>
                    <data bit_width="32">
                      inport	 data_in	 0.67
                      outport	 reg1	 0.62
                      internal	 6.01
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,cla">
                <max>
                  <data bit_width="4">
                    inport	 data_in	 0.25
                    outport	 reg1	 0.50
                    internal	 0.76
                  </data>
                  <data bit_width="8">
                    inport	 data_in	 0.25
                    outport	 reg1	 0.62
                    internal	 1.90
                  </data>
                  <data bit_width="16">
                    inport	 data_in	 0.25
                    outport	 reg1	 0.63
                    internal	 2.63
                  </data>
                  <data bit_width="32">
                    inport	 data_in	 0.56
                    outport	 reg1	 0.65
                    internal	 4.33
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    inport	 data_in	 0.25
                    outport	 reg1	 0.50
                    internal	 0.76
                  </data>
                  <data bit_width="8">
                    inport	 data_in	 0.25
                    outport	 reg1	 0.62
                    internal	 1.90
                  </data>
                  <data bit_width="16">
                    inport	 data_in	 0.25
                    outport	 reg1	 0.63
                    internal	 2.63
                  </data>
                  <data bit_width="32">
                    inport	 data_in	 0.56
                    outport	 reg1	 0.65
                    internal	 4.33
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      inport	 data_in	 0.24
                      outport	 reg1	 0.47
                      internal	 0.90
                    </data>
                    <data bit_width="8">
                      inport	 data_in	 0.24
                      outport	 reg1	 0.51
                      internal	 1.89
                    </data>
                    <data bit_width="16">
                      inport	 data_in	 0.24
                      outport	 reg1	 0.53
                      internal	 2.41
                    </data>
                    <data bit_width="32">
                      inport	 data_in	 0.35
                      outport	 reg1	 0.56
                      internal	 3.00
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      inport	 data_in	 0.39
                      outport	 reg1	 0.45
                      internal	 0.74
                    </data>
                    <data bit_width="8">
                      inport	 data_in	 0.40
                      outport	 reg1	 0.66
                      internal	 1.08
                    </data>
                    <data bit_width="16">
                      inport	 data_in	 0.74
                      outport	 reg1	 0.78
                      internal	 1.26
                    </data>
                    <data bit_width="32">
                      inport	 data_in	 0.63
                      outport	 reg1	 0.72
                      internal	 1.46
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      inport	 data_in	 0.25
                      outport	 reg1	 0.50
                      internal	 0.76
                    </data>
                    <data bit_width="8">
                      inport	 data_in	 0.25
                      outport	 reg1	 0.62
                      internal	 1.90
                    </data>
                    <data bit_width="16">
                      inport	 data_in	 0.25
                      outport	 reg1	 0.63
                      internal	 2.63
                    </data>
                    <data bit_width="32">
                      inport	 data_in	 0.56
                      outport	 reg1	 0.65
                      internal	 4.33
                    </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,rca">
                <max>
                  <data bit_width="4">
                    inport	 data_in	 0.25
                    outport	 reg1	 0.50
                    internal	 0.76
                  </data>
                  <data bit_width="8">
                    inport	 data_in	 0.25
                    outport	 reg1	 0.62
                    internal	 1.40
                  </data>
                  <data bit_width="16">
                    inport	 data_in	 0.46
                    outport	 reg1	 0.63
                    internal	 3.06
                  </data>
                  <data bit_width="32">
                    inport	 data_in	 0.67
                    outport	 reg1	 0.62
                    internal	 5.21
                  </data>
                </max>
                <min>
                  <data bit_width="4">
                    inport	 data_in	 0.25
                    outport	 reg1	 0.50
                    internal	 0.76
                  </data>
                  <data bit_width="8">
                    inport	 data_in	 0.25
                    outport	 reg1	 0.62
                    internal	 1.40
                  </data>
                  <data bit_width="16">
                    inport	 data_in	 0.46
                    outport	 reg1	 0.63
                    internal	 3.06
                  </data>
                  <data bit_width="32">
                    inport	 data_in	 0.67
                    outport	 reg1	 0.62
                    internal	 5.21
                  </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4">
                      inport	 data_in	 0.24
                      outport	 reg1	 0.47
                      internal	 0.90
                    </data>
                    <data bit_width="8">
                      inport	 data_in	 0.24
                      outport	 reg1	 0.53
                      internal	 1.47
                    </data>
                    <data bit_width="16">
                      inport	 data_in	 0.31
                      outport	 reg1	 0.59
                      internal	 2.54
                    </data>
                    <data bit_width="32">
                      inport	 data_in	 0.45
                      outport	 reg1	 0.59
                      internal	 4.82
                    </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4">
                      inport	 data_in	 0.39
                      outport	 reg1	 0.45
                      internal	 0.74
                    </data>
                    <data bit_width="8">
                      inport	 data_in	 0.40
                      outport	 reg1	 0.66
                      internal	 1.08
                    </data>
                    <data bit_width="16">
                      inport	 data_in	 0.40
                      outport	 reg1	 0.64
                      internal	 1.32
                    </data>
                    <data bit_width="32">
                      inport	 data_in	 0.42
                      outport	 reg1	 0.66
                      internal	 1.45
                    </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4">
                      inport	 data_in	 0.25
                      outport	 reg1	 0.50
                      internal	 0.76
                    </data>
                    <data bit_width="8">
                      inport	 data_in	 0.25
                      outport	 reg1	 0.62
                      internal	 1.40
                    </data>
                    <data bit_width="16">
                      inport	 data_in	 0.46
                      outport	 reg1	 0.63
                      internal	 3.06
                    </data>
                    <data bit_width="32">
                      inport	 data_in	 0.67
                      outport	 reg1	 0.62
                      internal	 5.21
                    </data>
                  </priority>
                </typ>
              </parameters>

            </est_index>
          </est_type>

          <est_type name="power">
            <est_index name="static_power">
              <unit> mW </unit>
              <parameters name="1,cla">
                <max>
                  <data bit_width="4"> 6.5419 </data>
                  <data bit_width="8"> 12.0029 </data>
                  <data bit_width="16"> 21.2669 </data>
                  <data bit_width="32"> 37.2414 </data>
                  <data bit_width="64"> 86.6343 </data>
                  <data bit_width="128"> 177.5117 </data>
                </max>
                <min>
                  <data bit_width="4"> 2.6264 </data>
                  <data bit_width="8"> 4.8604 </data>
                  <data bit_width="16"> 14.7441 </data>
                  <data bit_width="32"> 28.7219 </data>
                  <data bit_width="64"> 60.5042 </data>
                  <data bit_width="128"> 125.6909 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 2.6562 </data>
                    <data bit_width="8"> 4.9641 </data>
                    <data bit_width="16"> 17.9595 </data>
                    <data bit_width="32"> 34.9262 </data>
                    <data bit_width="64"> 72.5482 </data>
                    <data bit_width="128"> 145.3237 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 6.5419 </data>
                    <data bit_width="8"> 12.0029 </data>
                    <data bit_width="16"> 21.2669 </data>
                    <data bit_width="32"> 37.2414 </data>
                    <data bit_width="64"> 86.6343 </data>
                    <data bit_width="128"> 177.5117 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.6264 </data>
                    <data bit_width="8"> 4.8604 </data>
                    <data bit_width="16"> 14.7441 </data>
                    <data bit_width="32"> 28.7219 </data>
                    <data bit_width="64"> 60.5042 </data>
                    <data bit_width="128"> 125.6909 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="1,rca">
                <max>
                  <data bit_width="4"> 6.5419 </data>
                  <data bit_width="8"> 12.0029 </data>
                  <data bit_width="16"> 21.8806 </data>
                  <data bit_width="32"> 42.9463 </data>
                  <data bit_width="64"> 93.4415 </data>
                  <data bit_width="128"> 183.8124 </data>
                </max>
                <min>
                  <data bit_width="4"> 2.6264 </data>
                  <data bit_width="8"> 5.0845 </data>
                  <data bit_width="16"> 15.2584 </data>
                  <data bit_width="32"> 26.4587 </data>
                  <data bit_width="64"> 55.4941 </data>
                  <data bit_width="128"> 115.6972 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 2.7111 </data>
                    <data bit_width="8"> 5.3207 </data>
                    <data bit_width="16"> 18.7107 </data>
                    <data bit_width="32"> 34.0924 </data>
                    <data bit_width="64"> 71.0611 </data>
                    <data bit_width="128"> 140.8535 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 6.5419 </data>
                    <data bit_width="8"> 12.0029 </data>
                    <data bit_width="16"> 21.8806 </data>
                    <data bit_width="32"> 42.9463 </data>
                    <data bit_width="64"> 93.4415 </data>
                    <data bit_width="128"> 183.8124 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.6264 </data>
                    <data bit_width="8"> 5.0845 </data>
                    <data bit_width="16"> 15.2584 </data>
                    <data bit_width="32"> 26.4587 </data>
                    <data bit_width="64"> 55.4941 </data>
                    <data bit_width="128"> 115.6972 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="2,cla">
                <max>
                  <data bit_width="4"> 5.6400 </data>
                  <data bit_width="8"> 12.2234 </data>
                  <data bit_width="16"> 24.6462 </data>
                  <data bit_width="32"> 36.5785 </data>
                  <data bit_width="64"> 87.4109 </data>
                  <data bit_width="128"> 175.4362 </data>
                </max>
                <min>
                  <data bit_width="4"> 2.6054 </data>
                  <data bit_width="8"> 4.8513 </data>
                  <data bit_width="16"> 14.6249 </data>
                  <data bit_width="32"> 28.7226 </data>
                  <data bit_width="64"> 60.6245 </data>
                  <data bit_width="128"> 125.7907 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 2.6352 </data>
                    <data bit_width="8"> 4.9308 </data>
                    <data bit_width="16"> 17.8307 </data>
                    <data bit_width="32"> 34.6668 </data>
                    <data bit_width="64"> 72.5640 </data>
                    <data bit_width="128"> 145.5789 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 5.6400 </data>
                    <data bit_width="8"> 12.2234 </data>
                    <data bit_width="16"> 24.6462 </data>
                    <data bit_width="32"> 36.5785 </data>
                    <data bit_width="64"> 87.4109 </data>
                    <data bit_width="128"> 175.4362 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.6054 </data>
                    <data bit_width="8"> 4.8513 </data>
                    <data bit_width="16"> 14.6249 </data>
                    <data bit_width="32"> 28.7226 </data>
                    <data bit_width="64"> 60.6245 </data>
                    <data bit_width="128"> 125.7907 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="2,rca">
                <max>
                  <data bit_width="4"> 5.6400 </data>
                  <data bit_width="8"> 12.2234 </data>
                  <data bit_width="16"> 25.7595 </data>
                  <data bit_width="32"> 38.7740 </data>
                  <data bit_width="64"> 84.3583 </data>
                  <data bit_width="128"> 175.8871 </data>
                </max>
                <min>
                  <data bit_width="4"> 2.6054 </data>
                  <data bit_width="8"> 5.0736 </data>
                  <data bit_width="16"> 14.9732 </data>
                  <data bit_width="32"> 26.1478 </data>
                  <data bit_width="64"> 55.1800 </data>
                  <data bit_width="128"> 115.3530 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 2.6877 </data>
                    <data bit_width="8"> 5.3064 </data>
                    <data bit_width="16"> 18.3586 </data>
                    <data bit_width="32"> 33.9577 </data>
                    <data bit_width="64"> 70.7527 </data>
                    <data bit_width="128"> 140.5731 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 5.6400 </data>
                    <data bit_width="8"> 12.2234 </data>
                    <data bit_width="16"> 25.7595 </data>
                    <data bit_width="32"> 38.7740 </data>
                    <data bit_width="64"> 84.3583 </data>
                    <data bit_width="128"> 175.8871 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.6054 </data>
                    <data bit_width="8"> 5.0736 </data>
                    <data bit_width="16"> 14.9732 </data>
                    <data bit_width="32"> 26.1478 </data>
                    <data bit_width="64"> 55.1800 </data>
                    <data bit_width="128"> 115.3530 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,cla">
                <max>
                  <data bit_width="4"> 3.3533 </data>
                  <data bit_width="8"> 11.5554 </data>
                  <data bit_width="16"> 23.6486 </data>
                  <data bit_width="32"> 36.2137 </data>
                  <data bit_width="64"> 85.1035 </data>
                  <data bit_width="128"> 193.9539 </data>
                </max>
                <min>
                  <data bit_width="4"> 2.5815 </data>
                  <data bit_width="8"> 4.7957 </data>
                  <data bit_width="16"> 14.6119 </data>
                  <data bit_width="32"> 28.8241 </data>
                  <data bit_width="64"> 60.7057 </data>
                  <data bit_width="128"> 125.8569 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 2.6760 </data>
                    <data bit_width="8"> 4.8925 </data>
                    <data bit_width="16"> 17.5007 </data>
                    <data bit_width="32"> 34.4408 </data>
                    <data bit_width="64"> 72.4146 </data>
                    <data bit_width="128"> 145.2976 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 3.3533 </data>
                    <data bit_width="8"> 11.5554 </data>
                    <data bit_width="16"> 23.6486 </data>
                    <data bit_width="32"> 36.2137 </data>
                    <data bit_width="64"> 85.1035 </data>
                    <data bit_width="128"> 193.9539 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.5815 </data>
                    <data bit_width="8"> 4.7957 </data>
                    <data bit_width="16"> 14.6119 </data>
                    <data bit_width="32"> 28.8241 </data>
                    <data bit_width="64"> 60.7057 </data>
                    <data bit_width="128"> 125.8569 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="4,rca">
                <max>
                  <data bit_width="4"> 3.3533 </data>
                  <data bit_width="8"> 11.5582 </data>
                  <data bit_width="16"> 22.5669 </data>
                  <data bit_width="32"> 40.1529 </data>
                  <data bit_width="64"> 84.1711 </data>
                  <data bit_width="128"> 165.2754 </data>
                </max>
                <min>
                  <data bit_width="4"> 2.5691 </data>
                  <data bit_width="8"> 5.0038 </data>
                  <data bit_width="16"> 14.4818 </data>
                  <data bit_width="32"> 26.3631 </data>
                  <data bit_width="64"> 55.4004 </data>
                  <data bit_width="128"> 115.5681 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 2.7225 </data>
                    <data bit_width="8"> 5.1848 </data>
                    <data bit_width="16"> 17.4798 </data>
                    <data bit_width="32"> 33.5146 </data>
                    <data bit_width="64"> 70.4873 </data>
                    <data bit_width="128"> 141.4755 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 3.3533 </data>
                    <data bit_width="8"> 11.5582 </data>
                    <data bit_width="16"> 22.5669 </data>
                    <data bit_width="32"> 40.1529 </data>
                    <data bit_width="64"> 84.1711 </data>
                    <data bit_width="128"> 165.2754 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.5691 </data>
                    <data bit_width="8"> 5.0038 </data>
                    <data bit_width="16"> 14.4818 </data>
                    <data bit_width="32"> 26.3631 </data>
                    <data bit_width="64"> 55.4004 </data>
                    <data bit_width="128"> 115.5681 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,cla">
                <max>
                  <data bit_width="4"> 2.4957 </data>
                  <data bit_width="8"> 10.4327 </data>
                  <data bit_width="16"> 21.9373 </data>
                  <data bit_width="32"> 40.4296 </data>
                  <data bit_width="64"> 83.5071 </data>
                  <data bit_width="128"> 167.5561 </data>
                </max>
                <min>
                  <data bit_width="4"> 2.3136 </data>
                  <data bit_width="8"> 4.7784 </data>
                  <data bit_width="16"> 9.1780 </data>
                  <data bit_width="32"> 28.4238 </data>
                  <data bit_width="64"> 60.3914 </data>
                  <data bit_width="128"> 125.5271 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 2.4957 </data>
                    <data bit_width="8"> 4.8746 </data>
                    <data bit_width="16"> 9.3833 </data>
                    <data bit_width="32"> 34.1179 </data>
                    <data bit_width="64"> 71.9521 </data>
                    <data bit_width="128"> 144.3477 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 2.3136 </data>
                    <data bit_width="8"> 10.4327 </data>
                    <data bit_width="16"> 21.9373 </data>
                    <data bit_width="32"> 40.4296 </data>
                    <data bit_width="64"> 83.5071 </data>
                    <data bit_width="128"> 167.5561 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.4364 </data>
                    <data bit_width="8"> 4.7784 </data>
                    <data bit_width="16"> 9.1780 </data>
                    <data bit_width="32"> 28.4238 </data>
                    <data bit_width="64"> 60.3914 </data>
                    <data bit_width="128"> 125.5271 </data>
                  </priority>
                </typ>
              </parameters>

              <parameters name="8,rca">
                <max>
                  <data bit_width="4"> 2.4957 </data>
                  <data bit_width="8"> 10.4327 </data>
                  <data bit_width="16"> 21.3338 </data>
                  <data bit_width="32"> 43.1621 </data>
                  <data bit_width="64"> 82.7667 </data>
                  <data bit_width="128"> 183.6311 </data>
                </max>
                <min>
                  <data bit_width="4"> 2.3136 </data>
                  <data bit_width="8"> 4.9886 </data>
                  <data bit_width="16"> 14.1877 </data>
                  <data bit_width="32"> 25.9870 </data>
                  <data bit_width="64"> 55.0099 </data>
                  <data bit_width="128"> 115.0796 </data>
                </min>
                <typ>
                  <priority name="area">
                    <data bit_width="4"> 2.4957 </data>
                    <data bit_width="8"> 5.1804 </data>
                    <data bit_width="16"> 16.9646 </data>
                    <data bit_width="32"> 33.2300 </data>
                    <data bit_width="64"> 69.9931 </data>
                    <data bit_width="128"> 141.0128 </data>
                  </priority>
                  <priority name="delay">
                    <data bit_width="4"> 2.3136 </data>
                    <data bit_width="8"> 10.4327 </data>
                    <data bit_width="16"> 21.3338 </data>
                    <data bit_width="32"> 43.1621 </data>
                    <data bit_width="64"> 82.7667 </data>
                    <data bit_width="128"> 183.6311 </data>
                  </priority>
                  <priority name="power">
                    <data bit_width="4"> 2.4364 </data>
                    <data bit_width="8"> 4.9886 </data>
                    <data bit_width="16"> 14.1877 </data>
                    <data bit_width="32"> 25.9870 </data>
                    <data bit_width="64"> 55.0099 </data>
                    <data bit_width="128"> 115.0796 </data>
                  </priority>
                </typ>
              </parameters>
            </est_index>
          </est_type>

          <est_type name="function_cycle">
            <unit> cycle </unit>

            <est_index name="cycle">
              <parameters name="1,cla">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="inc">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                 <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="1,rca">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="inc">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                 <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="2,cla">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="inc">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                 <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="2,rca">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="inc">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                 <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="4,cla">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="inc">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                 <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="4,rca">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="inc">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                 <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="8,cla">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="inc">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                 <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="8,rca">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="inc">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                 <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
            </est_index>

            <est_index name="latency">
              <parameters name="1,cla">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="inc">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                 <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="1,rca">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="inc">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                 <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="2,cla">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="inc">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                 <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="2,rca">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="inc">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                 <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="4,cla">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="inc">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                 <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="4,rca">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="inc">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                 <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="8,cla">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="inc">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                 <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="8,rca">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="inc">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                 <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
            </est_index>

            <est_index name="throughput">
              <parameters name="1,cla">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="inc">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                 <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="1,rca">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="inc">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                 <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="2,cla">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="inc">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                 <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="2,rca">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="inc">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                 <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="4,cla">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="inc">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                 <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="4,rca">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="inc">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                 <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="8,cla">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="inc">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                 <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>

              <parameters name="8,rca">
                <function name="nop">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="reset">
                  <priority name="area"><data bit_width="0">0</data></priority>
                  <priority name="delay"><data bit_width="0">0</data></priority>
                  <priority name="power"><data bit_width="0">0</data></priority>
                </function>
                <function name="inc">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                 <function name="write">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
                <function name="read">
                  <priority name="area"><data bit_width="0">1</data></priority>
                  <priority name="delay"><data bit_width="0">1</data></priority>
                  <priority name="power"><data bit_width="0">1</data></priority>
                </function>
              </parameters>
            </est_index>

          </est_type>

          <est_type name="function_power">
            <!-- Dummy yet -->
          </est_type>
        </library>
      </estimation_data>

      <estimation_method>
         
        <est_type name="shape">

          <est_index name="area">

            <parameters name="1,cla">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for pcu(1,cla) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="1,rca">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for pcu(1,rca) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="2,cla">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for pcu(2,cla) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="2,rca">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for pcu(2,rca) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,cla">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for pcu(4,cla) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,rca">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for pcu(4,rca) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="8,cla">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for pcu(8,cla) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="8,rca">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of area for pcu(8,rca) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 4);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

          </est_index>

           <est_index name="aspect_ratio">

             <!-- Dummy yet -->

           </est_index>
		
           <est_index name="height">

             <!-- Dummy yet -->

           </est_index>
		
           <est_index name="width">

             <!-- Dummy yet -->

           </est_index>
		
        </est_type>

        <est_type name="timing">

          <est_index name="delay">

            <parameters name="1,cla">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for pcu(1,cla) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="1,rca">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for pcu(1,rca) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="2,cla">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for pcu(2,cla) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="2,rca">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for pcu(2,rca) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,cla">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for pcu(4,cla) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,rca">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for pcu(4,rca) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="8,cla">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for pcu(8,cla) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="8,rca">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay for pcu(8,rca) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 2);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

          </est_index>

          <est_index name="delay_fullpath">

            <parameters name="1,cla">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for pcu(1,cla) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="1,rca">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for pcu(1,rca) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="2,cla">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for pcu(2,cla) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="2,rca">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for pcu(2,rca) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="4,cla">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for pcu(4,cla) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="4,rca">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for pcu(4,rca) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="8,cla">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for pcu(8,cla) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

            <parameters name="8,rca">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of delay_fullpath for pcu(8,rca) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$Round = 1;

$n = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>/ ) {
	$bit_width = $1;
	$bit[$n]   = $bit_width;
	$n++;
	$_ = <TMP>;
	$i = 0;
	while (! /\<\s*\/data\s*\>/ ) {
	    if ( /path\s+(\w+)\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "path\t $1\t $2\t ";
		$delay{$bit_width}[$i] = $3; 
		$i++;
	    }
	    if ( /inport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "inport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /outport\s+(\w+)\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "outport\t $1\t ";
		$delay{$bit_width}[$i] = $2;
		$i++;
	    }
	    if ( /internal\s+(\d+\.?\d+)/ ) {
		$line{$bit_width}[$i]  = "internal\t ";
		$delay{$bit_width}[$i] = $1;
		$i++;
	    }
	    $_ = <TMP>;
	}
    }
}
close(TMP);
$bit_width = $ARGV[1];
$line_num = $i;
for ($k = 0; $k < $line_num; $k++) {
    for ($j = 0; $j < $n; $j++) {
	if ($bit_width == $bit[$j]) {
	    $ret_data = $delay{$bit_width}[$k];
	    $ret_data = &data_round($ret_data, $Round);
	    print "$line{$bit_width}[$k] $ret_data\n";
	    goto NEXT;
	}
    }
    if ($bit_width < $bit[0]) {
	if ( $bit[1] - $bit[0] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[0]}[$k] - (($delay{$bit[1]}[$k] - $delay{$bit[0]}[$k]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
    }
    elsif ($bit[$n-1] < $bit_width) {
	if ( $bit[$n-1] - $bit[$n-2] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$n-1]}[$k] + (($delay{$bit[$n-1]}[$k] - $delay{$bit[$n-2]}[$k]) / ($bit[$n-1] - $bit[$n-2])) * ($bit_width - $bit[$n-1]);
    }
    else {
	$j = 0;
	while ($bit[$j] < $bit_width) {
	    $j++;
	}
	if ( $bit[$j] - $bit[$j-1] ) {
	    exit(100);
	}
	$ret_data = $delay{$bit[$j-1]}[$k] + (($delay{$bit[$j]}[$k] - $delay{$bit[$j-1]}[$k]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
    }
    $ret_data = &data_round($ret_data, $Round);
    print "$line{$bit[0]}[$k] $ret_data\n";
  NEXT:
}

exit(0);

sub data_round{
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}

            </parameters>

          </est_index>

        </est_type>

        <est_type name="power">

          <est_index name="static_power">

            <parameters name="1,cla">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for pcu(1,cla) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="1,rca">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for pcu(1,rca) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="2,cla">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for pcu(2,cla) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="2,rca">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for pcu(2,rca) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,cla">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for pcu(4,cla) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="4,rca">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for pcu(4,rca) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="8,cla">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for pcu(8,cla) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

            <parameters name="8,rca">
               <script>
                 <![CDATA[
#!/usr/bin/perl
# -------------------------------------------------------------------#
# Estimation method of power for pcu(8,rca) .
#
# Author : PEAS Project
# Date   : 2001/12
# -------------------------------------------------------------------#

if (! open(TMP, "<$ARGV[4]")) {
    print STDOUT ("Data file '$ARGV[4]' not found.\n");
    exit(100);
}

$i = 0;
while (<TMP>) {
    if ( /\<\s*data\s+bit\_width\=\"(\d+)\"\s*\>\s*(\d+\.?\d+)\s*\<\s*\/data\s*\>/ ) {
	$bit[$i]  = $1;
	$data[$i] = $2;
	$i++;
    }
}
close(TMP);
$bit_width = $ARGV[1];
for ($j = 0; $j < $i; $j++) {
    if ($bit_width == $bit[$j]) {
	$ret_data = $data[$j];
	exit(0);
    }
}
if ($bit_width < $bit[0]) {
    if ($bit[1] == $bit[0]) {
	exit(100);
    }    
    $ret_data = $data[0] - (($data[1] - $data[0]) / ($bit[1] - $bit[0])) * ($bit[0] - $bit_width);
}
elsif ($bit[$i-1] < $bit_width) {
    if ($bit[$i-1] == $bit[$i-2]) {
	exit(100);
    }
    $ret_data = $data[$i-1] + (($data[$i-1] - $data[$i-2]) / ($bit[$i-1] - $bit[$i-2])) * ($bit_width - $bit[$i-1]);
}
else {
    $j = 0;
    while ($bit[$j] < $bit_width) {
	$j++;
    }
    if ($bit[$j] == $bit[$j-1]) {
	exit(100);
    }
    $ret_data = $data[$j-1] + (($data[$j] - $data[$j-1]) / ($bit[$j] - $bit[$j-1])) * ($bit_width - $bit[$j-1]);
}

$ret_data = &data_round($ret_data, 1);

print "$ret_data\n";
exit(0);
sub data_round {
    my ( $input_data, $decimals ) = @_;
    my ( $format, $magic, $output_data );

    $format = '%.' . $decimals . 'f';
    $magic = ($input_data > 0) ? 0.5 : -0.5;    
    $output_data = sprintf($format, int(($input_data * (10 ** $decimals)) + $magic) / (10 ** $decimals));
    return($output_data);
}
                ]]>
              </script>
            </parameters>

          </est_index>

        </est_type>

        <est_type name="function_cycle">
          <est_index name="cycle">
            <parameters name="1,cla">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>
            <parameters name="1,rca">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="2,cla">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="2,rca">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="4,cla">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="4,rca">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="8,cla">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="8,rca">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>
          </est_index>

          <est_index name="latency">
            <parameters name="1,cla">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>
            <parameters name="1,rca">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="2,cla">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="2,rca">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="4,cla">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="4,rca">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="8,cla">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="8,rca">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>
          </est_index>

          <est_index name="throughput">
            <parameters name="1,cla">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>
            <parameters name="1,rca">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="2,cla">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="2,rca">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="4,cla">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="4,rca">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="8,cla">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>

            <parameters name="8,rca">
              <script>
                <![CDATA[
#!/usr/bin/perl
if(!open(TMP,"<$ARGV[3]")){
    exit(100);
}
$tmp = <TMP>;
$tmp =~ s/<data bit_width="0">//;
$tmp =~ s/<\/data>//;
print "$tmp";
exit(0);
                ]]>
              </script>
            </parameters>
          </est_index>

        </est_type>

        <est_type name="function_power">

        </est_type>

    
      </estimation_method>

    </estimation>

  </model>
</FHM>
