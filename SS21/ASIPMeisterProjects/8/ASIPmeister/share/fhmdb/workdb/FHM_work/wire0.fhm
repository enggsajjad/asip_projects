<?xml version="1.0" encoding="Shift_JIS" ?>
<FHM>
  <model_name> wire </model_name>

  <model>
    <design_level> behavior </design_level>
    <version> 1.0 </version>
    <author> <![CDATA[ Sasaki Toshiyuki ]]> </author>
    <affiliation> <![CDATA[ Osaka Univ. ]]> </affiliation>
    <model_info> <![CDATA[ (c)2001,PEAS3-Lite Project ]]> </model_info>

    <parameter>
      <parameter_value key="bit_width">
        <value> 1 </value>
        <value> 2 </value>
        <value> 3 </value>
        <value> 4 </value>
        <value> 5 </value>
        <value> 6 </value>
        <value> 7 </value>
        <value> 8 </value>
        <value> 9 </value>
        <value> 10 </value>
        <value> 11 </value>
        <value> 12 </value>
        <value> 13 </value>
        <value> 14 </value>
        <value> 15 </value>
        <value> 16 </value>
        <value> 17 </value>
        <value> 18 </value>
        <value> 19 </value>
        <value> 20 </value>
        <value> 21 </value>
        <value> 22 </value>
        <value> 23 </value>
        <value> 24 </value>
        <value> 25 </value>
        <value> 26 </value>
        <value> 27 </value>
        <value> 28 </value>
        <value> 29 </value>
        <value> 30 </value>
        <value> 31 </value>
        <value> 32 </value>
        <value> 33 </value>
        <value> 34 </value>
        <value> 35 </value>
        <value> 36 </value>
        <value> 37 </value>
        <value> 38 </value>
        <value> 39 </value>
        <value> 40 </value>
        <value> 41 </value>
        <value> 42 </value>
        <value> 43 </value>
        <value> 44 </value>
        <value> 45 </value>
        <value> 46 </value>
        <value> 47 </value>
        <value> 48 </value>
        <value> 49 </value>
        <value> 50 </value>
        <value> 51 </value>
        <value> 52 </value>
        <value> 53 </value>
        <value> 54 </value>
        <value> 55 </value>
        <value> 56 </value>
        <value> 57 </value>
        <value> 58 </value>
        <value> 59 </value>
        <value> 60 </value>
        <value> 61 </value>
        <value> 62 </value>
        <value> 63 </value>
        <value> 64 </value>
        <value> 65 </value>
        <value> 66 </value>
        <value> 67 </value>
        <value> 68 </value>
        <value> 69 </value>
        <value> 70 </value>
        <value> 71 </value>
        <value> 72 </value>
        <value> 73 </value>
        <value> 74 </value>
        <value> 75 </value>
        <value> 76 </value>
        <value> 77 </value>
        <value> 78 </value>
        <value> 79 </value>
        <value> 80 </value>
        <value> 128 </value>
      </parameter_value>
      <parameter_value key="port_type">
        <value> in </value>
        <value> out </value>
        <value> inout </value>
      </parameter_value>
    </parameter>

    <function_description>
      <script>
        <![CDATA[
#!/usr/bin/perl
# This script generates register function definition in behavior level
# parameter : bit_width port_type

if ($#ARGV != 1) {
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width port_type\n";
    exit (100);
}

$bit_width    = $ARGV[0];

if ($bit_width > 80) {
    if ($bit_width != 128) {
    print "bit_width $bit_width is not supported.\n";
    exit (100);
    }
}
elsif ($bit_width < 1) {
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

if ("$bit_width" == "1") {
    $range = "";
}
else {
    $W1 = $bit_width - 1;
    $range = "[$W1:0]";
}

if ("$ARGV[1]" eq "in" or "$ARGV[1]" eq "out" or "$ARGV[1]" eq "inout") {

}
else {
  print "port_type $ARGV[1] is not supported.\n";
  exit(100);
}

{
print <<FHM_DL_NOP
/** No operation */
function nop {
  input {
  }
  output {
  }
  control {
  }
  protocol {
  }
}
FHM_DL_NOP
}

if ("$ARGV[1]" eq "out") {
print <<FHM_DL_WRITE
/** write */
function write {
  input {
    bit $range int_port;
  }
  output {
  }
  control {
  }
  protocol {
  }
}
FHM_DL_WRITE
}
if ("$ARGV[1]" eq "in") {
print <<FHM_DL_READ
/** read */
function read {
  input {
  }
  output {
    bit $range int_port;
  }
  control {
  }
  protocol {
  }
}
FHM_DL_READ
if ("$ARGV[1]" eq "inout") {
print <<FHM_DL_READWRITE
/** write */
function write {
  input {
    bit $range int_in_port;
  }
  output {
  }
  control {
    bit 1 dir_read;
  }
  protocol {
    single_cycle_protocol {
      dir_read = '0';
    }
  }
}
/** read */
function read {
  input {
  }
  output {
    bit $range int_out_port;
  }
  control {
    bit 1 dir_read;
  }
  protocol {
    single_cycle_protocol {
      dir_read = '1';
    }
  }
}
FHM_DL_READWRITE
}
exit (0);
        ]]>
      </script>
    </function_description>

    <function_conv>
      <script>
        <![CDATA[
#!/usr/bin/perl
# This script generates register function definition in behavior level
# parameter : bit_width port_type

if ($#ARGV != 1) {
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width port_type\n";
    exit (100);
}

$bit_width    = $ARGV[0];

if ($bit_width > 80) {
    if ($bit_width != 128) {
    print "bit_width $bit_width is not supported.\n";
    exit (100);
    }
}
elsif ($bit_width < 1) {
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

if ("$bit_width" == "1") {
    $range = "";
}
else {
    $W1 = $bit_width - 1;
    $range = "[$W1:0]";
}

if ("$ARGV[1]" eq "in" or "$ARGV[1]" eq "out" or "$ARGV[1]" eq "inout") {

}
else {
  print "port_type $ARGV[1] is not supported.\n";
  exit(100);
}

{
print <<FHM_DL_NOP
/** No operation */
function nop {
  input {
  }
  output {
  }
  control {
  }
  protocol {
  }
}
FHM_DL_NOP
}

if ("$ARGV[1]" eq "out") {
print <<FHM_DL_WRITE
/** write */
function write {
  input {
    bit $range int_port;
  }
  output {
  }
  control {
  }
  protocol {
  }
}
FHM_DL_WRITE
}
if ("$ARGV[1]" eq "in") {
print <<FHM_DL_READ
/** read */
function read {
  input {
  }
  output {
    bit $range int_port;
  }
  control {
  }
  protocol {
  }
}
FHM_DL_READ
}

if ("$ARGV[1]" eq "inout") {
print <<FHM_DL_RW
/** write */
function write {
  input {
    bit $range int_in_port;
  }
  output {
  }
  control {
    in bit dir_read;
  }
  protocol {
    single_cycle_protocol {
      dir_read = '0';
    }
  }
}
/** read */
function read {
  input {
  }
  output {
    bit $range int_out_port;
  }
  control {
    in bit dir_read;
  }
  protocol {
    single_cycle_protocol {
      dir_read = '1';
    }
  }
}
FHM_DL_RW
}
exit (0);
        ]]>
      </script>
    </function_conv>

    <function_port>
      <script>
        <![CDATA[
#!/usr/bin/perl
# This script generates register port information in behavior level
# parameter : bit_width

if ($#ARGV != 1) {
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width port_type\n";
    exit (100);
}

$bit_width    = $ARGV[0];

if ("$ARGV[1]" eq "in" ) {
    $ext_dir = "in";
    $int_dir = "out";
}
elsif ("$ARGV[1]" eq "out" ) {
    $ext_dir = "out";
    $int_dir = "in";
}
elsif ("$ARGV[1]" eq "inout" ) {
    $ext_dir = "inout";
    $int_dir = "inout";
}
else {
  print "port_type $ARGV[1] is not supported.\n";
  exit(100);
}

if ($bit_width > 80) {
    if ($bit_width != 128) {
    print "bit_width $bit_width is not supported.\n";
    exit (100);
    }
}
elsif ($bit_width < 1) {
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

$msb = $bit_width-1;

if ("$ARGV[1]" eq "inout" ) {
  if ("$bit_width" == "1") {
    print <<FHM_DL_ONE
dir_read   in      bit	mode
int_in_port   in	bit	data
int_out_port   out	bit	data
ext_port   $ext_dir	bit	data
FHM_DL_ONE
  }
  else {
    print <<FHM_DL_MORE
dir_read   in      bit	mode
int_in_port   in   bit_vector   $msb   0	data
int_out_port   out   bit_vector   $msb   0	data
ext_port   $ext_dir   bit_vector   $msb   0	data
FHM_DL_MORE
  }
} else { # not "inout"
  if ("$bit_width" == "1") {
    print <<FHM_DL_ONE
int_port   $int_dir	bit	data
ext_port   $ext_dir	bit	data
FHM_DL_ONE
  }
  else {
    print <<FHM_DL_MORE
int_port   $int_dir   bit_vector   $msb   0	data
ext_port   $ext_dir   bit_vector   $msb   0	data
FHM_DL_MORE
  }
}
exit (0);
        ]]>
      </script>
    </function_port>

    <design>
      <design_lang> vhdl </design_lang>

      <instance>
        <script>
          <![CDATA[
#!/usr/bin/perl
# This script generates register instance in behavior level
# parameter : instance_name bit_width

if ($#ARGV != 2) {
  print "number of parameters is wrong.\n";
  print "usage : this_script instance_name bit_width port_type\n";
  exit (100);
}

$instance_name = $ARGV[0];
$bit_width     = $ARGV[1];

if ($bit_width > 80) {
  if ($bit_width != 128) {
    print "bit_width $bit_width is not supported.\n";
    exit (100);
  }
}
elsif ($bit_width < 1) {
  print "bit_width $bit_width is not supported.\n";
  exit (100);
}

if ("$ARGV[2]" eq "in") {
  $ext_dir = "in";
  $int_dir = "out";
  $read    = "int_port <= ext_port;";
  $write   = "";
}
elsif ("$ARGV[2]" eq "out") {
  $ext_dir = "out";
  $int_dir = "in";
  $read    = "";
  $write   = "ext_port <= int_port;";
}
elsif ("$ARGV[2]" eq "inout") {
  $ext_dir = "inout";
  $int_dir = "inout";
  $zs = 'Z' x $bit_width;
  $read    = "int_out_port <= ext_port when (dir_read='1')\n      else \"$zs\";";
#  $read    = "int_out_port <= ext_port;";
  $write   = "ext_port <= int_in_port when (dir_read='0')\n      else \"$zs\";";
}
else {
  print "port_type $ARGV[2] is not supported.\n";
  exit(100);
}

$W1 = $bit_width - 1;

{
print <<FHM_DL_TOP
-- Module     : $bit_width-bit Wire
-- Feature    : 
-- References : Started from scratch
-- Author     : Designed by T.Sasaki (c)2002.
--              Modified by Y.Kobayashi (c)2003.

-- Version    : 1.2  :
-- VHDL       : 87

-- Functionality :
--  port
FHM_DL_TOP
}



if ("$ARGV[2]" eq "inout") {
    print <<FHM_DL_TOP_INOUT
--   dir_read : direction selection.
--               '1' for in (read)
--               '0' for out (write)
--   int_in_port : internal input port
--   int_out_port : internal output port
--   ext_port : external port

-- Comment :

library IEEE;
  use IEEE.std_logic_1164.all;
  use IEEE.std_logic_unsigned.all;

entity $instance_name is
  port (
FHM_DL_TOP_INOUT
} else {
print <<FHM_DL_TOP_2
--   int_port : internal port
--   ext_port : external port

-- Comment :

library IEEE;
  use IEEE.std_logic_1164.all;
  use IEEE.std_logic_unsigned.all;

entity $instance_name is
  port (
FHM_DL_TOP_2
}

if ("$ARGV[2]" eq "inout") {
  if ("$bit_width" == "1") {
    print <<FHM_DL_ONE
        dir_read : in std_logic;
        int_in_port : in std_logic;
        int_out_port : out std_logic;
        ext_port : $ext_dir std_logic);
FHM_DL_ONE
  }
  else {
    print <<FHM_DL_MORE
        dir_read : in std_logic;
        int_in_port : in std_logic_vector($W1 downto 0);
        int_out_port : out std_logic_vector($W1 downto 0);
        ext_port : $ext_dir std_logic_vector($W1 downto 0) );
FHM_DL_MORE
  }
}else{
  if ("$bit_width" == "1") {
    print <<FHM_DL_ONE
        int_port : $int_dir std_logic;
        ext_port : $ext_dir std_logic);
FHM_DL_ONE
  }
  else {
    print <<FHM_DL_MORE
        int_port : $int_dir std_logic_vector($W1 downto 0);
        ext_port : $ext_dir std_logic_vector($W1 downto 0) );
FHM_DL_MORE
  }
}

{
print <<FHM_DL_BOTTOM
end $instance_name;

architecture logic of $instance_name is
begin
  $read
  $write
end logic;

FHM_DL_BOTTOM
}

exit (0);
          ]]>
        </script>
      </instance>

      <entity>
        <script>
          <![CDATA[
#!/usr/bin/perl
# This script generates register instance in behavior level
# parameter : instance_name bit_width

if ($#ARGV != 2) {
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name bit_width port_type\n";
    exit (100);
}

$instance_name = $ARGV[0];
$bit_width     = $ARGV[1];

if ($bit_width > 80) {
    if ($bit_width != 128) {
    print "bit_width $bit_width is not supported.\n";
    exit (100);
    }
}
elsif ($bit_width < 1) {
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

if ("$ARGV[2]" eq "in") {
    $ext_dir = "in";
    $int_dir = "out";
}
elsif ("$ARGV[2]" eq "out") {
    $ext_dir = "out";
    $int_dir = "in";
}
elsif ("$ARGV[2]" eq "inout") {
    $ext_dir = "inout";
    $int_dir = "inout";
}
else {
  print "port_type $ARGV[2] is no supported.\n";
  exit(100);
}

$W1 = $bit_width - 1;

{
print <<FHM_DL_TOP

entity $instance_name is
  port (
FHM_DL_TOP

}

if ("$ARGV[2]" eq "inout") {
  if ("$bit_width" == "1") {
    print <<FHM_DL_ONE
        dir_read : in std_logic;
        int_in_port : in std_logic;
        int_out_port : out std_logic;
        ext_port : $ext_dir std_logic);
FHM_DL_ONE
  }
  else {
    print <<FHM_DL_MORE
        dir_read : in std_logic;
        int_in_port : in std_logic_vector($W1 downto 0);
        int_out_port : out std_logic_vector($W1 downto 0);
        ext_port : $ext_dir std_logic_vector($W1 downto 0) );
FHM_DL_MORE
  }
} else {
  if ("$bit_width" == "1") {
    print <<FHM_DL_ONE
        int_port : $int_dir std_logic;
        ext_port : $ext_dir std_logic);
FHM_DL_ONE
  }
  else {
    print <<FHM_DL_MORE
        int_port : $int_dir std_logic_vector($W1 downto 0);
        ext_port : $ext_dir std_logic_vector($W1 downto 0) );
FHM_DL_MORE
  }
}
{
print <<FHM_DL_BOTTOM
end $instance_name;
FHM_DL_BOTTOM
}
exit (0);
          ]]>
        </script>
      </entity>

      <testvector>
        <testvector_script>
          <![CDATA[ ]]>
        </testvector_script>
      </testvector>

      <synthesis>
        <parameter></parameter>
        <synthesis_script>
          <script>
            <![CDATA[
#!/usr/bin/perl
# This script generates register synthesis script in behavior level
# parameter : instance_name priority bit_width

if ($#ARGV != 2) {
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name priority bit_width\n";
    exit (100);
}

$instance_name = $ARGV[0];
$priority      = $ARGV[1];
$bit_width     = $ARGV[2];

if ($bit_width > 80) {
    if ($bit_width != 128) {
    print "bit_width $bit_width is not supported.\n";
    exit (100);
    }
}
elsif ($bit_width < 1) {
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

if ($priority eq "area"){
  $priority_const = "set_max_area 0";
}
elsif ($priority eq "performance"){
  $priority_const = "set_max_delay -from all_inputs() -to all_outputs() 0";
}
elsif ($priority eq "power"){
  $priority_const = "";
}
elsif ($priority eq "none"){
  $priority_const = "";
}
else {
    print "priority $priority is not supported.\n";
    exit(100);
}

{
print <<FHM_DL_END_OF_SCRIPT
hdlin_auto_save_templates = TRUE

analyze -f vhdl $instance_name.vhd

elaborate $instance_name
uniquify

$priority_const

create_clock -period 10 -waveform{0 5} clock

compile

write -hierarchy -output $instance_name.db

report_area
report_timing

quit
FHM_DL_END_OF_SCRIPT
}
exit(0);
            ]]>
          </script>
        </synthesis_script>
      </synthesis>
    </design>

    <estimation>
    </estimation>

  </model>

  <model>
    <design_level> synthesis </design_level>
    <version> 1.0 </version>
    <author> <![CDATA[ Sasaki Toshiyuki ]]> </author>
    <affiliation> <![CDATA[ Osaka Univ. ]]> </affiliation>
    <model_info> <![CDATA[ (c)2001,PEAS3-Lite Project ]]> </model_info>

    <parameter>
      <parameter_value key="bit_width">
        <value> 1 </value>
        <value> 2 </value>
        <value> 3 </value>
        <value> 4 </value>
        <value> 5 </value>
        <value> 6 </value>
        <value> 7 </value>
        <value> 8 </value>
        <value> 9 </value>
        <value> 10 </value>
        <value> 11 </value>
        <value> 12 </value>
        <value> 13 </value>
        <value> 14 </value>
        <value> 15 </value>
        <value> 16 </value>
        <value> 17 </value>
        <value> 18 </value>
        <value> 19 </value>
        <value> 20 </value>
        <value> 21 </value>
        <value> 22 </value>
        <value> 23 </value>
        <value> 24 </value>
        <value> 25 </value>
        <value> 26 </value>
        <value> 27 </value>
        <value> 28 </value>
        <value> 29 </value>
        <value> 30 </value>
        <value> 31 </value>
        <value> 32 </value>
        <value> 33 </value>
        <value> 34 </value>
        <value> 35 </value>
        <value> 36 </value>
        <value> 37 </value>
        <value> 38 </value>
        <value> 39 </value>
        <value> 40 </value>
        <value> 41 </value>
        <value> 42 </value>
        <value> 43 </value>
        <value> 44 </value>
        <value> 45 </value>
        <value> 46 </value>
        <value> 47 </value>
        <value> 48 </value>
        <value> 49 </value>
        <value> 50 </value>
        <value> 51 </value>
        <value> 52 </value>
        <value> 53 </value>
        <value> 54 </value>
        <value> 55 </value>
        <value> 56 </value>
        <value> 57 </value>
        <value> 58 </value>
        <value> 59 </value>
        <value> 60 </value>
        <value> 61 </value>
        <value> 62 </value>
        <value> 63 </value>
        <value> 64 </value>
        <value> 65 </value>
        <value> 66 </value>
        <value> 67 </value>
        <value> 68 </value>
        <value> 69 </value>
        <value> 70 </value>
        <value> 71 </value>
        <value> 72 </value>
        <value> 73 </value>
        <value> 74 </value>
        <value> 75 </value>
        <value> 76 </value>
        <value> 77 </value>
        <value> 78 </value>
        <value> 79 </value>
        <value> 80 </value>
        <value> 128 </value>
      </parameter_value>
      <parameter_value key="port_type">
        <value> in </value>
        <value> out </value>
        <value> inout </value>
      </parameter_value>
    </parameter>

    <function_description>
      <script>
        <![CDATA[
#!/usr/bin/perl
# This script generates register function definition in behavior level
# parameter : bit_width port_type

if ($#ARGV != 1) {
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width port_type\n";
    exit (100);
}

$bit_width    = $ARGV[0];

if ($bit_width > 80) {
    if ($bit_width != 128) {
    print "bit_width $bit_width is not supported.\n";
    exit (100);
    }
}
elsif ($bit_width < 1) {
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

if ("$bit_width" == "1") {
    $range = "";
}
else {
    $W1 = $bit_width - 1;
    $range = "[$W1:0]";
}

if ("$ARGV[1]" eq "in" or "$ARGV[1]" eq "out" or "$ARGV[1]" eq "inout") {

}
else {
  print "port_type $ARGV[1] is not supported.\n";
  exit(100);
}

{
print <<FHM_DL_NOP
/** No operation */
function nop {
  input {
  }
  output {
  }
  control {
  }
  protocol {
  }
}
FHM_DL_NOP
}

if ("$ARGV[1]" eq "out") {
print <<FHM_DL_WRITE
/** write */
function write {
  input {
    bit $range int_port;
  }
  output {
  }
  control {
  }
  protocol {
  }
}
FHM_DL_WRITE
}
if ("$ARGV[1]" eq "in") {
print <<FHM_DL_READ
/** read */
function read {
  input {
  }
  output {
    bit $range int_port;
  }
  control {
  }
  protocol {
  }
}
FHM_DL_READ
if ("$ARGV[1]" eq "inout") {
print <<FHM_DL_READWRITE
/** write */
function write {
  input {
    bit $range int_in_port;
  }
  output {
  }
  control {
    bit 1 dir_read;
  }
  protocol {
    single_cycle_protocol {
      dir_read = '0';
    }
  }
}
/** read */
function read {
  input {
  }
  output {
    bit $range int_out_port;
  }
  control {
    bit 1 dir_read;
  }
  protocol {
    single_cycle_protocol {
      dir_read = '1';
    }
  }
}
FHM_DL_READWRITE
}
exit (0);
        ]]>
      </script>
    </function_description>

    <function_conv>
      <script>
        <![CDATA[
#!/usr/bin/perl
# This script generates register function definition in behavior level
# parameter : bit_width port_type

if ($#ARGV != 1) {
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width port_type\n";
    exit (100);
}

$bit_width    = $ARGV[0];

if ($bit_width > 80) {
    if ($bit_width != 128) {
    print "bit_width $bit_width is not supported.\n";
    exit (100);
    }
}
elsif ($bit_width < 1) {
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

if ("$bit_width" == "1") {
    $range = "";
}
else {
    $W1 = $bit_width - 1;
    $range = "[$W1:0]";
}

if ("$ARGV[1]" eq "in" or "$ARGV[1]" eq "out" or "$ARGV[1]" eq "inout") {

}
else {
  print "port_type $ARGV[1] is not supported.\n";
  exit(100);
}

{
print <<FHM_DL_NOP
/** No operation */
function nop {
  input {
  }
  output {
  }
  control {
  }
  protocol {
  }
}
FHM_DL_NOP
}

if ("$ARGV[1]" eq "out") {
print <<FHM_DL_WRITE
/** write */
function write {
  input {
    bit $range int_port;
  }
  output {
  }
  control {
  }
  protocol {
  }
}
FHM_DL_WRITE
}
if ("$ARGV[1]" eq "in") {
print <<FHM_DL_READ
/** read */
function read {
  input {
  }
  output {
    bit $range int_port;
  }
  control {
  }
  protocol {
  }
}
FHM_DL_READ
}

if ("$ARGV[1]" eq "inout") {
print <<FHM_DL_RW
/** write */
function write {
  input {
    bit $range int_in_port;
  }
  output {
  }
  control {
    in bit dir_read;
  }
  protocol {
    single_cycle_protocol {
      dir_read = '0';
    }
  }
}
/** read */
function read {
  input {
  }
  output {
    bit $range int_out_port;
  }
  control {
    in bit dir_read;
  }
  protocol {
    single_cycle_protocol {
      dir_read = '1';
    }
  }
}
FHM_DL_RW
}
exit (0);
        ]]>
      </script>
    </function_conv>

    <function_port>
      <script>
        <![CDATA[
#!/usr/bin/perl
# This script generates register port information in behavior level
# parameter : bit_width

if ($#ARGV != 1) {
    print "number of parameters is wrong.\n";
    print "usage : this_script bit_width port_type\n";
    exit (100);
}

$bit_width    = $ARGV[0];

if ("$ARGV[1]" eq "in" ) {
    $ext_dir = "in";
    $int_dir = "out";
}
elsif ("$ARGV[1]" eq "out" ) {
    $ext_dir = "out";
    $int_dir = "in";
}
elsif ("$ARGV[1]" eq "inout" ) {
    $ext_dir = "inout";
    $int_dir = "inout";
}
else {
  print "port_type $ARGV[1] is not supported.\n";
  exit(100);
}

if ($bit_width > 80) {
    if ($bit_width != 128) {
    print "bit_width $bit_width is not supported.\n";
    exit (100);
    }
}
elsif ($bit_width < 1) {
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

$msb = $bit_width-1;

if ("$ARGV[1]" eq "inout" ) {
  if ("$bit_width" == "1") {
    print <<FHM_DL_ONE
dir_read   in      bit	mode
int_in_port   in	bit	data
int_out_port   out	bit	data
ext_port   $ext_dir	bit	data
FHM_DL_ONE
  }
  else {
    print <<FHM_DL_MORE
dir_read   in      bit	mode
int_in_port   in   bit_vector   $msb   0	data
int_out_port   out   bit_vector   $msb   0	data
ext_port   $ext_dir   bit_vector   $msb   0	data
FHM_DL_MORE
  }
} else { # not "inout"
  if ("$bit_width" == "1") {
    print <<FHM_DL_ONE
int_port   $int_dir	bit	data
ext_port   $ext_dir	bit	data
FHM_DL_ONE
  }
  else {
    print <<FHM_DL_MORE
int_port   $int_dir   bit_vector   $msb   0	data
ext_port   $ext_dir   bit_vector   $msb   0	data
FHM_DL_MORE
  }
}
exit (0);
        ]]>
      </script>
    </function_port>

    <design>
      <design_lang> vhdl </design_lang>

      <instance>
        <script>
          <![CDATA[
#!/usr/bin/perl
# This script generates register instance in behavior level
# parameter : instance_name bit_width

if ($#ARGV != 2) {
  print "number of parameters is wrong.\n";
  print "usage : this_script instance_name bit_width port_type\n";
  exit (100);
}

$instance_name = $ARGV[0];
$bit_width     = $ARGV[1];

if ($bit_width > 80) {
  if ($bit_width != 128) {
    print "bit_width $bit_width is not supported.\n";
    exit (100);
  }
}
elsif ($bit_width < 1) {
  print "bit_width $bit_width is not supported.\n";
  exit (100);
}

if ("$ARGV[2]" eq "in") {
  $ext_dir = "in";
  $int_dir = "out";
  $read    = "int_port <= ext_port;";
  $write   = "";
}
elsif ("$ARGV[2]" eq "out") {
  $ext_dir = "out";
  $int_dir = "in";
  $read    = "";
  $write   = "ext_port <= int_port;";
}
elsif ("$ARGV[2]" eq "inout") {
  $ext_dir = "inout";
  $int_dir = "inout";
  $zs = 'Z' x $bit_width;
  $read    = "int_out_port <= ext_port when (dir_read='1')\n      else \"$zs\";";
#  $read    = "int_out_port <= ext_port;";
  $write   = "ext_port <= int_in_port when (dir_read='0')\n      else \"$zs\";";
}
else {
  print "port_type $ARGV[2] is not supported.\n";
  exit(100);
}

$W1 = $bit_width - 1;

{
print <<FHM_DL_TOP
-- Module     : $bit_width-bit Wire
-- Feature    : 
-- References : Started from scratch
-- Author     : Designed by T.Sasaki (c)2002.
--              Modified by Y.Kobayashi (c)2003.

-- Version    : 1.2  :
-- VHDL       : 87

-- Functionality :
--  port
FHM_DL_TOP
}



if ("$ARGV[2]" eq "inout") {
    print <<FHM_DL_TOP_INOUT
--   dir_read : direction selection.
--               '1' for in (read)
--               '0' for out (write)
--   int_in_port : internal input port
--   int_out_port : internal output port
--   ext_port : external port

-- Comment :

library IEEE;
  use IEEE.std_logic_1164.all;
  use IEEE.std_logic_unsigned.all;

entity $instance_name is
  port (
FHM_DL_TOP_INOUT
} else {
print <<FHM_DL_TOP_2
--   int_port : internal port
--   ext_port : external port

-- Comment :

library IEEE;
  use IEEE.std_logic_1164.all;
  use IEEE.std_logic_unsigned.all;

entity $instance_name is
  port (
FHM_DL_TOP_2
}

if ("$ARGV[2]" eq "inout") {
  if ("$bit_width" == "1") {
    print <<FHM_DL_ONE
        dir_read : in std_logic;
        int_in_port : in std_logic;
        int_out_port : out std_logic;
        ext_port : $ext_dir std_logic);
FHM_DL_ONE
  }
  else {
    print <<FHM_DL_MORE
        dir_read : in std_logic;
        int_in_port : in std_logic_vector($W1 downto 0);
        int_out_port : out std_logic_vector($W1 downto 0);
        ext_port : $ext_dir std_logic_vector($W1 downto 0) );
FHM_DL_MORE
  }
}else{
  if ("$bit_width" == "1") {
    print <<FHM_DL_ONE
        int_port : $int_dir std_logic;
        ext_port : $ext_dir std_logic);
FHM_DL_ONE
  }
  else {
    print <<FHM_DL_MORE
        int_port : $int_dir std_logic_vector($W1 downto 0);
        ext_port : $ext_dir std_logic_vector($W1 downto 0) );
FHM_DL_MORE
  }
}

{
print <<FHM_DL_BOTTOM
end $instance_name;

architecture logic of $instance_name is
begin
  $read
  $write
end logic;

FHM_DL_BOTTOM
}

exit (0);
          ]]>
        </script>
      </instance>

      <entity>
        <script>
          <![CDATA[
#!/usr/bin/perl
# This script generates register instance in behavior level
# parameter : instance_name bit_width

if ($#ARGV != 2) {
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name bit_width port_type\n";
    exit (100);
}

$instance_name = $ARGV[0];
$bit_width     = $ARGV[1];

if ($bit_width > 80) {
    if ($bit_width != 128) {
    print "bit_width $bit_width is not supported.\n";
    exit (100);
    }
}
elsif ($bit_width < 1) {
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

if ("$ARGV[2]" eq "in") {
    $ext_dir = "in";
    $int_dir = "out";
}
elsif ("$ARGV[2]" eq "out") {
    $ext_dir = "out";
    $int_dir = "in";
}
elsif ("$ARGV[2]" eq "inout") {
    $ext_dir = "inout";
    $int_dir = "inout";
}
else {
  print "port_type $ARGV[2] is no supported.\n";
  exit(100);
}

$W1 = $bit_width - 1;

{
print <<FHM_DL_TOP

entity $instance_name is
  port (
FHM_DL_TOP

}

if ("$ARGV[2]" eq "inout") {
  if ("$bit_width" == "1") {
    print <<FHM_DL_ONE
        dir_read : in std_logic;
        int_in_port : in std_logic;
        int_out_port : out std_logic;
        ext_port : $ext_dir std_logic);
FHM_DL_ONE
  }
  else {
    print <<FHM_DL_MORE
        dir_read : in std_logic;
        int_in_port : in std_logic_vector($W1 downto 0);
        int_out_port : out std_logic_vector($W1 downto 0);
        ext_port : $ext_dir std_logic_vector($W1 downto 0) );
FHM_DL_MORE
  }
} else {
  if ("$bit_width" == "1") {
    print <<FHM_DL_ONE
        int_port : $int_dir std_logic;
        ext_port : $ext_dir std_logic);
FHM_DL_ONE
  }
  else {
    print <<FHM_DL_MORE
        int_port : $int_dir std_logic_vector($W1 downto 0);
        ext_port : $ext_dir std_logic_vector($W1 downto 0) );
FHM_DL_MORE
  }
}
{
print <<FHM_DL_BOTTOM
end $instance_name;
FHM_DL_BOTTOM
}
exit (0);
          ]]>
        </script>
      </entity>

      <testvector>
        <testvector_script>
          <![CDATA[ ]]>
        </testvector_script>
      </testvector>

      <synthesis>
        <parameter></parameter>
        <synthesis_script>
          <script>
            <![CDATA[
#!/usr/bin/perl
# This script generates register synthesis script in behavior level
# parameter : instance_name priority bit_width

if ($#ARGV != 2) {
    print "number of parameters is wrong.\n";
    print "usage : this_script instance_name priority bit_width\n";
    exit (100);
}

$instance_name = $ARGV[0];
$priority      = $ARGV[1];
$bit_width     = $ARGV[2];

if ($bit_width > 80) {
    if ($bit_width != 128) {
    print "bit_width $bit_width is not supported.\n";
    exit (100);
    }
}
elsif ($bit_width < 1) {
    print "bit_width $bit_width is not supported.\n";
    exit (100);
}

if ($priority eq "area"){
  $priority_const = "set_max_area 0";
}
elsif ($priority eq "performance"){
  $priority_const = "set_max_delay -from all_inputs() -to all_outputs() 0";
}
elsif ($priority eq "power"){
  $priority_const = "";
}
elsif ($priority eq "none"){
  $priority_const = "";
}
else {
    print "priority $priority is not supported.\n";
    exit(100);
}

{
print <<FHM_DL_END_OF_SCRIPT
hdlin_auto_save_templates = TRUE

analyze -f vhdl $instance_name.vhd

elaborate $instance_name
uniquify

$priority_const

create_clock -period 10 -waveform{0 5} clock

compile

write -hierarchy -output $instance_name.db

report_area
report_timing

quit
FHM_DL_END_OF_SCRIPT
}
exit(0);
            ]]>
          </script>
        </synthesis_script>
      </synthesis>
    </design>

    <estimation>
    </estimation>

  </model>
</FHM>
