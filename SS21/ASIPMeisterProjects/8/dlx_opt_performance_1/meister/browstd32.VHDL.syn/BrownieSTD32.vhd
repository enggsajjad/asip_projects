----------------------------------------------------------------------
-- Copyright (C) 2011 ASIP Solutions, Inc. All rights reserved. 
-- Generated by ASIP Meister 2.3 on 2021/07/02 01:29:46 
----------------------------------------------------------------------

-----------------------------------------------------------
-- Entity Name: BrownieSTD32
-----------------------------------------------------------

library IEEE;
use IEEE.std_logic_1164.all;

entity BrownieSTD32 is
  port (
    CLK : in std_logic;
    RESET : in std_logic;
    IMEM_ADDR_OUT : out std_logic_vector(31 downto 0);
    IMEM_DATA_IN : in std_logic_vector(31 downto 0);
    IMEM_ADDRERR_IN : in std_logic;
    DMEM_ADDR_OUT : out std_logic_vector(31 downto 0);
    DMEM_DATA_IN : in std_logic_vector(31 downto 0);
    DMEM_DATA_OUT : out std_logic_vector(31 downto 0);
    DMEM_REQ_OUT : out std_logic;
    DMEM_ACK_IN : in std_logic;
    DMEM_RW_OUT : out std_logic;
    DMEM_WMODE_OUT : out std_logic_vector(1 downto 0);
    DMEM_EMODE_OUT : out std_logic;
    DMEM_ADDRERR_IN : in std_logic;
    DMEM_CANCEL_OUT : out std_logic;
    EXTINT_IN : in std_logic;
    EXTCATCH_OUT : out std_logic
  );
end entity BrownieSTD32;

architecture RTL of BrownieSTD32 is
  component fhm_pcu_w32
  port (
    clock : in std_logic;
    async_reset : in std_logic;
    load : in std_logic;
    reset : in std_logic;
    hold : in std_logic;
    data_in : in std_logic_vector(31 downto 0);
    data_out : out std_logic_vector(31 downto 0)
  );
  end component fhm_pcu_w32;

  component fhm_register_w32
  port (
    clock : in std_logic;
    async_reset : in std_logic;
    reset : in std_logic;
    enb : in std_logic;
    data_in : in std_logic_vector(31 downto 0);
    data_out : out std_logic_vector(31 downto 0)
  );
  end component fhm_register_w32;

  component fhm_mifu_w32_00
  port (
    addr_out : in std_logic_vector(31 downto 0);
    data_in : out std_logic_vector(31 downto 0);
    aderr_in : out std_logic;
    addr2mem : out std_logic_vector(31 downto 0);
    data2cpu : in std_logic_vector(31 downto 0);
    aderr2cpu : in std_logic
  );
  end component fhm_mifu_w32_00;

  component fhm_mifu_w32_01
  port (
    req_out : in std_logic;
    ack_in : out std_logic;
    cancel_out : in std_logic;
    req2mem : out std_logic;
    ack2cpu : in std_logic;
    cancel2mem : out std_logic;
    addr_out : in std_logic_vector(31 downto 0);
    data_in : out std_logic_vector(31 downto 0);
    aderr_in : out std_logic;
    addr2mem : out std_logic_vector(31 downto 0);
    data2cpu : in std_logic_vector(31 downto 0);
    aderr2cpu : in std_logic;
    rw_out : in std_logic;
    data_out : in std_logic_vector(31 downto 0);
    rw2mem : out std_logic;
    data2mem : out std_logic_vector(31 downto 0);
    mode_out : in std_logic_vector(1 downto 0);
    ext_out : in std_logic;
    mode2mem : out std_logic_vector(1 downto 0);
    ext2mem : out std_logic
  );
  end component fhm_mifu_w32_01;

  component fhm_alu_w32
  port (
    a : in std_logic_vector(31 downto 0);
    b : in std_logic_vector(31 downto 0);
    cin : in std_logic;
    mode : in std_logic_vector(4 downto 0);
    result : out std_logic_vector(31 downto 0);
    flag : out std_logic_vector(3 downto 0)
  );
  end component fhm_alu_w32;

  component fhm_multiplier_w32
  port (
    clock : in std_logic;
    async_reset : in std_logic;
    reset : in std_logic;
    a : in std_logic_vector(31 downto 0);
    b : in std_logic_vector(31 downto 0);
    mode : in std_logic;
    start : in std_logic;
    clear : in std_logic;
    result : out std_logic_vector(63 downto 0);
    fin : out std_logic
  );
  end component fhm_multiplier_w32;

  component fhm_divider_w32
  port (
    clock : in std_logic;
    async_reset : in std_logic;
    reset : in std_logic;
    clear : in std_logic;
    a : in std_logic_vector(31 downto 0);
    b : in std_logic_vector(31 downto 0);
    start : in std_logic;
    mode : in std_logic;
    q : out std_logic_vector(31 downto 0);
    r : out std_logic_vector(31 downto 0);
    flag : out std_logic;
    fin : out std_logic
  );
  end component fhm_divider_w32;

  component fhm_extender_w8
  port (
    data_in : in std_logic_vector(7 downto 0);
    mode : in std_logic;
    data_out : out std_logic_vector(31 downto 0)
  );
  end component fhm_extender_w8;

  component fhm_extender_w16
  port (
    data_in : in std_logic_vector(15 downto 0);
    mode : in std_logic;
    data_out : out std_logic_vector(31 downto 0)
  );
  end component fhm_extender_w16;

  component fhm_extender_w26
  port (
    data_in : in std_logic_vector(25 downto 0);
    mode : in std_logic;
    data_out : out std_logic_vector(31 downto 0)
  );
  end component fhm_extender_w26;

  component fhm_shifter_w32
  port (
    data_in : in std_logic_vector(31 downto 0);
    mode : in std_logic_vector(1 downto 0);
    ctrl : in std_logic_vector(4 downto 0);
    data_out : out std_logic_vector(31 downto 0)
  );
  end component fhm_shifter_w32;

  component fhm_wire_in_w1
  port (
    int_port : out std_logic;
    ext_port : in std_logic
  );
  end component fhm_wire_in_w1;

  component fhm_wire_out_w1
  port (
    int_port : in std_logic;
    ext_port : out std_logic;
    wmode : in std_logic
  );
  end component fhm_wire_out_w1;

  component fhm_fwu_w32
  port (
    data0 : in std_logic_vector(31 downto 0);
    data1 : in std_logic_vector(31 downto 0);
    data2 : in std_logic_vector(31 downto 0);
    num0 : in std_logic_vector(4 downto 0);
    num1 : in std_logic_vector(4 downto 0);
    num2 : in std_logic_vector(4 downto 0);
    fw1 : in std_logic;
    fw2 : in std_logic;
    data_out : out std_logic_vector(31 downto 0)
  );
  end component fhm_fwu_w32;

  component fhm_dummy_register_w32
  port (
    clock : in std_logic;
    async_reset : in std_logic;
    reset : in std_logic;
    enb : in std_logic;
    data_in : in std_logic_vector(31 downto 0);
    data_out : out std_logic_vector(31 downto 0)
  );
  end component fhm_dummy_register_w32;

  component fhm_browregfile_w32
  port (
    clock : in std_logic;
    async_reset : in std_logic;
    reset : in std_logic;
    w_enb0 : in std_logic;
    w_enb1 : in std_logic;
    w_sel0 : in std_logic_vector(4 downto 0);
    w_sel1 : in std_logic_vector(4 downto 0);
    data_in0 : in std_logic_vector(31 downto 0);
    data_in1 : in std_logic_vector(31 downto 0);
    r_sel0 : in std_logic_vector(4 downto 0);
    r_sel1 : in std_logic_vector(4 downto 0);
    r_sel2 : in std_logic_vector(4 downto 0);
    r_sel3 : in std_logic_vector(4 downto 0);
    data_out0 : out std_logic_vector(31 downto 0);
    data_out1 : out std_logic_vector(31 downto 0);
    data_out2 : out std_logic_vector(31 downto 0);
    data_out3 : out std_logic_vector(31 downto 0);
    status_out : out std_logic_vector(31 downto 0);
    status_in : in std_logic_vector(31 downto 0);
    status_enb : in std_logic;
    flag_in : in std_logic_vector(4 downto 0);
    flag_enb : in std_logic;
    do_swap : in std_logic;
    next_bank : in std_logic;
    current_bank : out std_logic
  );
  end component fhm_browregfile_w32;

  component fhm_stepsize_w4
  port (
    clock : in std_logic;
    reset : in std_logic;
    enb : in std_logic;
    data_in : in std_logic_vector(6 downto 0);
    data_out : out std_logic_vector(15 downto 0)
  );
  end component fhm_stepsize_w4;

  component fhm_index_w4
  port (
    clock_new : in std_logic;
    reset_new : in std_logic;
    enb_new : in std_logic;
    data_in_new : in std_logic_vector(3 downto 0);
    index_in : in std_logic_vector(31 downto 0);
    index_out : out std_logic_vector(31 downto 0)
  );
  end component fhm_index_w4;

  component fhm_clamp_w4
  port (
    clock : in std_logic;
    reset : in std_logic;
    enb : in std_logic;
    cmpval : in std_logic_vector(31 downto 0);
    greaterval : in std_logic_vector(31 downto 0);
    lesserval : in std_logic_vector(31 downto 0);
    dout : out std_logic_vector(31 downto 0)
  );
  end component fhm_clamp_w4;

  component fhm_adpcm_w4
  port (
    clock_new : in std_logic;
    reset_new : in std_logic;
    enb_new : in std_logic;
    step : in std_logic_vector(31 downto 0);
    delta : in std_logic_vector(31 downto 0);
    valpred_in : in std_logic_vector(31 downto 0);
    valpred_out : out std_logic_vector(31 downto 0)
  );
  end component fhm_adpcm_w4;

  component fhm_minmax_w32
  port (
    clock : in std_logic;
    reset : in std_logic;
    enb : in std_logic;
    din1 : in std_logic_vector(31 downto 0);
    din2 : in std_logic_vector(31 downto 0);
    doutMin : out std_logic_vector(31 downto 0);
    doutMax : out std_logic_vector(31 downto 0)
  );
  end component fhm_minmax_w32;

  component rtg_mux2to1_w32
  port (
    SEL : in std_logic;
    DIN0 : in std_logic_vector(31 downto 0);
    DIN1 : in std_logic_vector(31 downto 0);
    DOUT : out std_logic_vector(31 downto 0)
  );
  end component rtg_mux2to1_w32;

  component rtg_controller
  port (
    CLK : in std_logic;
    RST : in std_logic;
    INTREQ_RESET : in std_logic;
    INTREQ_EXTINT_IN : in std_logic;
    DATAIN_DUMMY_STREG_DATA_OUT : in std_logic_vector(31 downto 0);
    CTRLIN_CMPEQ_02_EXE : in std_logic;
    CTRLIN_CMPNEQ_00_EXE : in std_logic;
    CTRLIN_MUL_FIN : in std_logic;
    CTRLOUT_MUL_CLEAR : out std_logic;
    CTRLIN_DIV_FIN : in std_logic;
    CTRLOUT_DIV_CLEAR : out std_logic;
    CTRLIN_DMAU_ACK_IN : in std_logic;
    CTRLOUT_DMAU_CANCEL_OUT : out std_logic;
    DATAIN_PC_DATA_OUT : in std_logic_vector(31 downto 0);
    DATAOUT_SAVED_PC : out std_logic_vector(31 downto 0);
    DATAOUT_DS_OFFSET : out std_logic;
    DATAIN_IR_DATA_OUT : in std_logic_vector(31 downto 0);
    CTRLOUT_IR_ENB : out std_logic;
    CTRLOUT_PC_HOLD : out std_logic;
    CTRLOUT_DUMMY_STREG_ENB : out std_logic;
    CTRLOUT_ALU_MODE : out std_logic_vector(4 downto 0);
    CTRLOUT_ALU_CIN : out std_logic;
    CTRLOUT_GPR_FLAG_ENB : out std_logic;
    CTRLOUT_FWU0_FW1 : out std_logic;
    CTRLOUT_FWU1_FW1 : out std_logic;
    CTRLOUT_GPR_W_ENB0 : out std_logic;
    CTRLOUT_FWU0_FW2 : out std_logic;
    CTRLOUT_FWU1_FW2 : out std_logic;
    CTRLOUT_MUL_MODE : out std_logic;
    CTRLOUT_DIV_MODE : out std_logic;
    CTRLOUT_SFTVAR_MODE : out std_logic_vector(1 downto 0);
    CTRLOUT_EXT16TO32_MODE : out std_logic;
    CTRLOUT_DMAU_RW_OUT : out std_logic;
    CTRLOUT_DMAU_MODE_OUT : out std_logic_vector(1 downto 0);
    CTRLOUT_DMAU_EXT_OUT : out std_logic;
    CTRLOUT_PC_LOAD : out std_logic;
    CTRLOUT_EXT26TO32_MODE : out std_logic;
    CTRLOUT_TRAP_HAND_REG_ENB : out std_logic;
    CTRLOUT_GPR_STATUS_ENB : out std_logic;
    CTRLOUT_EXT8TO32_MODE : out std_logic;
    CTRLOUT_EXT16TO32A_MODE : out std_logic;
    CTRLOUT_GPR_W_ENB1 : out std_logic;
    CTRLOUT_STEP_ENB : out std_logic;
    CTRLOUT_IDX_ENB_NEW : out std_logic;
    CTRLOUT_CLMP_ENB : out std_logic;
    CTRLOUT_PCM_ENB_NEW : out std_logic;
    CTRLOUT_MMX_ENB : out std_logic;
    CTRLOUT_FWU2_FW1 : out std_logic;
    CTRLOUT_FWU3_FW1 : out std_logic;
    CTRLOUT_FWU2_FW2 : out std_logic;
    CTRLOUT_FWU3_FW2 : out std_logic;
    CTRLOUT_MUL_START : out std_logic;
    CTRLOUT_DIV_START : out std_logic;
    CTRLOUT_DMAU_REQ_OUT : out std_logic;
    CTRLOUT_EXTCATCH_OUT_WMODE : out std_logic;
    CTRLOUT_GPR_RESET : out std_logic;
    CTRLOUT_IR_RESET : out std_logic;
    CTRLOUT_DIV_RESET : out std_logic;
    CTRLOUT_MUL_RESET : out std_logic;
    CTRLOUT_TRAP_HAND_REG_RESET : out std_logic;
    CTRLOUT_UA_MUX00_SEL : out std_logic;
    CTRLOUT_UA_MUX01_SEL : out std_logic_vector(1 downto 0);
    CTRLOUT_UA_MUX02_SEL : out std_logic;
    CTRLOUT_UA_MUX03_SEL : out std_logic_vector(1 downto 0);
    CTRLOUT_UA_MUX04_SEL : out std_logic_vector(1 downto 0);
    CTRLOUT_UA_MUX05_SEL : out std_logic;
    CTRLOUT_UA_MUX06_SEL : out std_logic_vector(3 downto 0);
    CTRLOUT_UA_MUX07_SEL : out std_logic;
    CTRLOUT_UA_MUX08_SEL : out std_logic_vector(3 downto 0);
    CTRLOUT_UA_MUX09_SEL : out std_logic_vector(2 downto 0);
    CTRLOUT_UA_MUX10_SEL : out std_logic;
    CTRLOUT_UA_MUX11_SEL : out std_logic_vector(1 downto 0);
    CTRLOUT_UA_MUX12_SEL : out std_logic;
    CTRLOUT_UA_MUX13_SEL : out std_logic_vector(1 downto 0);
    CTRLOUT_UA_MUX14_SEL : out std_logic_vector(3 downto 0);
    CTRLOUT_UA_MUX15_SEL : out std_logic;
    CTRLOUT_UA_MUX16_SEL : out std_logic_vector(3 downto 0);
    CTRLOUT_UA_MUX17_SEL : out std_logic;
    CTRLOUT_UA_MUX18_SEL : out std_logic;
    CTRLOUT_UA_MUX19_SEL : out std_logic_vector(1 downto 0);
    CTRLOUT_UA_MUX20_SEL : out std_logic;
    CTRLOUT_UA_MUX21_SEL : out std_logic_vector(1 downto 0);
    CTRLOUT_UA_MUX22_SEL : out std_logic;
    CTRLOUT_UA_MUX23_SEL : out std_logic_vector(2 downto 0);
    CTRLOUT_UA_MUX24_SEL : out std_logic_vector(1 downto 0);
    CTRLOUT_UA_MUX25_SEL : out std_logic_vector(1 downto 0);
    CTRLOUT_UA_MUX26_SEL : out std_logic_vector(4 downto 0);
    CTRLOUT_UA_MUX27_SEL : out std_logic;
    CTRLOUT_UA_MUX28_SEL : out std_logic;
    CTRLOUT_UA_MUX29_SEL : out std_logic_vector(1 downto 0);
    CTRLOUT_UA_MUX30_SEL : out std_logic_vector(2 downto 0);
    CTRLOUT_UA_MUX31_SEL : out std_logic_vector(1 downto 0);
    CTRLOUT_UA_MUX32_SEL : out std_logic;
    CTRLOUT_UA_MUX33_SEL : out std_logic;
    CTRLOUT_UA_MUX34_SEL : out std_logic;
    CTRLOUT_UA_MUX35_SEL : out std_logic;
    CTRLOUT_UA_MUX36_SEL : out std_logic;
    CTRLOUT_UA_MUX37_SEL : out std_logic;
    CTRLOUT_UA_MUX38_SEL : out std_logic;
    CTRLOUT_UA_PREG00_ENB : out std_logic;
    CTRLOUT_UA_PREG01_ENB : out std_logic;
    CTRLOUT_UA_PREG02_ENB : out std_logic;
    CTRLOUT_UA_PREG03_ENB : out std_logic;
    CTRLOUT_UA_PREG04_ENB : out std_logic;
    CTRLOUT_UA_PREG05_ENB : out std_logic;
    CTRLOUT_UA_PREG06_ENB : out std_logic;
    CTRLOUT_UA_PREG07_ENB : out std_logic;
    CTRLOUT_UA_PREG08_ENB : out std_logic;
    CTRLOUT_UA_PREG09_ENB : out std_logic;
    CTRLOUT_UA_PREG10_ENB : out std_logic;
    CTRLOUT_UA_PREG11_ENB : out std_logic;
    CTRLOUT_UA_PREG12_ENB : out std_logic;
    CTRLOUT_UA_PREG13_ENB : out std_logic;
    CTRLOUT_UA_PREG14_ENB : out std_logic;
    CTRLOUT_UA_PREG15_ENB : out std_logic;
    CTRLOUT_UA_PREG16_ENB : out std_logic;
    CTRLOUT_UA_PREG17_ENB : out std_logic;
    CTRLOUT_UA_PREG18_ENB : out std_logic;
    CTRLOUT_UA_PREG19_ENB : out std_logic;
    CTRLOUT_UA_PREG20_ENB : out std_logic;
    CTRLOUT_UA_PREG21_ENB : out std_logic;
    CTRLOUT_UA_PREG22_ENB : out std_logic;
    CTRLOUT_UA_PREG23_ENB : out std_logic;
    CTRLOUT_UA_PREG24_ENB : out std_logic;
    CTRLOUT_UA_PREG25_ENB : out std_logic;
    CTRLOUT_UA_PREG26_ENB : out std_logic;
    CTRLOUT_UA_PREG27_ENB : out std_logic;
    CTRLOUT_UA_PREG28_ENB : out std_logic;
    CTRLOUT_UA_PREG29_ENB : out std_logic;
    CTRLOUT_UA_PREG30_ENB : out std_logic;
    CTRLOUT_UA_PREG31_ENB : out std_logic;
    CTRLOUT_UA_MUX39_SEL : out std_logic;
    CTRLOUT_UA_MUX40_SEL : out std_logic;
    CTRLOUT_UA_MUX41_SEL : out std_logic;
    CTRLOUT_UA_MUX42_SEL : out std_logic;
    CTRLOUT_UA_MUX43_SEL : out std_logic;
    CTRLOUT_UA_MUX44_SEL : out std_logic
  );
  end component rtg_controller;

  component rtg_mux3to1_w32
  port (
    SEL : in std_logic_vector(1 downto 0);
    DIN0 : in std_logic_vector(31 downto 0);
    DIN1 : in std_logic_vector(31 downto 0);
    DIN2 : in std_logic_vector(31 downto 0);
    DOUT : out std_logic_vector(31 downto 0)
  );
  end component rtg_mux3to1_w32;

  component rtg_mux2to1_w5
  port (
    SEL : in std_logic;
    DIN0 : in std_logic_vector(4 downto 0);
    DIN1 : in std_logic_vector(4 downto 0);
    DOUT : out std_logic_vector(4 downto 0)
  );
  end component rtg_mux2to1_w5;

  component rtg_mux14to1_w32
  port (
    SEL : in std_logic_vector(3 downto 0);
    DIN0 : in std_logic_vector(31 downto 0);
    DIN1 : in std_logic_vector(31 downto 0);
    DIN2 : in std_logic_vector(31 downto 0);
    DIN3 : in std_logic_vector(31 downto 0);
    DIN4 : in std_logic_vector(31 downto 0);
    DIN5 : in std_logic_vector(31 downto 0);
    DIN6 : in std_logic_vector(31 downto 0);
    DIN7 : in std_logic_vector(31 downto 0);
    DIN8 : in std_logic_vector(31 downto 0);
    DIN9 : in std_logic_vector(31 downto 0);
    DIN10 : in std_logic_vector(31 downto 0);
    DIN11 : in std_logic_vector(31 downto 0);
    DIN12 : in std_logic_vector(31 downto 0);
    DIN13 : in std_logic_vector(31 downto 0);
    DOUT : out std_logic_vector(31 downto 0)
  );
  end component rtg_mux14to1_w32;

  component rtg_mux5to1_w5
  port (
    SEL : in std_logic_vector(2 downto 0);
    DIN0 : in std_logic_vector(4 downto 0);
    DIN1 : in std_logic_vector(4 downto 0);
    DIN2 : in std_logic_vector(4 downto 0);
    DIN3 : in std_logic_vector(4 downto 0);
    DIN4 : in std_logic_vector(4 downto 0);
    DOUT : out std_logic_vector(4 downto 0)
  );
  end component rtg_mux5to1_w5;

  component rtg_mux3to1_w5
  port (
    SEL : in std_logic_vector(1 downto 0);
    DIN0 : in std_logic_vector(4 downto 0);
    DIN1 : in std_logic_vector(4 downto 0);
    DIN2 : in std_logic_vector(4 downto 0);
    DOUT : out std_logic_vector(4 downto 0)
  );
  end component rtg_mux3to1_w5;

  component rtg_mux18to1_w32
  port (
    SEL : in std_logic_vector(4 downto 0);
    DIN0 : in std_logic_vector(31 downto 0);
    DIN1 : in std_logic_vector(31 downto 0);
    DIN2 : in std_logic_vector(31 downto 0);
    DIN3 : in std_logic_vector(31 downto 0);
    DIN4 : in std_logic_vector(31 downto 0);
    DIN5 : in std_logic_vector(31 downto 0);
    DIN6 : in std_logic_vector(31 downto 0);
    DIN7 : in std_logic_vector(31 downto 0);
    DIN8 : in std_logic_vector(31 downto 0);
    DIN9 : in std_logic_vector(31 downto 0);
    DIN10 : in std_logic_vector(31 downto 0);
    DIN11 : in std_logic_vector(31 downto 0);
    DIN12 : in std_logic_vector(31 downto 0);
    DIN13 : in std_logic_vector(31 downto 0);
    DIN14 : in std_logic_vector(31 downto 0);
    DIN15 : in std_logic_vector(31 downto 0);
    DIN16 : in std_logic_vector(31 downto 0);
    DIN17 : in std_logic_vector(31 downto 0);
    DOUT : out std_logic_vector(31 downto 0)
  );
  end component rtg_mux18to1_w32;

  component rtg_mux6to1_w5
  port (
    SEL : in std_logic_vector(2 downto 0);
    DIN0 : in std_logic_vector(4 downto 0);
    DIN1 : in std_logic_vector(4 downto 0);
    DIN2 : in std_logic_vector(4 downto 0);
    DIN3 : in std_logic_vector(4 downto 0);
    DIN4 : in std_logic_vector(4 downto 0);
    DIN5 : in std_logic_vector(4 downto 0);
    DOUT : out std_logic_vector(4 downto 0)
  );
  end component rtg_mux6to1_w5;

  component rtg_mux4to1_w5
  port (
    SEL : in std_logic_vector(1 downto 0);
    DIN0 : in std_logic_vector(4 downto 0);
    DIN1 : in std_logic_vector(4 downto 0);
    DIN2 : in std_logic_vector(4 downto 0);
    DIN3 : in std_logic_vector(4 downto 0);
    DOUT : out std_logic_vector(4 downto 0)
  );
  end component rtg_mux4to1_w5;

  component rtg_mux2to1_w7
  port (
    SEL : in std_logic;
    DIN0 : in std_logic_vector(6 downto 0);
    DIN1 : in std_logic_vector(6 downto 0);
    DOUT : out std_logic_vector(6 downto 0)
  );
  end component rtg_mux2to1_w7;

  component rtg_register_w32
  port (
    CLK : in std_logic;
    RST : in std_logic;
    ENB : in std_logic;
    DIN : in std_logic_vector(31 downto 0);
    DOUT : out std_logic_vector(31 downto 0)
  );
  end component rtg_register_w32;

  component rtg_register_w5
  port (
    CLK : in std_logic;
    RST : in std_logic;
    ENB : in std_logic;
    DIN : in std_logic_vector(4 downto 0);
    DOUT : out std_logic_vector(4 downto 0)
  );
  end component rtg_register_w5;


  signal uf_pc_data_out : std_logic_vector(31 downto 0);
  signal uf_imau_data_in : std_logic_vector(31 downto 0);
  signal uf_gpr_status_out : std_logic_vector(31 downto 0);
  signal bitrange31to27_00 : std_logic_vector(4 downto 0);
  signal bitrange26to22_00 : std_logic_vector(4 downto 0);
  signal uf_gpr_data_out0 : std_logic_vector(31 downto 0);
  signal uf_gpr_data_out1 : std_logic_vector(31 downto 0);
  signal uf_fwu0_data_out : std_logic_vector(31 downto 0);
  signal uf_fwu1_data_out : std_logic_vector(31 downto 0);
  signal concat_00 : std_logic_vector(4 downto 0);
  signal bitrange21to17_00 : std_logic_vector(4 downto 0);
  signal uf_alu_result : std_logic_vector(31 downto 0);
  signal ua_preg01_dout : std_logic_vector(31 downto 0);
  signal ua_preg02_dout : std_logic_vector(31 downto 0);
  signal bitrange31to0_00 : std_logic_vector(31 downto 0);
  signal uf_div_q : std_logic_vector(31 downto 0);
  signal uf_div_r : std_logic_vector(31 downto 0);
  signal bitrange4to0_00 : std_logic_vector(4 downto 0);
  signal uf_sftvar_data_out : std_logic_vector(31 downto 0);
  signal concat_01 : std_logic_vector(31 downto 0);
  signal concat_02 : std_logic_vector(31 downto 0);
  signal concat_03 : std_logic_vector(31 downto 0);
  signal concat_04 : std_logic_vector(31 downto 0);
  signal bitrange15to11_00 : std_logic_vector(4 downto 0);
  signal bitrange31to16_00 : std_logic_vector(15 downto 0);
  signal uf_ext16to32_data_out : std_logic_vector(31 downto 0);
  signal bitrange10to6_00 : std_logic_vector(4 downto 0);
  signal bitrange4to0_01 : std_logic_vector(4 downto 0);
  signal concat_05 : std_logic_vector(31 downto 0);
  signal uf_dmau_data_in : std_logic_vector(31 downto 0);
  signal ua_preg03_dout : std_logic_vector(31 downto 0);
  signal bitrange31to6_00 : std_logic_vector(25 downto 0);
  signal uf_ext26to32_data_out : std_logic_vector(31 downto 0);
  signal const_5h03 : std_logic_vector(4 downto 0);
  signal ua_preg00_dout : std_logic_vector(31 downto 0);
  signal const_5h02 : std_logic_vector(4 downto 0);
  signal bitor_01 : std_logic_vector(31 downto 0);
  signal bitrange7to0_00 : std_logic_vector(7 downto 0);
  signal uf_ext8to32_data_out : std_logic_vector(31 downto 0);
  signal bitrange15to0_01 : std_logic_vector(15 downto 0);
  signal uf_ext16to32a_data_out : std_logic_vector(31 downto 0);
  signal bitrange25to21_00 : std_logic_vector(4 downto 0);
  signal ua_preg05_dout : std_logic_vector(31 downto 0);
  signal bitrange20to16_00 : std_logic_vector(4 downto 0);
  signal concat_06 : std_logic_vector(31 downto 0);
  signal concat_07 : std_logic_vector(31 downto 0);
  signal bitrange6to0_00 : std_logic_vector(6 downto 0);
  signal concat_08 : std_logic_vector(31 downto 0);
  signal const_7h07 : std_logic_vector(6 downto 0);
  signal bitrange3to0_01 : std_logic_vector(3 downto 0);
  signal uf_gpr_data_out2 : std_logic_vector(31 downto 0);
  signal concat_09 : std_logic_vector(31 downto 0);
  signal uf_idx_index_out : std_logic_vector(31 downto 0);
  signal ua_preg07_dout : std_logic_vector(31 downto 0);
  signal ua_preg06_dout : std_logic_vector(31 downto 0);
  signal uf_clmp_dout : std_logic_vector(31 downto 0);
  signal uf_pcm_valpred_out : std_logic_vector(31 downto 0);
  signal uf_mmx_doutmin : std_logic_vector(31 downto 0);
  signal ua_preg08_dout : std_logic_vector(4 downto 0);
  signal uf_mmx_doutmax : std_logic_vector(31 downto 0);
  signal bitrange16to12_00 : std_logic_vector(4 downto 0);
  signal ua_preg09_dout : std_logic_vector(4 downto 0);
  signal ua_altsel00_dout : std_logic_vector(31 downto 0);
  signal ua_altsel01_dout : std_logic_vector(31 downto 0);
  signal const_b1 : std_logic;
  signal saved_pc_signal : std_logic_vector(31 downto 0);
  signal bitand_00 : std_logic_vector(31 downto 0);
  signal const_32h0000f400 : std_logic_vector(31 downto 0);
  signal const_32h0000f000 : std_logic_vector(31 downto 0);
  signal const_32h0000f800 : std_logic_vector(31 downto 0);
  signal uf_trap_hand_reg_data_out : std_logic_vector(31 downto 0);
  signal const_b0 : std_logic;
  signal uf_alu_flag : std_logic_vector(3 downto 0);
  signal uf_ir_data_out : std_logic_vector(31 downto 0);
  signal uf_mul_result : std_logic_vector(63 downto 0);
  signal bitrange1to0_00 : std_logic_vector(1 downto 0);
  signal cmpeq_00 : std_logic;
  signal cmpeq_01 : std_logic;
  signal const_31h00000000 : std_logic_vector(30 downto 0);
  signal bitor_00 : std_logic;
  signal bitpos2_00 : std_logic;
  signal bitpos3_00 : std_logic;
  signal bitnot_01 : std_logic;
  signal bitnot_00 : std_logic;
  signal bitrange15to0_00 : std_logic_vector(15 downto 0);
  signal const_16h0000 : std_logic_vector(15 downto 0);
  signal ua_preg04_dout : std_logic_vector(31 downto 0);
  signal const_32h00004300 : std_logic_vector(31 downto 0);
  signal const_28h0000000 : std_logic_vector(27 downto 0);
  signal bitrange7to4_00 : std_logic_vector(3 downto 0);
  signal bitrange3to0_00 : std_logic_vector(3 downto 0);
  signal uf_step_data_out : std_logic_vector(15 downto 0);
  signal bitrange2to0_00 : std_logic_vector(2 downto 0);
  signal cmpeq_03 : std_logic;
  signal cmpeq_04 : std_logic;
  signal bitor_02 : std_logic;
  signal uf_dummy_streg_data_out : std_logic_vector(31 downto 0);
  signal const_32hffffbcff : std_logic_vector(31 downto 0);
  signal cmpeq_02 : std_logic;
  signal cmpneq_00 : std_logic;
  signal ua_ctrl_dataout_saved_pc : std_logic_vector(31 downto 0);
  signal ua_mux00_dout : std_logic_vector(31 downto 0);
  signal ua_mux01_dout : std_logic_vector(31 downto 0);
  signal ua_preg10_dout : std_logic_vector(31 downto 0);
  signal ua_preg11_dout : std_logic_vector(31 downto 0);
  signal ua_preg12_dout : std_logic_vector(31 downto 0);
  signal ua_preg13_dout : std_logic_vector(4 downto 0);
  signal ua_mux06_dout : std_logic_vector(31 downto 0);
  signal ua_mux07_dout : std_logic_vector(31 downto 0);
  signal ua_preg14_dout : std_logic_vector(31 downto 0);
  signal ua_mux09_dout : std_logic_vector(4 downto 0);
  signal ua_mux10_dout : std_logic_vector(4 downto 0);
  signal ua_preg15_dout : std_logic_vector(4 downto 0);
  signal ua_mux12_dout : std_logic_vector(4 downto 0);
  signal ua_preg17_dout : std_logic_vector(4 downto 0);
  signal ua_mux14_dout : std_logic_vector(31 downto 0);
  signal ua_mux15_dout : std_logic_vector(31 downto 0);
  signal ua_preg18_dout : std_logic_vector(31 downto 0);
  signal ua_mux17_dout : std_logic_vector(4 downto 0);
  signal ua_mux18_dout : std_logic_vector(4 downto 0);
  signal ua_preg19_dout : std_logic_vector(4 downto 0);
  signal ua_mux20_dout : std_logic_vector(4 downto 0);
  signal ua_preg21_dout : std_logic_vector(4 downto 0);
  signal ua_mux22_dout : std_logic_vector(4 downto 0);
  signal ua_preg23_dout : std_logic_vector(4 downto 0);
  signal ua_preg25_dout : std_logic_vector(4 downto 0);
  signal ua_mux25_dout : std_logic_vector(31 downto 0);
  signal ua_preg26_dout : std_logic_vector(31 downto 0);
  signal ua_preg27_dout : std_logic_vector(31 downto 0);
  signal ua_mux28_dout : std_logic_vector(31 downto 0);
  signal ua_preg28_dout : std_logic_vector(31 downto 0);
  signal ua_mux30_dout : std_logic_vector(4 downto 0);
  signal ua_mux31_dout : std_logic_vector(4 downto 0);
  signal ua_mux32_dout : std_logic_vector(4 downto 0);
  signal ua_mux33_dout : std_logic_vector(6 downto 0);
  signal ua_preg29_dout : std_logic_vector(31 downto 0);
  signal ua_mux35_dout : std_logic_vector(31 downto 0);
  signal ua_preg30_dout : std_logic_vector(31 downto 0);
  signal ua_mux37_dout : std_logic_vector(31 downto 0);
  signal ua_preg31_dout : std_logic_vector(31 downto 0);
  signal ua_mux02_dout : std_logic_vector(31 downto 0);
  signal ua_mux03_dout : std_logic_vector(31 downto 0);
  signal ua_mux04_dout : std_logic_vector(31 downto 0);
  signal ua_mux05_dout : std_logic_vector(4 downto 0);
  signal ua_mux08_dout : std_logic_vector(31 downto 0);
  signal ua_mux11_dout : std_logic_vector(4 downto 0);
  signal ua_mux13_dout : std_logic_vector(4 downto 0);
  signal ua_preg16_dout : std_logic_vector(4 downto 0);
  signal ua_mux16_dout : std_logic_vector(31 downto 0);
  signal ua_mux19_dout : std_logic_vector(4 downto 0);
  signal ua_mux21_dout : std_logic_vector(4 downto 0);
  signal ua_preg20_dout : std_logic_vector(4 downto 0);
  signal ua_mux23_dout : std_logic_vector(4 downto 0);
  signal ua_preg22_dout : std_logic_vector(4 downto 0);
  signal ua_mux24_dout : std_logic_vector(4 downto 0);
  signal ua_preg24_dout : std_logic_vector(4 downto 0);
  signal ua_mux26_dout : std_logic_vector(31 downto 0);
  signal ua_mux27_dout : std_logic_vector(31 downto 0);
  signal ua_mux29_dout : std_logic_vector(31 downto 0);
  signal ua_mux34_dout : std_logic_vector(31 downto 0);
  signal ua_mux36_dout : std_logic_vector(31 downto 0);
  signal ua_mux38_dout : std_logic_vector(31 downto 0);
  signal ua_mux39_dout : std_logic_vector(31 downto 0);
  signal ua_mux40_dout : std_logic_vector(31 downto 0);
  signal ua_mux41_dout : std_logic_vector(31 downto 0);
  signal ua_mux42_dout : std_logic_vector(4 downto 0);
  signal ua_mux43_dout : std_logic_vector(31 downto 0);
  signal ua_mux44_dout : std_logic_vector(31 downto 0);
  signal uf_pc_load : std_logic;
  signal uf_pc_reset : std_logic;
  signal uf_pc_hold : std_logic;
  signal uf_ir_reset : std_logic;
  signal uf_ir_enb : std_logic;
  signal uf_dmau_req_out : std_logic;
  signal uf_dmau_ack_in : std_logic;
  signal uf_dmau_cancel_out : std_logic;
  signal uf_dmau_rw_out : std_logic;
  signal uf_dmau_mode_out : std_logic_vector(1 downto 0);
  signal uf_dmau_ext_out : std_logic;
  signal uf_alu_cin : std_logic;
  signal uf_alu_mode : std_logic_vector(4 downto 0);
  signal uf_mul_reset : std_logic;
  signal uf_mul_mode : std_logic;
  signal uf_mul_start : std_logic;
  signal uf_mul_clear : std_logic;
  signal uf_mul_fin : std_logic;
  signal uf_div_reset : std_logic;
  signal uf_div_clear : std_logic;
  signal uf_div_start : std_logic;
  signal uf_div_mode : std_logic;
  signal uf_div_fin : std_logic;
  signal uf_ext8to32_mode : std_logic;
  signal uf_ext16to32_mode : std_logic;
  signal uf_ext26to32_mode : std_logic;
  signal uf_sftvar_mode : std_logic_vector(1 downto 0);
  signal uf_extcatch_out_wmode : std_logic;
  signal uf_trap_hand_reg_reset : std_logic;
  signal uf_trap_hand_reg_enb : std_logic;
  signal uf_fwu0_fw1 : std_logic;
  signal uf_fwu0_fw2 : std_logic;
  signal uf_fwu1_fw1 : std_logic;
  signal uf_fwu1_fw2 : std_logic;
  signal uf_dummy_streg_reset : std_logic;
  signal uf_dummy_streg_enb : std_logic;
  signal uf_gpr_reset : std_logic;
  signal uf_gpr_w_enb0 : std_logic;
  signal uf_gpr_w_enb1 : std_logic;
  signal uf_gpr_status_enb : std_logic;
  signal uf_gpr_flag_enb : std_logic;
  signal uf_gpr_do_swap : std_logic;
  signal uf_ext16to32a_mode : std_logic;
  signal uf_step_clock : std_logic;
  signal uf_step_reset : std_logic;
  signal uf_step_enb : std_logic;
  signal uf_idx_clock_new : std_logic;
  signal uf_idx_reset_new : std_logic;
  signal uf_idx_enb_new : std_logic;
  signal uf_clmp_clock : std_logic;
  signal uf_clmp_reset : std_logic;
  signal uf_clmp_enb : std_logic;
  signal uf_pcm_clock_new : std_logic;
  signal uf_pcm_reset_new : std_logic;
  signal uf_pcm_enb_new : std_logic;
  signal uf_fwu2_fw1 : std_logic;
  signal uf_fwu2_fw2 : std_logic;
  signal uf_fwu3_fw1 : std_logic;
  signal uf_fwu3_fw2 : std_logic;
  signal uf_mmx_clock : std_logic;
  signal uf_mmx_reset : std_logic;
  signal uf_mmx_enb : std_logic;
  signal ua_mux00_sel : std_logic;
  signal ua_mux01_sel : std_logic_vector(1 downto 0);
  signal ua_mux02_sel : std_logic;
  signal ua_mux03_sel : std_logic_vector(1 downto 0);
  signal ua_mux04_sel : std_logic_vector(1 downto 0);
  signal ua_mux05_sel : std_logic;
  signal ua_mux06_sel : std_logic_vector(3 downto 0);
  signal ua_mux07_sel : std_logic;
  signal ua_mux08_sel : std_logic_vector(3 downto 0);
  signal ua_mux09_sel : std_logic_vector(2 downto 0);
  signal ua_mux10_sel : std_logic;
  signal ua_mux11_sel : std_logic_vector(1 downto 0);
  signal ua_mux12_sel : std_logic;
  signal ua_mux13_sel : std_logic_vector(1 downto 0);
  signal ua_mux14_sel : std_logic_vector(3 downto 0);
  signal ua_mux15_sel : std_logic;
  signal ua_mux16_sel : std_logic_vector(3 downto 0);
  signal ua_mux17_sel : std_logic;
  signal ua_mux18_sel : std_logic;
  signal ua_mux19_sel : std_logic_vector(1 downto 0);
  signal ua_mux20_sel : std_logic;
  signal ua_mux21_sel : std_logic_vector(1 downto 0);
  signal ua_mux22_sel : std_logic;
  signal ua_mux23_sel : std_logic_vector(2 downto 0);
  signal ua_mux24_sel : std_logic_vector(1 downto 0);
  signal ua_mux25_sel : std_logic_vector(1 downto 0);
  signal ua_mux26_sel : std_logic_vector(4 downto 0);
  signal ua_mux27_sel : std_logic;
  signal ua_mux28_sel : std_logic;
  signal ua_mux29_sel : std_logic_vector(1 downto 0);
  signal ua_mux30_sel : std_logic_vector(2 downto 0);
  signal ua_mux31_sel : std_logic_vector(1 downto 0);
  signal ua_mux32_sel : std_logic;
  signal ua_mux33_sel : std_logic;
  signal ua_mux34_sel : std_logic;
  signal ua_mux35_sel : std_logic;
  signal ua_mux36_sel : std_logic;
  signal ua_mux37_sel : std_logic;
  signal ua_mux38_sel : std_logic;
  signal ua_preg00_enb : std_logic;
  signal ua_preg01_enb : std_logic;
  signal ua_preg02_enb : std_logic;
  signal ua_preg03_enb : std_logic;
  signal ua_preg04_enb : std_logic;
  signal ua_preg05_enb : std_logic;
  signal ua_preg06_enb : std_logic;
  signal ua_preg07_enb : std_logic;
  signal ua_preg08_enb : std_logic;
  signal ua_preg09_enb : std_logic;
  signal ua_preg10_enb : std_logic;
  signal ua_preg11_enb : std_logic;
  signal ua_preg12_enb : std_logic;
  signal ua_preg13_enb : std_logic;
  signal ua_preg14_enb : std_logic;
  signal ua_preg15_enb : std_logic;
  signal ua_preg16_enb : std_logic;
  signal ua_preg17_enb : std_logic;
  signal ua_preg18_enb : std_logic;
  signal ua_preg19_enb : std_logic;
  signal ua_preg20_enb : std_logic;
  signal ua_preg21_enb : std_logic;
  signal ua_preg22_enb : std_logic;
  signal ua_preg23_enb : std_logic;
  signal ua_preg24_enb : std_logic;
  signal ua_preg25_enb : std_logic;
  signal ua_preg26_enb : std_logic;
  signal ua_preg27_enb : std_logic;
  signal ua_preg28_enb : std_logic;
  signal ua_preg29_enb : std_logic;
  signal ua_preg30_enb : std_logic;
  signal ua_preg31_enb : std_logic;
  signal ua_mux39_sel : std_logic;
  signal ua_mux40_sel : std_logic;
  signal ua_mux41_sel : std_logic;
  signal ua_mux42_sel : std_logic;
  signal ua_mux43_sel : std_logic;
  signal ua_mux44_sel : std_logic;
  signal unused_00 : std_logic;
  signal unused_01 : std_logic;
  signal unused_02 : std_logic;
  signal unused_03 : std_logic;
  signal unused_04 : std_logic;
  signal unused_05 : std_logic_vector(4 downto 0);
  signal unused_06 : std_logic_vector(31 downto 0);
  signal unused_07 : std_logic;
  signal unused_08 : std_logic;
  signal unused_09 : std_logic_vector(31 downto 0);
  signal unused_10 : std_logic_vector(4 downto 0);
  signal unused_11 : std_logic_vector(31 downto 0);
  signal unused_12 : std_logic_vector(31 downto 0);
  signal unused_13 : std_logic_vector(4 downto 0);
  signal unused_14 : std_logic_vector(31 downto 0);
  signal unused_15 : std_logic;

begin
  UF_PC : fhm_pcu_w32
    port map (
      clock => CLK, 
      async_reset => RESET, 
      load => uf_pc_load, 
      reset => uf_pc_reset, 
      hold => uf_pc_hold, 
      data_in => ua_mux39_dout, 
      data_out => uf_pc_data_out
    );

  UF_IR : fhm_register_w32
    port map (
      clock => CLK, 
      async_reset => RESET, 
      reset => uf_ir_reset, 
      enb => uf_ir_enb, 
      data_in => uf_imau_data_in, 
      data_out => uf_ir_data_out
    );

  UF_IMAU : fhm_mifu_w32_00
    port map (
      addr_out => uf_pc_data_out, 
      data_in => uf_imau_data_in, 
      aderr_in => unused_00, 
      addr2mem => IMEM_ADDR_OUT, 
      data2cpu => IMEM_DATA_IN, 
      aderr2cpu => IMEM_ADDRERR_IN
    );

  UF_DMAU : fhm_mifu_w32_01
    port map (
      req_out => uf_dmau_req_out, 
      ack_in => uf_dmau_ack_in, 
      cancel_out => uf_dmau_cancel_out, 
      req2mem => DMEM_REQ_OUT, 
      ack2cpu => DMEM_ACK_IN, 
      cancel2mem => DMEM_CANCEL_OUT, 
      addr_out => ua_preg10_dout, 
      data_in => uf_dmau_data_in, 
      aderr_in => unused_01, 
      addr2mem => DMEM_ADDR_OUT, 
      data2cpu => DMEM_DATA_IN, 
      aderr2cpu => DMEM_ADDRERR_IN, 
      rw_out => uf_dmau_rw_out, 
      data_out => ua_preg03_dout, 
      rw2mem => DMEM_RW_OUT, 
      data2mem => DMEM_DATA_OUT, 
      mode_out => uf_dmau_mode_out, 
      ext_out => uf_dmau_ext_out, 
      mode2mem => DMEM_WMODE_OUT, 
      ext2mem => DMEM_EMODE_OUT
    );

  UF_ALU : fhm_alu_w32
    port map (
      a => ua_mux40_dout, 
      b => ua_mux41_dout, 
      cin => uf_alu_cin, 
      mode => uf_alu_mode, 
      result => uf_alu_result, 
      flag => uf_alu_flag
    );

  UF_MUL : fhm_multiplier_w32
    port map (
      clock => CLK, 
      async_reset => RESET, 
      reset => uf_mul_reset, 
      a => ua_preg01_dout, 
      b => ua_preg02_dout, 
      mode => uf_mul_mode, 
      start => uf_mul_start, 
      clear => uf_mul_clear, 
      result => uf_mul_result, 
      fin => uf_mul_fin
    );

  UF_DIV : fhm_divider_w32
    port map (
      clock => CLK, 
      async_reset => RESET, 
      reset => uf_div_reset, 
      clear => uf_div_clear, 
      a => ua_preg01_dout, 
      b => ua_preg02_dout, 
      start => uf_div_start, 
      mode => uf_div_mode, 
      q => uf_div_q, 
      r => uf_div_r, 
      flag => unused_02, 
      fin => uf_div_fin
    );

  UF_EXT8TO32 : fhm_extender_w8
    port map (
      data_in => bitrange7to0_00, 
      mode => uf_ext8to32_mode, 
      data_out => uf_ext8to32_data_out
    );

  UF_EXT16TO32 : fhm_extender_w16
    port map (
      data_in => bitrange31to16_00, 
      mode => uf_ext16to32_mode, 
      data_out => uf_ext16to32_data_out
    );

  UF_EXT26TO32 : fhm_extender_w26
    port map (
      data_in => bitrange31to6_00, 
      mode => uf_ext26to32_mode, 
      data_out => uf_ext26to32_data_out
    );

  UF_SFTvar : fhm_shifter_w32
    port map (
      data_in => ua_preg01_dout, 
      mode => uf_sftvar_mode, 
      ctrl => ua_preg13_dout, 
      data_out => uf_sftvar_data_out
    );

  UF_EXTINT : fhm_wire_in_w1
    port map (
      int_port => unused_03, 
      ext_port => unused_04
    );

  UF_EXTCATCH_OUT : fhm_wire_out_w1
    port map (
      int_port => const_b1, 
      ext_port => EXTCATCH_OUT, 
      wmode => uf_extcatch_out_wmode
    );

  UF_TRAP_HAND_REG : fhm_register_w32
    port map (
      clock => CLK, 
      async_reset => RESET, 
      reset => uf_trap_hand_reg_reset, 
      enb => uf_trap_hand_reg_enb, 
      data_in => uf_ext26to32_data_out, 
      data_out => uf_trap_hand_reg_data_out
    );

  UF_FWU0 : fhm_fwu_w32
    port map (
      data0 => uf_gpr_data_out0, 
      data1 => ua_mux06_dout, 
      data2 => ua_mux07_dout, 
      num0 => ua_mux09_dout, 
      num1 => ua_mux10_dout, 
      num2 => ua_mux12_dout, 
      fw1 => uf_fwu0_fw1, 
      fw2 => uf_fwu0_fw2, 
      data_out => uf_fwu0_data_out
    );

  UF_FWU1 : fhm_fwu_w32
    port map (
      data0 => uf_gpr_data_out1, 
      data1 => ua_mux14_dout, 
      data2 => ua_mux15_dout, 
      num0 => ua_mux17_dout, 
      num1 => ua_mux18_dout, 
      num2 => ua_mux20_dout, 
      fw1 => uf_fwu1_fw1, 
      fw2 => uf_fwu1_fw2, 
      data_out => uf_fwu1_data_out
    );

  UF_DUMMY_STREG : fhm_dummy_register_w32
    port map (
      clock => CLK, 
      async_reset => RESET, 
      reset => uf_dummy_streg_reset, 
      enb => uf_dummy_streg_enb, 
      data_in => uf_gpr_status_out, 
      data_out => uf_dummy_streg_data_out
    );

  UF_GPR : fhm_browregfile_w32
    port map (
      clock => CLK, 
      async_reset => RESET, 
      reset => uf_gpr_reset, 
      w_enb0 => uf_gpr_w_enb0, 
      w_enb1 => uf_gpr_w_enb1, 
      w_sel0 => ua_mux42_dout, 
      w_sel1 => ua_preg25_dout, 
      data_in0 => ua_mux43_dout, 
      data_in1 => ua_mux28_dout, 
      r_sel0 => ua_mux30_dout, 
      r_sel1 => ua_mux31_dout, 
      r_sel2 => ua_mux32_dout, 
      r_sel3 => unused_05, 
      data_out0 => uf_gpr_data_out0, 
      data_out1 => uf_gpr_data_out1, 
      data_out2 => uf_gpr_data_out2, 
      data_out3 => unused_06, 
      status_out => uf_gpr_status_out, 
      status_in => ua_mux44_dout, 
      status_enb => uf_gpr_status_enb, 
      flag_in => concat_00, 
      flag_enb => uf_gpr_flag_enb, 
      do_swap => uf_gpr_do_swap, 
      next_bank => unused_07, 
      current_bank => unused_08
    );

  UF_EXT16TO32A : fhm_extender_w16
    port map (
      data_in => bitrange15to0_01, 
      mode => uf_ext16to32a_mode, 
      data_out => uf_ext16to32a_data_out
    );

  UF_STEP : fhm_stepsize_w4
    port map (
      clock => uf_step_clock, 
      reset => uf_step_reset, 
      enb => uf_step_enb, 
      data_in => ua_mux33_dout, 
      data_out => uf_step_data_out
    );

  UF_IDX : fhm_index_w4
    port map (
      clock_new => uf_idx_clock_new, 
      reset_new => uf_idx_reset_new, 
      enb_new => uf_idx_enb_new, 
      data_in_new => bitrange3to0_01, 
      index_in => ua_preg29_dout, 
      index_out => uf_idx_index_out
    );

  UF_CLMP : fhm_clamp_w4
    port map (
      clock => uf_clmp_clock, 
      reset => uf_clmp_reset, 
      enb => uf_clmp_enb, 
      cmpval => ua_preg05_dout, 
      greaterval => ua_preg07_dout, 
      lesserval => ua_preg06_dout, 
      dout => uf_clmp_dout
    );

  UF_PCM : fhm_adpcm_w4
    port map (
      clock_new => uf_pcm_clock_new, 
      reset_new => uf_pcm_reset_new, 
      enb_new => uf_pcm_enb_new, 
      step => ua_preg05_dout, 
      delta => ua_preg06_dout, 
      valpred_in => ua_preg07_dout, 
      valpred_out => uf_pcm_valpred_out
    );

  UF_FWU2 : fhm_fwu_w32
    port map (
      data0 => unused_09, 
      data1 => ua_mux35_dout, 
      data2 => ua_preg30_dout, 
      num0 => unused_10, 
      num1 => ua_preg08_dout, 
      num2 => ua_preg09_dout, 
      fw1 => uf_fwu2_fw1, 
      fw2 => uf_fwu2_fw2, 
      data_out => unused_11
    );

  UF_FWU3 : fhm_fwu_w32
    port map (
      data0 => unused_12, 
      data1 => ua_mux37_dout, 
      data2 => ua_preg31_dout, 
      num0 => unused_13, 
      num1 => ua_preg08_dout, 
      num2 => ua_preg09_dout, 
      fw1 => uf_fwu3_fw1, 
      fw2 => uf_fwu3_fw2, 
      data_out => unused_14
    );

  UF_MMX : fhm_minmax_w32
    port map (
      clock => uf_mmx_clock, 
      reset => uf_mmx_reset, 
      enb => uf_mmx_enb, 
      din1 => ua_preg01_dout, 
      din2 => ua_preg02_dout, 
      doutMin => uf_mmx_doutmin, 
      doutMax => uf_mmx_doutmax
    );

  UA_ALTSEL00 : rtg_mux2to1_w32
    port map (
      SEL => bitor_02, 
      DIN0 => ua_preg02_dout, 
      DIN1 => ua_preg01_dout, 
      DOUT => ua_altsel00_dout
    );

  UA_ALTSEL01 : rtg_mux2to1_w32
    port map (
      SEL => bitor_02, 
      DIN0 => ua_preg01_dout, 
      DIN1 => ua_preg02_dout, 
      DOUT => ua_altsel01_dout
    );

  UA_CTRL : rtg_controller
    port map (
      CLK => CLK, 
      RST => RESET, 
      INTREQ_RESET => RESET, 
      INTREQ_EXTINT_IN => EXTINT_IN, 
      DATAIN_DUMMY_STREG_DATA_OUT => uf_dummy_streg_data_out, 
      CTRLIN_CMPEQ_02_EXE => cmpeq_02, 
      CTRLIN_CMPNEQ_00_EXE => cmpneq_00, 
      CTRLIN_MUL_FIN => uf_mul_fin, 
      CTRLOUT_MUL_CLEAR => uf_mul_clear, 
      CTRLIN_DIV_FIN => uf_div_fin, 
      CTRLOUT_DIV_CLEAR => uf_div_clear, 
      CTRLIN_DMAU_ACK_IN => uf_dmau_ack_in, 
      CTRLOUT_DMAU_CANCEL_OUT => uf_dmau_cancel_out, 
      DATAIN_PC_DATA_OUT => uf_pc_data_out, 
      DATAOUT_SAVED_PC => ua_ctrl_dataout_saved_pc, 
      DATAOUT_DS_OFFSET => unused_15, 
      DATAIN_IR_DATA_OUT => uf_ir_data_out, 
      CTRLOUT_IR_ENB => uf_ir_enb, 
      CTRLOUT_PC_HOLD => uf_pc_hold, 
      CTRLOUT_DUMMY_STREG_ENB => uf_dummy_streg_enb, 
      CTRLOUT_ALU_MODE => uf_alu_mode, 
      CTRLOUT_ALU_CIN => uf_alu_cin, 
      CTRLOUT_GPR_FLAG_ENB => uf_gpr_flag_enb, 
      CTRLOUT_FWU0_FW1 => uf_fwu0_fw1, 
      CTRLOUT_FWU1_FW1 => uf_fwu1_fw1, 
      CTRLOUT_GPR_W_ENB0 => uf_gpr_w_enb0, 
      CTRLOUT_FWU0_FW2 => uf_fwu0_fw2, 
      CTRLOUT_FWU1_FW2 => uf_fwu1_fw2, 
      CTRLOUT_MUL_MODE => uf_mul_mode, 
      CTRLOUT_DIV_MODE => uf_div_mode, 
      CTRLOUT_SFTVAR_MODE => uf_sftvar_mode, 
      CTRLOUT_EXT16TO32_MODE => uf_ext16to32_mode, 
      CTRLOUT_DMAU_RW_OUT => uf_dmau_rw_out, 
      CTRLOUT_DMAU_MODE_OUT => uf_dmau_mode_out, 
      CTRLOUT_DMAU_EXT_OUT => uf_dmau_ext_out, 
      CTRLOUT_PC_LOAD => uf_pc_load, 
      CTRLOUT_EXT26TO32_MODE => uf_ext26to32_mode, 
      CTRLOUT_TRAP_HAND_REG_ENB => uf_trap_hand_reg_enb, 
      CTRLOUT_GPR_STATUS_ENB => uf_gpr_status_enb, 
      CTRLOUT_EXT8TO32_MODE => uf_ext8to32_mode, 
      CTRLOUT_EXT16TO32A_MODE => uf_ext16to32a_mode, 
      CTRLOUT_GPR_W_ENB1 => uf_gpr_w_enb1, 
      CTRLOUT_STEP_ENB => uf_step_enb, 
      CTRLOUT_IDX_ENB_NEW => uf_idx_enb_new, 
      CTRLOUT_CLMP_ENB => uf_clmp_enb, 
      CTRLOUT_PCM_ENB_NEW => uf_pcm_enb_new, 
      CTRLOUT_MMX_ENB => uf_mmx_enb, 
      CTRLOUT_FWU2_FW1 => uf_fwu2_fw1, 
      CTRLOUT_FWU3_FW1 => uf_fwu3_fw1, 
      CTRLOUT_FWU2_FW2 => uf_fwu2_fw2, 
      CTRLOUT_FWU3_FW2 => uf_fwu3_fw2, 
      CTRLOUT_MUL_START => uf_mul_start, 
      CTRLOUT_DIV_START => uf_div_start, 
      CTRLOUT_DMAU_REQ_OUT => uf_dmau_req_out, 
      CTRLOUT_EXTCATCH_OUT_WMODE => uf_extcatch_out_wmode, 
      CTRLOUT_GPR_RESET => uf_gpr_reset, 
      CTRLOUT_IR_RESET => uf_ir_reset, 
      CTRLOUT_DIV_RESET => uf_div_reset, 
      CTRLOUT_MUL_RESET => uf_mul_reset, 
      CTRLOUT_TRAP_HAND_REG_RESET => uf_trap_hand_reg_reset, 
      CTRLOUT_UA_MUX00_SEL => ua_mux00_sel, 
      CTRLOUT_UA_MUX01_SEL => ua_mux01_sel, 
      CTRLOUT_UA_MUX02_SEL => ua_mux02_sel, 
      CTRLOUT_UA_MUX03_SEL => ua_mux03_sel, 
      CTRLOUT_UA_MUX04_SEL => ua_mux04_sel, 
      CTRLOUT_UA_MUX05_SEL => ua_mux05_sel, 
      CTRLOUT_UA_MUX06_SEL => ua_mux06_sel, 
      CTRLOUT_UA_MUX07_SEL => ua_mux07_sel, 
      CTRLOUT_UA_MUX08_SEL => ua_mux08_sel, 
      CTRLOUT_UA_MUX09_SEL => ua_mux09_sel, 
      CTRLOUT_UA_MUX10_SEL => ua_mux10_sel, 
      CTRLOUT_UA_MUX11_SEL => ua_mux11_sel, 
      CTRLOUT_UA_MUX12_SEL => ua_mux12_sel, 
      CTRLOUT_UA_MUX13_SEL => ua_mux13_sel, 
      CTRLOUT_UA_MUX14_SEL => ua_mux14_sel, 
      CTRLOUT_UA_MUX15_SEL => ua_mux15_sel, 
      CTRLOUT_UA_MUX16_SEL => ua_mux16_sel, 
      CTRLOUT_UA_MUX17_SEL => ua_mux17_sel, 
      CTRLOUT_UA_MUX18_SEL => ua_mux18_sel, 
      CTRLOUT_UA_MUX19_SEL => ua_mux19_sel, 
      CTRLOUT_UA_MUX20_SEL => ua_mux20_sel, 
      CTRLOUT_UA_MUX21_SEL => ua_mux21_sel, 
      CTRLOUT_UA_MUX22_SEL => ua_mux22_sel, 
      CTRLOUT_UA_MUX23_SEL => ua_mux23_sel, 
      CTRLOUT_UA_MUX24_SEL => ua_mux24_sel, 
      CTRLOUT_UA_MUX25_SEL => ua_mux25_sel, 
      CTRLOUT_UA_MUX26_SEL => ua_mux26_sel, 
      CTRLOUT_UA_MUX27_SEL => ua_mux27_sel, 
      CTRLOUT_UA_MUX28_SEL => ua_mux28_sel, 
      CTRLOUT_UA_MUX29_SEL => ua_mux29_sel, 
      CTRLOUT_UA_MUX30_SEL => ua_mux30_sel, 
      CTRLOUT_UA_MUX31_SEL => ua_mux31_sel, 
      CTRLOUT_UA_MUX32_SEL => ua_mux32_sel, 
      CTRLOUT_UA_MUX33_SEL => ua_mux33_sel, 
      CTRLOUT_UA_MUX34_SEL => ua_mux34_sel, 
      CTRLOUT_UA_MUX35_SEL => ua_mux35_sel, 
      CTRLOUT_UA_MUX36_SEL => ua_mux36_sel, 
      CTRLOUT_UA_MUX37_SEL => ua_mux37_sel, 
      CTRLOUT_UA_MUX38_SEL => ua_mux38_sel, 
      CTRLOUT_UA_PREG00_ENB => ua_preg00_enb, 
      CTRLOUT_UA_PREG01_ENB => ua_preg01_enb, 
      CTRLOUT_UA_PREG02_ENB => ua_preg02_enb, 
      CTRLOUT_UA_PREG03_ENB => ua_preg03_enb, 
      CTRLOUT_UA_PREG04_ENB => ua_preg04_enb, 
      CTRLOUT_UA_PREG05_ENB => ua_preg05_enb, 
      CTRLOUT_UA_PREG06_ENB => ua_preg06_enb, 
      CTRLOUT_UA_PREG07_ENB => ua_preg07_enb, 
      CTRLOUT_UA_PREG08_ENB => ua_preg08_enb, 
      CTRLOUT_UA_PREG09_ENB => ua_preg09_enb, 
      CTRLOUT_UA_PREG10_ENB => ua_preg10_enb, 
      CTRLOUT_UA_PREG11_ENB => ua_preg11_enb, 
      CTRLOUT_UA_PREG12_ENB => ua_preg12_enb, 
      CTRLOUT_UA_PREG13_ENB => ua_preg13_enb, 
      CTRLOUT_UA_PREG14_ENB => ua_preg14_enb, 
      CTRLOUT_UA_PREG15_ENB => ua_preg15_enb, 
      CTRLOUT_UA_PREG16_ENB => ua_preg16_enb, 
      CTRLOUT_UA_PREG17_ENB => ua_preg17_enb, 
      CTRLOUT_UA_PREG18_ENB => ua_preg18_enb, 
      CTRLOUT_UA_PREG19_ENB => ua_preg19_enb, 
      CTRLOUT_UA_PREG20_ENB => ua_preg20_enb, 
      CTRLOUT_UA_PREG21_ENB => ua_preg21_enb, 
      CTRLOUT_UA_PREG22_ENB => ua_preg22_enb, 
      CTRLOUT_UA_PREG23_ENB => ua_preg23_enb, 
      CTRLOUT_UA_PREG24_ENB => ua_preg24_enb, 
      CTRLOUT_UA_PREG25_ENB => ua_preg25_enb, 
      CTRLOUT_UA_PREG26_ENB => ua_preg26_enb, 
      CTRLOUT_UA_PREG27_ENB => ua_preg27_enb, 
      CTRLOUT_UA_PREG28_ENB => ua_preg28_enb, 
      CTRLOUT_UA_PREG29_ENB => ua_preg29_enb, 
      CTRLOUT_UA_PREG30_ENB => ua_preg30_enb, 
      CTRLOUT_UA_PREG31_ENB => ua_preg31_enb, 
      CTRLOUT_UA_MUX39_SEL => ua_mux39_sel, 
      CTRLOUT_UA_MUX40_SEL => ua_mux40_sel, 
      CTRLOUT_UA_MUX41_SEL => ua_mux41_sel, 
      CTRLOUT_UA_MUX42_SEL => ua_mux42_sel, 
      CTRLOUT_UA_MUX43_SEL => ua_mux43_sel, 
      CTRLOUT_UA_MUX44_SEL => ua_mux44_sel
    );

  UA_MUX00 : rtg_mux2to1_w32
    port map (
      SEL => ua_mux00_sel, 
      DIN0 => uf_alu_result, 
      DIN1 => ua_preg01_dout, 
      DOUT => ua_mux00_dout
    );

  UA_MUX01 : rtg_mux3to1_w32
    port map (
      SEL => ua_mux01_sel, 
      DIN0 => const_32h0000f400, 
      DIN1 => const_32h0000f000, 
      DIN2 => uf_alu_result, 
      DOUT => ua_mux01_dout
    );

  UA_MUX02 : rtg_mux2to1_w32
    port map (
      SEL => ua_mux02_sel, 
      DIN0 => uf_alu_result, 
      DIN1 => ua_preg05_dout, 
      DOUT => ua_mux02_dout
    );

  UA_MUX03 : rtg_mux3to1_w32
    port map (
      SEL => ua_mux03_sel, 
      DIN0 => uf_fwu0_data_out, 
      DIN1 => concat_05, 
      DIN2 => uf_pc_data_out, 
      DOUT => ua_mux03_dout
    );

  UA_MUX04 : rtg_mux3to1_w32
    port map (
      SEL => ua_mux04_sel, 
      DIN0 => uf_fwu1_data_out, 
      DIN1 => uf_ext16to32_data_out, 
      DIN2 => uf_ext26to32_data_out, 
      DOUT => ua_mux04_dout
    );

  UA_MUX05 : rtg_mux2to1_w5
    port map (
      SEL => ua_mux05_sel, 
      DIN0 => bitrange4to0_00, 
      DIN1 => bitrange4to0_01, 
      DOUT => ua_mux05_dout
    );

  UA_MUX06 : rtg_mux14to1_w32
    port map (
      SEL => ua_mux06_sel, 
      DIN0 => uf_alu_result, 
      DIN1 => bitrange31to0_00, 
      DIN2 => uf_div_q, 
      DIN3 => uf_div_r, 
      DIN4 => uf_sftvar_data_out, 
      DIN5 => concat_01, 
      DIN6 => concat_02, 
      DIN7 => concat_03, 
      DIN8 => concat_04, 
      DIN9 => uf_ext8to32_data_out, 
      DIN10 => uf_ext16to32a_data_out, 
      DIN11 => uf_mmx_doutmin, 
      DIN12 => ua_altsel00_dout, 
      DIN13 => ua_preg00_dout, 
      DOUT => ua_mux06_dout
    );

  UA_MUX07 : rtg_mux2to1_w32
    port map (
      SEL => ua_mux07_sel, 
      DIN0 => uf_dmau_data_in, 
      DIN1 => ua_preg14_dout, 
      DOUT => ua_mux07_dout
    );

  UA_MUX08 : rtg_mux14to1_w32
    port map (
      SEL => ua_mux08_sel, 
      DIN0 => uf_alu_result, 
      DIN1 => bitrange31to0_00, 
      DIN2 => uf_div_q, 
      DIN3 => uf_div_r, 
      DIN4 => uf_sftvar_data_out, 
      DIN5 => concat_01, 
      DIN6 => concat_02, 
      DIN7 => concat_03, 
      DIN8 => concat_04, 
      DIN9 => uf_ext8to32_data_out, 
      DIN10 => uf_ext16to32a_data_out, 
      DIN11 => uf_mmx_doutmin, 
      DIN12 => ua_altsel00_dout, 
      DIN13 => ua_preg00_dout, 
      DOUT => ua_mux08_dout
    );

  UA_MUX09 : rtg_mux5to1_w5
    port map (
      SEL => ua_mux09_sel, 
      DIN0 => bitrange31to27_00, 
      DIN1 => bitrange15to11_00, 
      DIN2 => bitrange10to6_00, 
      DIN3 => const_5h02, 
      DIN4 => bitrange26to22_00, 
      DOUT => ua_mux09_dout
    );

  UA_MUX10 : rtg_mux2to1_w5
    port map (
      SEL => ua_mux10_sel, 
      DIN0 => const_5h03, 
      DIN1 => ua_preg15_dout, 
      DOUT => ua_mux10_dout
    );

  UA_MUX11 : rtg_mux3to1_w5
    port map (
      SEL => ua_mux11_sel, 
      DIN0 => bitrange21to17_00, 
      DIN1 => bitrange10to6_00, 
      DIN2 => bitrange31to27_00, 
      DOUT => ua_mux11_dout
    );

  UA_MUX12 : rtg_mux2to1_w5
    port map (
      SEL => ua_mux12_sel, 
      DIN0 => const_5h03, 
      DIN1 => ua_preg17_dout, 
      DOUT => ua_mux12_dout
    );

  UA_MUX13 : rtg_mux3to1_w5
    port map (
      SEL => ua_mux13_sel, 
      DIN0 => bitrange21to17_00, 
      DIN1 => bitrange10to6_00, 
      DIN2 => bitrange31to27_00, 
      DOUT => ua_mux13_dout
    );

  UA_MUX14 : rtg_mux14to1_w32
    port map (
      SEL => ua_mux14_sel, 
      DIN0 => uf_alu_result, 
      DIN1 => bitrange31to0_00, 
      DIN2 => uf_div_q, 
      DIN3 => uf_div_r, 
      DIN4 => uf_sftvar_data_out, 
      DIN5 => concat_01, 
      DIN6 => concat_02, 
      DIN7 => concat_03, 
      DIN8 => concat_04, 
      DIN9 => uf_ext8to32_data_out, 
      DIN10 => uf_ext16to32a_data_out, 
      DIN11 => uf_mmx_doutmin, 
      DIN12 => ua_altsel00_dout, 
      DIN13 => ua_preg00_dout, 
      DOUT => ua_mux14_dout
    );

  UA_MUX15 : rtg_mux2to1_w32
    port map (
      SEL => ua_mux15_sel, 
      DIN0 => uf_dmau_data_in, 
      DIN1 => ua_preg18_dout, 
      DOUT => ua_mux15_dout
    );

  UA_MUX16 : rtg_mux14to1_w32
    port map (
      SEL => ua_mux16_sel, 
      DIN0 => uf_alu_result, 
      DIN1 => bitrange31to0_00, 
      DIN2 => uf_div_q, 
      DIN3 => uf_div_r, 
      DIN4 => uf_sftvar_data_out, 
      DIN5 => concat_01, 
      DIN6 => concat_02, 
      DIN7 => concat_03, 
      DIN8 => concat_04, 
      DIN9 => uf_ext8to32_data_out, 
      DIN10 => uf_ext16to32a_data_out, 
      DIN11 => uf_mmx_doutmin, 
      DIN12 => ua_altsel00_dout, 
      DIN13 => ua_preg00_dout, 
      DOUT => ua_mux16_dout
    );

  UA_MUX17 : rtg_mux2to1_w5
    port map (
      SEL => ua_mux17_sel, 
      DIN0 => bitrange26to22_00, 
      DIN1 => bitrange15to11_00, 
      DOUT => ua_mux17_dout
    );

  UA_MUX18 : rtg_mux2to1_w5
    port map (
      SEL => ua_mux18_sel, 
      DIN0 => const_5h03, 
      DIN1 => ua_preg19_dout, 
      DOUT => ua_mux18_dout
    );

  UA_MUX19 : rtg_mux3to1_w5
    port map (
      SEL => ua_mux19_sel, 
      DIN0 => bitrange21to17_00, 
      DIN1 => bitrange10to6_00, 
      DIN2 => bitrange31to27_00, 
      DOUT => ua_mux19_dout
    );

  UA_MUX20 : rtg_mux2to1_w5
    port map (
      SEL => ua_mux20_sel, 
      DIN0 => const_5h03, 
      DIN1 => ua_preg21_dout, 
      DOUT => ua_mux20_dout
    );

  UA_MUX21 : rtg_mux3to1_w5
    port map (
      SEL => ua_mux21_sel, 
      DIN0 => bitrange21to17_00, 
      DIN1 => bitrange10to6_00, 
      DIN2 => bitrange31to27_00, 
      DOUT => ua_mux21_dout
    );

  UA_MUX22 : rtg_mux2to1_w5
    port map (
      SEL => ua_mux22_sel, 
      DIN0 => const_5h03, 
      DIN1 => ua_preg23_dout, 
      DOUT => ua_mux22_dout
    );

  UA_MUX23 : rtg_mux5to1_w5
    port map (
      SEL => ua_mux23_sel, 
      DIN0 => bitrange21to17_00, 
      DIN1 => bitrange10to6_00, 
      DIN2 => bitrange31to27_00, 
      DIN3 => bitrange20to16_00, 
      DIN4 => bitrange15to11_00, 
      DOUT => ua_mux23_dout
    );

  UA_MUX24 : rtg_mux3to1_w5
    port map (
      SEL => ua_mux24_sel, 
      DIN0 => bitrange15to11_00, 
      DIN1 => bitrange10to6_00, 
      DIN2 => bitrange16to12_00, 
      DOUT => ua_mux24_dout
    );

  UA_MUX25 : rtg_mux3to1_w32
    port map (
      SEL => ua_mux25_sel, 
      DIN0 => uf_dmau_data_in, 
      DIN1 => concat_06, 
      DIN2 => ua_preg26_dout, 
      DOUT => ua_mux25_dout
    );

  UA_MUX26 : rtg_mux18to1_w32
    port map (
      SEL => ua_mux26_sel, 
      DIN0 => uf_alu_result, 
      DIN1 => bitrange31to0_00, 
      DIN2 => uf_div_q, 
      DIN3 => uf_div_r, 
      DIN4 => uf_sftvar_data_out, 
      DIN5 => concat_01, 
      DIN6 => concat_02, 
      DIN7 => concat_03, 
      DIN8 => concat_04, 
      DIN9 => uf_ext8to32_data_out, 
      DIN10 => uf_ext16to32a_data_out, 
      DIN11 => concat_08, 
      DIN12 => uf_idx_index_out, 
      DIN13 => uf_clmp_dout, 
      DIN14 => uf_pcm_valpred_out, 
      DIN15 => uf_mmx_doutmin, 
      DIN16 => ua_altsel00_dout, 
      DIN17 => ua_preg27_dout, 
      DOUT => ua_mux26_dout
    );

  UA_MUX27 : rtg_mux2to1_w32
    port map (
      SEL => ua_mux27_sel, 
      DIN0 => uf_pc_data_out, 
      DIN1 => concat_09, 
      DOUT => ua_mux27_dout
    );

  UA_MUX28 : rtg_mux2to1_w32
    port map (
      SEL => ua_mux28_sel, 
      DIN0 => concat_07, 
      DIN1 => ua_preg28_dout, 
      DOUT => ua_mux28_dout
    );

  UA_MUX29 : rtg_mux3to1_w32
    port map (
      SEL => ua_mux29_sel, 
      DIN0 => uf_idx_index_out, 
      DIN1 => uf_mmx_doutmax, 
      DIN2 => ua_altsel01_dout, 
      DOUT => ua_mux29_dout
    );

  UA_MUX30 : rtg_mux6to1_w5
    port map (
      SEL => ua_mux30_sel, 
      DIN0 => bitrange31to27_00, 
      DIN1 => bitrange15to11_00, 
      DIN2 => bitrange10to6_00, 
      DIN3 => const_5h02, 
      DIN4 => bitrange26to22_00, 
      DIN5 => bitrange25to21_00, 
      DOUT => ua_mux30_dout
    );

  UA_MUX31 : rtg_mux4to1_w5
    port map (
      SEL => ua_mux31_sel, 
      DIN0 => bitrange26to22_00, 
      DIN1 => bitrange15to11_00, 
      DIN2 => bitrange20to16_00, 
      DIN3 => bitrange25to21_00, 
      DOUT => ua_mux31_dout
    );

  UA_MUX32 : rtg_mux2to1_w5
    port map (
      SEL => ua_mux32_sel, 
      DIN0 => bitrange10to6_00, 
      DIN1 => bitrange20to16_00, 
      DOUT => ua_mux32_dout
    );

  UA_MUX33 : rtg_mux2to1_w7
    port map (
      SEL => ua_mux33_sel, 
      DIN0 => bitrange6to0_00, 
      DIN1 => const_7h07, 
      DOUT => ua_mux33_dout
    );

  UA_MUX34 : rtg_mux2to1_w32
    port map (
      SEL => ua_mux34_sel, 
      DIN0 => uf_gpr_data_out2, 
      DIN1 => uf_gpr_data_out0, 
      DOUT => ua_mux34_dout
    );

  UA_MUX35 : rtg_mux2to1_w32
    port map (
      SEL => ua_mux35_sel, 
      DIN0 => uf_mmx_doutmax, 
      DIN1 => ua_altsel01_dout, 
      DOUT => ua_mux35_dout
    );

  UA_MUX36 : rtg_mux2to1_w32
    port map (
      SEL => ua_mux36_sel, 
      DIN0 => uf_mmx_doutmax, 
      DIN1 => ua_altsel01_dout, 
      DOUT => ua_mux36_dout
    );

  UA_MUX37 : rtg_mux2to1_w32
    port map (
      SEL => ua_mux37_sel, 
      DIN0 => uf_mmx_doutmax, 
      DIN1 => ua_altsel01_dout, 
      DOUT => ua_mux37_dout
    );

  UA_MUX38 : rtg_mux2to1_w32
    port map (
      SEL => ua_mux38_sel, 
      DIN0 => uf_mmx_doutmax, 
      DIN1 => ua_altsel01_dout, 
      DOUT => ua_mux38_dout
    );

  UA_PREG00 : rtg_register_w32
    port map (
      CLK => CLK, 
      RST => RESET, 
      ENB => ua_preg00_enb, 
      DIN => uf_pc_data_out, 
      DOUT => ua_preg00_dout
    );

  UA_PREG01 : rtg_register_w32
    port map (
      CLK => CLK, 
      RST => RESET, 
      ENB => ua_preg01_enb, 
      DIN => uf_fwu0_data_out, 
      DOUT => ua_preg01_dout
    );

  UA_PREG02 : rtg_register_w32
    port map (
      CLK => CLK, 
      RST => RESET, 
      ENB => ua_preg02_enb, 
      DIN => uf_fwu1_data_out, 
      DOUT => ua_preg02_dout
    );

  UA_PREG03 : rtg_register_w32
    port map (
      CLK => CLK, 
      RST => RESET, 
      ENB => ua_preg03_enb, 
      DIN => ua_preg02_dout, 
      DOUT => ua_preg03_dout
    );

  UA_PREG04 : rtg_register_w32
    port map (
      CLK => CLK, 
      RST => RESET, 
      ENB => ua_preg04_enb, 
      DIN => uf_dummy_streg_data_out, 
      DOUT => ua_preg04_dout
    );

  UA_PREG05 : rtg_register_w32
    port map (
      CLK => CLK, 
      RST => RESET, 
      ENB => ua_preg05_enb, 
      DIN => uf_gpr_data_out0, 
      DOUT => ua_preg05_dout
    );

  UA_PREG06 : rtg_register_w32
    port map (
      CLK => CLK, 
      RST => RESET, 
      ENB => ua_preg06_enb, 
      DIN => uf_gpr_data_out1, 
      DOUT => ua_preg06_dout
    );

  UA_PREG07 : rtg_register_w32
    port map (
      CLK => CLK, 
      RST => RESET, 
      ENB => ua_preg07_enb, 
      DIN => uf_gpr_data_out2, 
      DOUT => ua_preg07_dout
    );

  UA_PREG08 : rtg_register_w5
    port map (
      CLK => CLK, 
      RST => RESET, 
      ENB => ua_preg08_enb, 
      DIN => bitrange16to12_00, 
      DOUT => ua_preg08_dout
    );

  UA_PREG09 : rtg_register_w5
    port map (
      CLK => CLK, 
      RST => RESET, 
      ENB => ua_preg09_enb, 
      DIN => ua_preg08_dout, 
      DOUT => ua_preg09_dout
    );

  UA_PREG10 : rtg_register_w32
    port map (
      CLK => CLK, 
      RST => RESET, 
      ENB => ua_preg10_enb, 
      DIN => ua_mux02_dout, 
      DOUT => ua_preg10_dout
    );

  UA_PREG11 : rtg_register_w32
    port map (
      CLK => CLK, 
      RST => RESET, 
      ENB => ua_preg11_enb, 
      DIN => ua_mux03_dout, 
      DOUT => ua_preg11_dout
    );

  UA_PREG12 : rtg_register_w32
    port map (
      CLK => CLK, 
      RST => RESET, 
      ENB => ua_preg12_enb, 
      DIN => ua_mux04_dout, 
      DOUT => ua_preg12_dout
    );

  UA_PREG13 : rtg_register_w5
    port map (
      CLK => CLK, 
      RST => RESET, 
      ENB => ua_preg13_enb, 
      DIN => ua_mux05_dout, 
      DOUT => ua_preg13_dout
    );

  UA_PREG14 : rtg_register_w32
    port map (
      CLK => CLK, 
      RST => RESET, 
      ENB => ua_preg14_enb, 
      DIN => ua_mux08_dout, 
      DOUT => ua_preg14_dout
    );

  UA_PREG15 : rtg_register_w5
    port map (
      CLK => CLK, 
      RST => RESET, 
      ENB => ua_preg15_enb, 
      DIN => ua_mux11_dout, 
      DOUT => ua_preg15_dout
    );

  UA_PREG16 : rtg_register_w5
    port map (
      CLK => CLK, 
      RST => RESET, 
      ENB => ua_preg16_enb, 
      DIN => ua_mux13_dout, 
      DOUT => ua_preg16_dout
    );

  UA_PREG17 : rtg_register_w5
    port map (
      CLK => CLK, 
      RST => RESET, 
      ENB => ua_preg17_enb, 
      DIN => ua_preg16_dout, 
      DOUT => ua_preg17_dout
    );

  UA_PREG18 : rtg_register_w32
    port map (
      CLK => CLK, 
      RST => RESET, 
      ENB => ua_preg18_enb, 
      DIN => ua_mux16_dout, 
      DOUT => ua_preg18_dout
    );

  UA_PREG19 : rtg_register_w5
    port map (
      CLK => CLK, 
      RST => RESET, 
      ENB => ua_preg19_enb, 
      DIN => ua_mux19_dout, 
      DOUT => ua_preg19_dout
    );

  UA_PREG20 : rtg_register_w5
    port map (
      CLK => CLK, 
      RST => RESET, 
      ENB => ua_preg20_enb, 
      DIN => ua_mux21_dout, 
      DOUT => ua_preg20_dout
    );

  UA_PREG21 : rtg_register_w5
    port map (
      CLK => CLK, 
      RST => RESET, 
      ENB => ua_preg21_enb, 
      DIN => ua_preg20_dout, 
      DOUT => ua_preg21_dout
    );

  UA_PREG22 : rtg_register_w5
    port map (
      CLK => CLK, 
      RST => RESET, 
      ENB => ua_preg22_enb, 
      DIN => ua_mux23_dout, 
      DOUT => ua_preg22_dout
    );

  UA_PREG23 : rtg_register_w5
    port map (
      CLK => CLK, 
      RST => RESET, 
      ENB => ua_preg23_enb, 
      DIN => ua_preg22_dout, 
      DOUT => ua_preg23_dout
    );

  UA_PREG24 : rtg_register_w5
    port map (
      CLK => CLK, 
      RST => RESET, 
      ENB => ua_preg24_enb, 
      DIN => ua_mux24_dout, 
      DOUT => ua_preg24_dout
    );

  UA_PREG25 : rtg_register_w5
    port map (
      CLK => CLK, 
      RST => RESET, 
      ENB => ua_preg25_enb, 
      DIN => ua_preg24_dout, 
      DOUT => ua_preg25_dout
    );

  UA_PREG26 : rtg_register_w32
    port map (
      CLK => CLK, 
      RST => RESET, 
      ENB => ua_preg26_enb, 
      DIN => ua_mux26_dout, 
      DOUT => ua_preg26_dout
    );

  UA_PREG27 : rtg_register_w32
    port map (
      CLK => CLK, 
      RST => RESET, 
      ENB => ua_preg27_enb, 
      DIN => ua_mux27_dout, 
      DOUT => ua_preg27_dout
    );

  UA_PREG28 : rtg_register_w32
    port map (
      CLK => CLK, 
      RST => RESET, 
      ENB => ua_preg28_enb, 
      DIN => ua_mux29_dout, 
      DOUT => ua_preg28_dout
    );

  UA_PREG29 : rtg_register_w32
    port map (
      CLK => CLK, 
      RST => RESET, 
      ENB => ua_preg29_enb, 
      DIN => ua_mux34_dout, 
      DOUT => ua_preg29_dout
    );

  UA_PREG30 : rtg_register_w32
    port map (
      CLK => CLK, 
      RST => RESET, 
      ENB => ua_preg30_enb, 
      DIN => ua_mux36_dout, 
      DOUT => ua_preg30_dout
    );

  UA_PREG31 : rtg_register_w32
    port map (
      CLK => CLK, 
      RST => RESET, 
      ENB => ua_preg31_enb, 
      DIN => ua_mux38_dout, 
      DOUT => ua_preg31_dout
    );

  UA_MUX39 : rtg_mux2to1_w32
    port map (
      SEL => ua_mux39_sel, 
      DIN0 => ua_mux00_dout, 
      DIN1 => ua_mux01_dout, 
      DOUT => ua_mux39_dout
    );

  UA_MUX40 : rtg_mux2to1_w32
    port map (
      SEL => ua_mux40_sel, 
      DIN0 => ua_preg11_dout, 
      DIN1 => const_32h0000f800, 
      DOUT => ua_mux40_dout
    );

  UA_MUX41 : rtg_mux2to1_w32
    port map (
      SEL => ua_mux41_sel, 
      DIN0 => ua_preg12_dout, 
      DIN1 => uf_trap_hand_reg_data_out, 
      DOUT => ua_mux41_dout
    );

  UA_MUX42 : rtg_mux2to1_w5
    port map (
      SEL => ua_mux42_sel, 
      DIN0 => ua_mux22_dout, 
      DIN1 => const_5h02, 
      DOUT => ua_mux42_dout
    );

  UA_MUX43 : rtg_mux2to1_w32
    port map (
      SEL => ua_mux43_sel, 
      DIN0 => ua_mux25_dout, 
      DIN1 => saved_pc_signal, 
      DOUT => ua_mux43_dout
    );

  UA_MUX44 : rtg_mux2to1_w32
    port map (
      SEL => ua_mux44_sel, 
      DIN0 => bitor_01, 
      DIN1 => bitand_00, 
      DOUT => ua_mux44_dout
    );

  bitrange31to27_00 <= uf_ir_data_out(31 downto 27);
  bitrange26to22_00 <= uf_ir_data_out(26 downto 22);
  const_b0 <= '0';
  concat_00 <= const_b0 & uf_alu_flag;
  bitrange21to17_00 <= uf_ir_data_out(21 downto 17);
  bitrange31to0_00 <= uf_mul_result(31 downto 0);
  bitrange4to0_00 <= uf_fwu1_data_out(4 downto 0);
  const_31h00000000 <= "0000000000000000000000000000000";
  bitrange1to0_00 <= uf_alu_flag(1 downto 0);
  cmpeq_00 <= 
	'1' when bitrange1to0_00 = "10" else 
	'0';
  cmpeq_01 <= 
	'1' when bitrange1to0_00 = "01" else 
	'0';
  bitpos3_00 <= uf_alu_flag(3);
  bitor_00 <= cmpeq_00 or cmpeq_01;
  concat_01 <= const_31h00000000 & bitor_00;
  bitpos2_00 <= uf_alu_flag(2);
  bitnot_00 <= not bitpos2_00;
  bitnot_01 <= not bitpos3_00;
  concat_02 <= const_31h00000000 & bitnot_01;
  concat_03 <= const_31h00000000 & bitpos2_00;
  concat_04 <= const_31h00000000 & bitnot_00;
  bitrange15to11_00 <= uf_ir_data_out(15 downto 11);
  bitrange31to16_00 <= uf_ir_data_out(31 downto 16);
  bitrange10to6_00 <= uf_ir_data_out(10 downto 6);
  bitrange4to0_01 <= bitrange31to16_00(4 downto 0);
  bitrange15to0_00 <= uf_fwu0_data_out(15 downto 0);
  const_16h0000 <= "0000000000000000";
  concat_05 <= bitrange15to0_00 & const_16h0000;
  cmpeq_02 <= 
	'1' when ua_preg01_dout = "00000000000000000000000000000000" else 
	'0';
  cmpneq_00 <= 
	'1' when ua_preg01_dout /= "00000000000000000000000000000000" else 
	'0';
  bitrange31to6_00 <= uf_ir_data_out(31 downto 6);
  const_5h03 <= "00011";
  const_5h02 <= "00010";
  const_32h00004300 <= "00000000000000000100001100000000";
  bitor_01 <= ua_preg04_dout or const_32h00004300;
  bitrange7to0_00 <= ua_preg01_dout(7 downto 0);
  bitrange15to0_01 <= ua_preg01_dout(15 downto 0);
  bitrange25to21_00 <= uf_ir_data_out(25 downto 21);
  bitrange7to4_00 <= uf_dmau_data_in(7 downto 4);
  bitrange3to0_00 <= uf_dmau_data_in(3 downto 0);
  const_28h0000000 <= "0000000000000000000000000000";
  concat_06 <= const_28h0000000 & bitrange7to4_00;
  concat_07 <= const_28h0000000 & bitrange3to0_00;
  bitrange20to16_00 <= uf_ir_data_out(20 downto 16);
  bitrange6to0_00 <= ua_preg05_dout(6 downto 0);
  concat_08 <= const_16h0000 & uf_step_data_out;
  const_7h07 <= "0000111";
  bitrange3to0_01 <= ua_preg06_dout(3 downto 0);
  concat_09 <= const_16h0000 & uf_step_data_out;
  bitrange16to12_00 <= uf_ir_data_out(16 downto 12);
  bitrange2to0_00 <= uf_alu_flag(2 downto 0);
  cmpeq_03 <= 
	'1' when bitrange2to0_00 = "010" else 
	'0';
  cmpeq_04 <= 
	'1' when uf_alu_flag = "1001" else 
	'0';
  bitor_02 <= cmpeq_03 or cmpeq_04;
  saved_pc_signal <= ua_ctrl_dataout_saved_pc;
  const_32h0000f400 <= "00000000000000001111010000000000";
  const_32hffffbcff <= "11111111111111111011110011111111";
  bitand_00 <= uf_dummy_streg_data_out and const_32hffffbcff;
  const_b1 <= '1';
  const_32h0000f000 <= "00000000000000001111000000000000";
  const_32h0000f800 <= "00000000000000001111100000000000";
  uf_pc_reset <= '0';
  uf_dummy_streg_reset <= '0';
  uf_gpr_do_swap <= '0';
  uf_step_clock <= '0';
  uf_step_reset <= '0';
  uf_idx_clock_new <= '0';
  uf_idx_reset_new <= '0';
  uf_clmp_clock <= '0';
  uf_clmp_reset <= '0';
  uf_pcm_clock_new <= '0';
  uf_pcm_reset_new <= '0';
  uf_mmx_clock <= '0';
  uf_mmx_reset <= '0';
end RTL;

-----------------------------------------
-- Generated by ASIP Meister ver.2.3.4 --
-----------------------------------------
